{
  "swagger": "2.0",
  "info": {
    "title": "Box Platform API",
    "description": "[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.",
    "termsOfService": "https://cloud.app.box.com/s/rmwxu64h1ipr41u49w3bbuvbsa29wku9",
    "contact": {
      "name": "Box, Inc",
      "url": "https://box.dev",
      "email": "devrel@box.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "2.0"
  },
  "host": "api.box.com",
  "basePath": "/2.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/files/{file_id}": {
      "get": {
        "operationId": "get_files_id",
        "summary": "Get file information",
        "tags": [
          "Files"
        ],
        "description": "Retrieves the details about a file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-Rep-Hints",
            "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a file object.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "304": {
            "description": "Returns an empty response when the `If-None-Match` header matches\nthe current `etag` value of the folder. This indicates that the folder\nhas not changed since it was last requested."
          },
          "401": {
            "description": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the file is not found, or the user does not\nhave access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned if the `file_id` is not in a recognized format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "415": {
            "description": "Returns an error if an action is performed on a file with an\nincorrect media type.\n\n* `unsupported_media_type` when requesting an `expiring_embed_link`\n  for a file that is not supported by Box Embed.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_files_id",
        "summary": "Restore file",
        "tags": [
          "Files"
        ],
        "description": "Restores a file that has been moved to the trash.\n\nAn optional new parent ID can be provided to restore the file to in case the\noriginal folder has been deleted.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "description": "An optional new name for the file.",
                  "type": "string"
                },
                "parent": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The parent for this item",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of parent item"
                        }
                      }
                    },
                    {
                      "description": "Specifies an optional ID of a folder to restore the file to\nwhen the original folder no longer exists.\n\nPlease be aware that this ID will only be used if the original\nfolder no longer exists. Use this ID to provide a fallback\nlocation to restore the file to if the original location\nhas been deleted."
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a file object when the file has been restored.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "403": {
            "description": "Returns an error if the user does not have access to the folder\nthe file is being restored to, or the user does not have permission\nto restore files from the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the file is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if there is an file with the same name\nin the folder the file is being restored to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_files_id",
        "summary": "Update file",
        "tags": [
          "Files"
        ],
        "description": "Updates a file. This can be used to rename or move a file,\ncreate a shared link, or lock a file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "An optional different name for the file. This can be used to\nrename the file."
                },
                "description": {
                  "type": "string",
                  "description": "The description for a file. This can be seen in the right-hand sidebar panel\nwhen viewing a file in the Box web app. Additionally, this index is used in\nthe search index of the file, allowing users to find the file by the content\nin the description.",
                  "maxLength": 256
                },
                "parent": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The parent for this item",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of parent item"
                        }
                      }
                    },
                    {
                      "description": "An optional new parent folder for the file. This can be used\nto move the file to a new folder."
                    }
                  ]
                },
                "shared_link": {
                  "allOf": [
                    {
                      "description": "Defines a shared link for an item. Set this to `null` to remove\nthe shared link.",
                      "type": "object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "description": "The level of access for the shared link. This can be\nrestricted to anyone with the link (`open`), only people\nwithin the company (`company`) and only those who\nhave been invited to the folder (`collaborators`).\n\nThis field defaults to the `default` access level,\nwhich is the access level as specified by the\nenterprise admin.\n\nThe `company` access level is only available to paid\naccounts.",
                          "enum": [
                            "default",
                            "open",
                            "company",
                            "collaborators"
                          ]
                        },
                        "password": {
                          "type": "string",
                          "description": "The password required to access the shared link. Set the\npassword to `null` to remove it.\n\nA password can only be set when `access` is set to `open`."
                        },
                        "unshared_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp at which this shared link will\nexpire. This field can only be set by\nusers with paid accounts."
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "can_download": {
                              "type": "boolean",
                              "description": "If the shared link allows for downloading of files.\nThis can only be set when `access` is set to\n`open` or `company`."
                            }
                          }
                        }
                      }
                    },
                    {
                      "description": "Defines a shared link for a file. Set this to `null` to remove\nthe shared link."
                    }
                  ]
                },
                "lock": {
                  "type": "object",
                  "description": "Defines a lock on an item. This prevents the item from being\nmoved, renamed, or otherwise changed by anyone other than the user\nwho created the lock.\n\nSet this to `null` to remove the lock.",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "access": {
                      "type": "string",
                      "description": "The type of this object.",
                      "enum": [
                        "lock"
                      ]
                    },
                    "expires_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Defines the time at which the lock expires."
                    },
                    "is_download_prevented": {
                      "type": "boolean",
                      "description": "Defines if the file can be downloaded while it is locked."
                    }
                  }
                },
                "permissions": {
                  "description": "Defines who can download a file.",
                  "type": "object",
                  "properties": {
                    "can_download": {
                      "description": "Defines who is allowed to download this file. The possible\nvalues are either `open` for everyone or `company` for\nthe other members of the user's enterprise.\n\nThis setting overrides the download permissions that are\nnormally part of the `role` of a collaboration. When set to\n`company`, this essentially removes the download option for\nexternal users with `viewer` or `editor` a roles.",
                      "type": "string",
                      "enum": [
                        "open",
                        "company"
                      ]
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100,
                  "description": "The tags for this item. These tags are shown in\nthe Box web app and mobile apps next to an item.\n\nTo add or remove a tag, retrieve the item's current tags,\nmodify them, and then update this field.\n\nThere is a limit of 100 tags per item, and 10,000\nunique tags per enterprise."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a file object.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "description": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returned if the user does not have all the permissions to complete the\nupdate.\n\n* `access_denied_insufficient_permissions` when the authenticated user\ndoes not have access the destination folder to move the file to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the file is not found, or the user does not\nhave access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned if the `file_id` is not in a recognized format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error when the `If-Match` header does not match\nthe current `etag` value of the file. This indicates that the file\nhas changed since it was last requested.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_id",
        "summary": "Delete file",
        "tags": [
          "Files"
        ],
        "description": "Deletes a file, either permanently or by moving it to\nthe trash.\n\nThe the enterprise settings determine whether the item will\nbe permanently deleted from Box or moved to the trash.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the file has been successfully\ndeleted."
          },
          "401": {
            "description": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the file is not found or has already been deleted, or the user\ndoes not have access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned if the `file_id` is not in a recognized format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error when the `If-Match` header does not match\nthe current `etag` value of the file. This indicates that the file\nhas changed since it was last requested.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/content": {
      "get": {
        "operationId": "get_files_id_content",
        "summary": "Download file",
        "tags": [
          "Files"
        ],
        "description": "Returns the contents of a file in binary format.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Range",
            "description": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "BoxApi",
            "description": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "The file version to download",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "If the file is not ready to be downloaded yet `Retry-After` header will\nbe returned indicating the time in seconds after which the file will\nbe available for the client to download.\n\nThis response can occur when the file was uploaded immediately before the\ndownload request.",
            "headers": {
              "Retry-After": {
                "description": "The time in seconds after which to retry the download",
                "type": "integer"
              }
            }
          },
          "302": {
            "description": "If the file is available to be downloaded the response will include a\n`Location` header for the file on `dl.boxcloud.com`.\n\nThe `dl.boxcloud.com` URL is not persistent and clients will need\nto follow the redirect in order to actually download the file.",
            "headers": {
              "Location": {
                "description": "A pointer to the download URL",
                "type": "string",
                "format": "url"
              }
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/content": {
      "options": {
        "operationId": "options_files_content",
        "summary": "Preflight check before upload",
        "tags": [
          "Files"
        ],
        "description": "Performs a check to verify that a file will be accepted by Box\nbefore you upload the entire file.",
        "responses": {
          "200": {
            "description": "If the check passed, the response will include a session URL that\ncan be used to upload the file to.",
            "schema": {
              "$ref": "#/definitions/UploadUrl"
            }
          },
          "409": {
            "description": "If the check did not pass, the response will include some details on\nwhy it did not pass.",
            "schema": {
              "$ref": "#/definitions/ConflictError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name for the file"
                },
                "size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The size of the file in bytes"
                },
                "parent": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The parent for this item",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of parent item"
                        }
                      }
                    },
                    {
                      "description": "The parent folder to upload the file to"
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "/files/{file_id}/copy": {
      "post": {
        "operationId": "post_files_id_copy",
        "summary": "Copy file",
        "description": "Creates a copy of a file.",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "parent"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "An optional new name for the copied file.\n\nThere are some restrictions to the file name. Names containing\nnon-printable ASCII characters, forward and backward slashes\n(`/`, `\\`), and protected names like `.` and `..` are\nautomatically sanitized by removing the non-allowed\ncharacters.",
                  "maxLength": 255
                },
                "version": {
                  "type": "string",
                  "description": "An optional ID of the specific file version to copy."
                },
                "parent": {
                  "type": "object",
                  "description": "The destination folder to copy the file to.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of folder to copy the file to."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new file object representing the copied file.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "304": {
            "description": "Returns an empty response when the `If-None-Match` header matches\nthe current `etag` value of the file. This indicates that the file\nhas not changed since it was last requested."
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `bad_request` when a parameter is missing.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if either the source file or the destination\nfolder could not be found, or the authenticated user does not\nhave access to either.\n\n* `not_found` when the authenticated user does not have access\n  to the source file or the destination folder",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.\n\n* `item_name_in_use` when a folder with the same name already\n  exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/thumbnail.{extension}": {
      "get": {
        "operationId": "get_files_id_thumbnail_id",
        "summary": "Get file thumbnail",
        "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nSizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in\nthe `.png` format and sizes of `32x32`, `94x94`, `160x160`, and `320x320`\ncan be returned in the `.jpg` format.\n\nThumbnails can be generated for the image and video file formats listed\n[found on our community site][1].\n\n[1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "extension",
            "description": "The file format for the thumbnail",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "png",
              "jpg"
            ]
          },
          {
            "name": "min_height",
            "description": "The minimum height of the thumbnail",
            "in": "query",
            "type": "integer",
            "minimum": 32,
            "maximum": 320
          },
          {
            "name": "min_width",
            "description": "The minimum width of the thumbnail",
            "in": "query",
            "type": "integer",
            "minimum": 32,
            "maximum": 320
          },
          {
            "name": "max_height",
            "description": "The maximum height of the thumbnail",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 32,
            "maximum": 320
          },
          {
            "name": "max_width",
            "description": "The maximum width of the thumbnail",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 32,
            "maximum": 320
          }
        ],
        "responses": {
          "200": {
            "description": "When a thumbnail can be created the thumbnail data will be\nreturned in the body of the response.",
            "schema": {
              "type": "string",
              "format": "binary",
              "description": "The thumbnail"
            }
          },
          "202": {
            "description": "Sometimes generating a thumbnail can take a few seconds. In these\nsituations the API returns a `Location`-header pointing to a\nplaceholder graphic for this file type.\n\nThe placeholder graphic can be used in a user interface until the\nthumbnail generation has completed. The `Retry-After`-header indicates\nwhen to the thumbnail will be ready. At that time, retry this endpoint\nto retrieve the thumbnail.",
            "headers": {
              "Retry-After": {
                "description": "The time in seconds after which the thumbnail will be available.\n\nYour application  only attempt to get the thumbnail again after\nthis time.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "A pointer to a placeholder graphic that can be used until the\nthumbnail has been generated.",
                "type": "string",
                "format": "url"
              }
            }
          },
          "302": {
            "description": "Returns an error when Box is not able to create a thumbnail for this\nfile type.\n\nInstead, a `Location`-header pointing to a placeholder graphic for\nthis file type will be returned.",
            "headers": {
              "Location": {
                "description": "A pointer to a placeholder graphic that can be used for this\nfile type.",
                "type": "string",
                "format": "url"
              }
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `requested_preview_unavailable` - an incorrect dimension was\n  requested. This will happen if the dimension requested is\n  larger or smaller than the available file sizes for the thumbnail\n  format, or when when any of the size constraints contradict\n  each other.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the file is not found, or the user does not\nhave access to the file, or for additional reasons.\n\n* `preview_cannot_be_generated` - Box does not support thumbnails\n  for this type of file",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/collaborations": {
      "get": {
        "operationId": "get_files_id_collaborations",
        "summary": "List file collaborations",
        "description": "Retrieves a list of collaborations for a file. This\nreturns all the users that have access to the file.",
        "tags": [
          "Collaborations (List)"
        ],
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of collaboration objects. If there are no\ncollaborations on this file an empty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/Collaborations"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/comments": {
      "get": {
        "operationId": "get_files_id_comments",
        "summary": "List file comments",
        "description": "Retrieves a list of comments for a file.",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of comment objects. If there are no\ncomments on this file an empty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/Comments"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/tasks": {
      "get": {
        "operationId": "get_files_id_tasks",
        "summary": "List tasks on file",
        "description": "Retrieves a list of all the tasks for a file. This\nendpoint does not support pagination.",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of tasks on a file.\n\nIf there are no tasks on this file an empty collection is returned\ninstead.",
            "schema": {
              "$ref": "#/definitions/Tasks"
            }
          },
          "404": {
            "description": "Returns an error when the file could not be found or the user does not\nhave access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returns an error when the `file_id` was not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "Returns an error when an attempt was made to retrieve tasks for the file\nwith ID `0`.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/trash": {
      "get": {
        "operationId": "get_files_id_trash",
        "summary": "Get trashed file",
        "tags": [
          "Trashed items"
        ],
        "description": "Retrieves a file that has been moved to the trash.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file that was trashed,\nincluding information about when the it\nwas moved to the trash.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "404": {
            "description": "Returns an error if the file is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_id_trash",
        "summary": "Permanently remove file",
        "tags": [
          "Trashed items"
        ],
        "description": "Permanently deletes a file that is in the trash.\nThis action cannot be undone.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the file was\npermanently deleted."
          },
          "404": {
            "description": "Returns an error if the file is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/versions": {
      "get": {
        "operationId": "get_files_id_versions",
        "summary": "List all file versions",
        "tags": [
          "File versions"
        ],
        "description": "Retrieve a list of the past versions for a file.\n\nVersions are only tracked by Box users with premium accounts. To fetch the ID\nof the current version of a file, use the `GET /file/:id` API.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of past versions for this file.",
            "schema": {
              "$ref": "#/definitions/FileVersions"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/versions/{file_version_id}": {
      "get": {
        "operationId": "get_files_id_versions_id",
        "summary": "Get file version",
        "tags": [
          "File versions"
        ],
        "description": "Retrieve a specific version of a file.\n\nVersions are only tracked for Box users with premium accounts.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "file_version_id",
            "description": "The ID of the file version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a specific version of a file.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/FileVersion"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_id_versions_id",
        "summary": "Remove file version",
        "tags": [
          "File versions"
        ],
        "description": "Move a file version to the trash.\n\nVersions are only tracked for Box users with premium accounts.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_version_id",
            "description": "The ID of the file version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the file has been successfully\ndeleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/versions/current": {
      "post": {
        "operationId": "post_files_id_versions_current",
        "summary": "Revert file version",
        "tags": [
          "File versions"
        ],
        "description": "Revert to a previous version of a file.\n\n\nIf previous versions exist, this method can be used to\npromote one of the older versions to the top of the version history.\n\nThis actually creates a new copy of the old version and puts it at the\ntop of the versions history. The file will have the exact same contents\nas the older version, with the the same hash digest, `etag`, and\nname as the original.\n\nOther properties such as comments do not get updated to their\nformer values.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "The file version to revert to",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The file version ID"
                },
                "type": {
                  "type": "string",
                  "description": "The type to revert to",
                  "enum": [
                    "file_version"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a newly created file version object.",
            "schema": {
              "$ref": "#/definitions/FileVersion"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/metadata": {
      "get": {
        "operationId": "get_files_id_metadata",
        "summary": "List metadata instances on file",
        "tags": [
          "Metadata instances (Files)"
        ],
        "description": "Retrieves all metadata for a given file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all the metadata associated with a file.\n\nThis API does not support pagination and will therefore always return\nall of the metadata associated to the file.",
            "schema": {
              "$ref": "#/definitions/Metadatas"
            }
          },
          "403": {
            "description": "Returned when the request parameters are not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned when the user does not have access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/metadata/{scope}/{template_key}": {
      "get": {
        "operationId": "get_files_id_metadata_id_id",
        "summary": "Get metadata instance on file",
        "tags": [
          "Metadata instances (Files)"
        ],
        "description": "Retrieves the instance of a metadata template that has been applied to a\nfile.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "An instance of the metadata template that includes\nadditional \"key:value\" pairs defined by the user or\nan application.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "403": {
            "description": "Returned when the request parameters are not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the metadata template specified\nwas not applied to this file or the user does not have access to the\nfile.\n\n* `instance_not_found` - The metadata template was not applied to the\nfile.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned when the method was not allowed.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_files_id_metadata_id_id",
        "summary": "Create metadata instance on file",
        "tags": [
          "Metadata instances (Files)"
        ],
        "description": "Applies an instance of a metadata template to a file.\n\nIn most cases only values that are present in the metadata template\nwill be accepted, except for the `global.properties` template which accepts\nany key-value pair.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "description": "A value for each of the fields that are present on the metadata\ntemplate.\n\nFor the `global.properties` template this can be an a list of zero\nor more fields, as this template allows for any generic key-value\npairs to be stored on the template.",
                "x-box-example-key": "name"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the instance of the template that was applied to the file,\nincluding the data that was applied to the template.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "Returns an error when the request body is not valid.\n\n* `schema_validation_failed` - The request body contains a value for a for\na field that either does not exist, or for which the value or type does\nnot match the expected field type. An example might be an unknown option\nfor an `enum` or `multiSelect` field.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the file or metadata template could not be found.\n\n* `not_found` - The file could not be found, or the user does not have\naccess to the file.\n* `instance_tuple_not_found` - The metadata template could not be found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error when an instance of this metadata template is already\npresent on the file.\n\n* `tuple_already_exists` - An instance of them metadata template already\nexists on the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_files_id_metadata_id_id",
        "summary": "Update metadata instance on file",
        "tags": [
          "Metadata instances (Files)"
        ],
        "description": "Updates a piece of metadata on a file.\n\nThe metadata instance can only be updated if the template has already been\napplied to the file before. When editing metadata, only values that match\nthe metadata template schema will be accepted.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata instance will not be changed.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated metadata template instance, with the\ncustom template data included.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "Returns an error when the request body is not valid.\n\n* `bad_request` - The request body format is not an array of valid JSON\nPatch objects.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "Returns an error in some edge cases when the request body is not a valid\narray of JSON Patch items.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_id_metadata_id_id",
        "summary": "Remove metadata instance from file",
        "tags": [
          "Metadata instances (Files)"
        ],
        "description": "Deletes a piece of file metadata.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the metadata is\nsuccessfully deleted."
          },
          "400": {
            "description": "Returned when the request parameters are not valid. This may happen of the\n`scope` is not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the file does not have an instance of the metadata\ntemplate applied to it, or when the user does not have access to the\nfile.\n\n* `instance_not_found` - An instance of the metadata template with the\ngiven `scope` and `templateKey` was not found on this file.\n* `not_found` - The file was not found, or the user does not have access\nto the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned when the method was not allowed.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/{file_id}/watermark": {
      "get": {
        "operationId": "get_files_id_watermark",
        "summary": "Get watermark on file",
        "tags": [
          "Watermarks (Files)"
        ],
        "description": "Retrieve the watermark for a file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing information about the\nwatermark associated for to this file.",
            "schema": {
              "$ref": "#/definitions/Watermark"
            }
          },
          "404": {
            "description": "Returns an error if the file does not have a watermark applied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_files_id_watermark",
        "summary": "Apply watermark to file",
        "tags": [
          "Watermarks (Files)"
        ],
        "description": "Applies or update a watermark on a file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "watermark"
              ],
              "properties": {
                "watermark": {
                  "type": "object",
                  "description": "The watermark to imprint on the file",
                  "required": [
                    "imprint"
                  ],
                  "properties": {
                    "imprint": {
                      "type": "string",
                      "description": "The type of watermark to apply.\n\nCurrently only supports one option.",
                      "enum": [
                        "default"
                      ]
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an updated watermark if a watermark already\nexisted on this file.",
            "schema": {
              "$ref": "#/definitions/Watermark"
            }
          },
          "201": {
            "description": "Returns a new watermark if no watermark existed on\nthis file yet.",
            "schema": {
              "$ref": "#/definitions/Watermark"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_id_watermark",
        "summary": "Remove watermark from file",
        "tags": [
          "Watermarks (Files)"
        ],
        "description": "Removes the watermark from a file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response will be returned when the watermark\nwas successfully deleted."
          },
          "404": {
            "description": "Returns an error if the file did not have\na watermark applied to it",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}": {
      "get": {
        "operationId": "get_folders_id",
        "summary": "Get folder information",
        "tags": [
          "Folders"
        ],
        "description": "Retrieves details for a folder, including the first 100 entries\nin the folder.\n\nTo fetch more items within the folder, please use the\n[Get items in a folder](#get-folders-id-items) endpoint.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a folder, including the first 100 entries in the folder.\n\nTo fetch more items within the folder, please use the\n[Get items in a folder](#get-folders-id-items) endpoint.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "304": {
            "description": "Returns an empty response when the `If-None-Match` header matches\nthe current `etag` value of the folder. This indicates that the folder\nhas not changed since it was last requested."
          },
          "403": {
            "description": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the folder is not found, or the user does not\nhave access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned if the `folder_id` is not in a recognized format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_folders_id",
        "summary": "Restore folder",
        "tags": [
          "Trashed items"
        ],
        "description": "Restores a folder that has been moved to the trash.\n\nAn optional new parent ID can be provided to restore the folder to in case the\noriginal folder has been deleted.\n\n# Folder locking\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "description": "An optional new name for the folder.",
                  "type": "string"
                },
                "parent": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The parent for this item",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of parent item"
                        }
                      }
                    },
                    {
                      "description": "Specifies an optional ID of a folder to restore the folder\nto when the original folder no longer exists.\n\nPlease be aware that this ID will only be used if the original\nfolder no longer exists. Use this ID to provide a fallback\nlocation to restore the folder to if the original location\nhas been deleted."
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a folder object when the folder has been restored.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "403": {
            "description": "Returns an error if the user does not have access to the folder\nthe folder is being restored to, or the user does not have permission\nto restore folders from the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the folder is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "* Returned an error if there is a folder with the same name\n  in the destination folder.\n\n* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_folders_id",
        "summary": "Update folder",
        "description": "Updates a folder. This can be also be used to move the folder,\ncreate shared links, update collaborations, and more.",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The optional new name for this folder."
                },
                "description": {
                  "type": "string",
                  "description": "The optional description of this folder",
                  "maxLength": 256
                },
                "sync_state": {
                  "type": "string",
                  "description": "Specifies whether a folder should be synced to a\nuser's device or not. This is used by Box Sync\n(discontinued) and is not used by Box Drive.",
                  "enum": [
                    "synced",
                    "not_synced",
                    "partially_synced"
                  ]
                },
                "can_non_owners_invite": {
                  "type": "boolean",
                  "description": "Specifies if users who are not the owner\nof the folder can invite new collaborators to the folder."
                },
                "parent": {
                  "type": "object",
                  "description": "The parent folder for this folder. Use this to move\nthe folder or to restore it out of the trash.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the new parent folder"
                    }
                  }
                },
                "shared_link": {
                  "allOf": [
                    {
                      "description": "Defines a shared link for an item. Set this to `null` to remove\nthe shared link.",
                      "type": "object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "description": "The level of access for the shared link. This can be\nrestricted to anyone with the link (`open`), only people\nwithin the company (`company`) and only those who\nhave been invited to the folder (`collaborators`).\n\nThis field defaults to the `default` access level,\nwhich is the access level as specified by the\nenterprise admin.\n\nThe `company` access level is only available to paid\naccounts.",
                          "enum": [
                            "default",
                            "open",
                            "company",
                            "collaborators"
                          ]
                        },
                        "password": {
                          "type": "string",
                          "description": "The password required to access the shared link. Set the\npassword to `null` to remove it.\n\nA password can only be set when `access` is set to `open`."
                        },
                        "unshared_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp at which this shared link will\nexpire. This field can only be set by\nusers with paid accounts."
                        },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "can_download": {
                              "type": "boolean",
                              "description": "If the shared link allows for downloading of files.\nThis can only be set when `access` is set to\n`open` or `company`."
                            }
                          }
                        }
                      }
                    },
                    {
                      "description": "Enables the creation of a shared link for a folder."
                    }
                  ]
                },
                "folder_upload_email": {
                  "allOf": [
                    {
                      "title": "Folder upload email",
                      "type": "object",
                      "description": "The Write Folder Upload Email object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "enum": [
                            "open",
                            "collaborators"
                          ],
                          "description": "When this parameter has been set, users can email files\nto the email address that has been automatically\ncreated for this folder.\n\nTo create an email address, set this property either when\ncreating or updating the folder.\n\nWhen set to `collaborators`, only emails from registered email\naddresses for collaborators will be accepted. This includes\nany email aliases a user might have registered.\n\nWhen set to `open` it will accept emails from any email\naddress."
                        }
                      }
                    },
                    {
                      "description": "Setting this object enables the upload email address.\n\nThis email address can be used by users to directly\nupload files directly to the folder via email.\n\nSetting the value to `null` will disable the email address."
                    }
                  ]
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100,
                  "description": "The tags for this item. These tags are shown in\nthe Box web app and mobile apps next to an item.\n\nTo add or remove a tag, retrieve the item's current tags,\nmodify them, and then update this field.\n\nThere is a limit of 100 tags per item, and 10,000\nunique tags per enterprise."
                },
                "is_collaboration_restricted_to_enterprise": {
                  "type": "boolean",
                  "description": "Specifies if new invites to this folder are restricted to users\nwithin the enterprise. This does not affect existing\ncollaborations."
                },
                "collections": {
                  "type": "array",
                  "description": "An array of collections to make this folder\na member of. Currently\nwe only support the `favorites` collection.\n\nTo get the ID for a collection, use the\n[List all collections][1] endpoint.\n\nPassing an empty array `[]` or `null` will remove\nthe folder from all collections.\n\n[1]: ../advanced-files-and-folders/#get-collections",
                  "items": {
                    "title": "Reference",
                    "description": "The bare basic reference for an object",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for this object"
                      }
                    }
                  }
                },
                "can_non_owners_view_collaborators": {
                  "type": "boolean",
                  "description": "Restricts collaborators who are not the owner of\nthis folder from viewing other collaborations on\nthis folder.\n\nIt also restricts non-owners from inviting new\ncollaborators.\n\nWhen setting this field to `false`, it is required\nto also set `can_non_owners_invite_collaborators` to\n`false` if it has not already been set."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a folder object for the updated folder\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.\n\nThis call will return synchronously. This holds true even when\nmoving folders with a large a large number of items in all of its\ndescendants. For very large folders, this means the call could\ntake minutes or hours to return.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `bad_request` when a parameter is missing or incorrect. This error also\n  happens when a password is set for a shared link with an access type\n  of `open`.\n* `item_name_too_long` when the folder name is too long.\n* `item_name_invalid` when the folder name contains\n  non-valid characters.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error if the user does not have the required\naccess to perform the action.\n\n* `access_denied_insufficient_permissions`: Returned when the\n  user does not have access to the folder or parent folder.\n\n* `insufficient_scope`: Returned an error if the application\n  does not have the right scope to update folders. Make sure\n  your application has been configured to read and write all files\n  and folders stored in Box.\n\n* `forbidden`: Returned when the user is not allowed to perform this\n  action for other users. This can include trying to create a\n  Shared Link with a `company` access level on a free account.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the folder or parent folder could not be found,\nor the authenticated user does not have access to either folder.\n\n* `not_found` when the authenticated user does not have access\n  to the folder or parent folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in progress.\n\n  The operation can be retried at a later point.\n\n* `item_name_in_use`: Returned if a folder with the name\n  already exists in the parent folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error when the `If-Match` header does not match\nthe current `etag` value of the folder. This indicates that the\nfolder has changed since it was last requested.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "503": {
            "description": "Returns an error when the operation takes longer\nthan 60 seconds. The operation will continue after\nthis response has been returned.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_folders_id",
        "summary": "Delete folder",
        "description": "Deletes a folder, either permanently or by moving it to\nthe trash.",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "recursive",
            "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the folder is successfully deleted\nor moved to the trash."
          },
          "403": {
            "description": "Returns an error if the user does not have the required\naccess to perform the action.\n\n* `access_denied_insufficient_permissions`: Returned when the\n  user does not have access to the folder.\n\n* `insufficient_scope`: Returned an error if the application\n  does not have the right scope to delete folders. Make sure\n  your application has been configured to read and write all files\n  and folders stored in Box.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the folder could not be found,\nor the authenticated user does not have access to the folder.\n\n* `not_found` when the authenticated user does not have access\n  to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "* `folder_not_empty`: Returned if the folder is not empty. Use the\n  `recursive` query parameter to recursively delete the folder and\n  its contents.\n* `operation_blocked_temporary`: Returned if the folder\n  is locked due to another move, copy, delete or restore\n  operation in progress.\n\n  The operation can be retried at a later point.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error when the `If-Match` header does not match\nthe current `etag` value of the folder. This indicates that the\nfolder has changed since it was last requested.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "503": {
            "description": "Returns an error when the operation takes longer\nthan 60 seconds. The operation will continue after\nthis response has been returned.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/items": {
      "get": {
        "operationId": "get_folders_id_items",
        "summary": "List items in folder",
        "tags": [
          "Folders"
        ],
        "description": "Retrieves a page of items in a folder. These items can be files,\nfolders, and web links.\n\nTo request more information about the folder itself, like its size,\nplease use the [Get a folder](#get-folders-id) endpoint instead.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "usemarker",
            "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "sort",
            "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "id",
              "name",
              "date",
              "size"
            ]
          },
          {
            "name": "direction",
            "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of files, folders, and web links contained in a folder.",
            "schema": {
              "$ref": "#/definitions/Items"
            }
          },
          "403": {
            "description": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the folder is not found, or the user does not\nhave access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned if the `folder_id` is not in a recognized format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders": {
      "post": {
        "operationId": "post_folders",
        "summary": "Create folder",
        "tags": [
          "Folders"
        ],
        "description": "Creates a new empty folder within the specified parent folder.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "name",
                "parent"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name for the new folder.\n\nThere are some restrictions to the file name. Names containing\nnon-printable ASCII characters, forward and backward slashes\n(`/`, `\\`), as well as names with trailing spaces are\nprohibited.\n\nAdditionally, the names `.` and `..` are\nnot allowed either.",
                  "maxLength": 255,
                  "minLength": 1
                },
                "parent": {
                  "type": "object",
                  "description": "The parent folder to create the new folder within.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of parent folder"
                    }
                  }
                },
                "folder_upload_email": {
                  "allOf": [
                    {
                      "title": "Folder upload email",
                      "type": "object",
                      "description": "The Write Folder Upload Email object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "enum": [
                            "open",
                            "collaborators"
                          ],
                          "description": "When this parameter has been set, users can email files\nto the email address that has been automatically\ncreated for this folder.\n\nTo create an email address, set this property either when\ncreating or updating the folder.\n\nWhen set to `collaborators`, only emails from registered email\naddresses for collaborators will be accepted. This includes\nany email aliases a user might have registered.\n\nWhen set to `open` it will accept emails from any email\naddress."
                        }
                      }
                    },
                    {
                      "description": "Setting this object enables the upload email address.\n\nThis email address can be used by users to directly\nupload files directly to the folder via email."
                    }
                  ]
                },
                "sync_state": {
                  "type": "string",
                  "description": "Specifies whether a folder should be synced to a\nuser's device or not. This is used by Box Sync\n(discontinued) and is not used by Box Drive.",
                  "enum": [
                    "synced",
                    "not_synced",
                    "partially_synced"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a folder object.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `bad_request` when a parameter is missing or incorrect.\n* `item_name_too_long` when the folder name is too long.\n* `item_name_invalid` when the folder name contains\n  non-valid characters.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error if the user does not have the required\naccess to perform the action. This might be because they\ndon't have access to the folder or parent folder, or because\nthe application does not have permission to write files and\nfolders.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the parent folder could not be found,\nor the authenticated user does not have access to the parent\nfolder.\n\n* `not_found` when the authenticated user does not have access\n  to the parent folder",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.\n\n* `item_name_in_use`: Returned if a folder with the name\n  already exists in the parent folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/copy": {
      "post": {
        "operationId": "post_folders_id_copy",
        "summary": "Copy folder",
        "description": "Creates a copy of a folder within a destination folder.\n\nThe original folder will not be changed.",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "parent"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "An optional new name for the copied folder.\n\nThere are some restrictions to the file name. Names containing\nnon-printable ASCII characters, forward and backward slashes\n(`/`, `\\`), as well as names with trailing spaces are\nprohibited.\n\nAdditionally, the names `.` and `..` are\nnot allowed either.",
                  "maxLength": 255,
                  "minLength": 1
                },
                "parent": {
                  "type": "object",
                  "description": "The destination folder to copy the folder to.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of parent folder"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new folder object representing the copied folder.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "304": {
            "description": "Returns an empty response when the `If-None-Match` header matches\nthe current `etag` value of the folder. This indicates that the folder\nhas not changed since it was last requested."
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `bad_request` when a parameter is missing.\n* `item_name_too_long` when the new folder name is too long.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if either the source or destination folder\ncould not be found, or the authenticated user does not\nhave access to either folders.\n\n* `not_found` when the authenticated user does not have access\n  to the parent folder",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if a folder by this name already exists\nin the destination folder, or if the destination folder\nis locked.\n\n* `item_name_in_use` when a folder with the same name already\n  exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "Returns an error when trying to copy the root folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/collaborations": {
      "get": {
        "operationId": "get_folders_id_collaborations",
        "summary": "List folder collaborations",
        "description": "Retrieves a list of collaborations for a folder. This\nreturns all the users that have access to the folder.",
        "tags": [
          "Collaborations (List)"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of collaboration objects. If there are no\ncollaborations on this folder an empty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/Collaborations"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/trash": {
      "get": {
        "operationId": "get_folders_id_trash",
        "summary": "Get trashed folder",
        "tags": [
          "Trashed items"
        ],
        "description": "Retrieves a folder that has been moved to the trash.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the folder that was trashed,\nincluding information about when the it\nwas moved to the trash.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "404": {
            "description": "Returns an error if the folder is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_folders_id_trash",
        "summary": "Permanently remove folder",
        "tags": [
          "Trashed items"
        ],
        "description": "Permanently deletes a folder that is in the trash.\nThis action cannot be undone.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the folder was\npermanently deleted."
          },
          "404": {
            "description": "Returns an error if the folder is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/metadata": {
      "get": {
        "operationId": "get_folders_id_metadata",
        "summary": "List metadata instances on folder",
        "tags": [
          "Metadata instances (Folders)"
        ],
        "description": "Retrieves all metadata for a given folder. This can not be used on the root\nfolder with ID `0`.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all the metadata associated with a folder.\n\nThis API does not support pagination and will therefore always return\nall of the metadata associated to the folder.",
            "schema": {
              "$ref": "#/definitions/Metadatas"
            }
          },
          "403": {
            "description": "Returned when the request parameters are not valid.\n\n* `forbidden` - this operation is not allowed on the Root folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned when the user does not have access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/metadata/{scope}/{template_key}": {
      "get": {
        "operationId": "get_folders_id_metadata_id_id",
        "summary": "Get metadata instance on folder",
        "tags": [
          "Metadata instances (Folders)"
        ],
        "description": "Retrieves the instance of a metadata template that has been applied to a\nfolder. This can not be used on the root folder with ID `0`.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "An instance of the metadata template that includes\nadditional \"key:value\" pairs defined by the user or\nan application.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "403": {
            "description": "Returned when the request parameters are not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned if the metadata template specified\nwas not applied to this folder or the user does not have access to the\nfolder.\n\n* `instance_not_found` - The metadata template was not applied to the\nfolder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned when the method was not allowed. This often happens when the\nfolder ID is not valid or the root folder with ID `0`.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_folders_id_metadata_id_id",
        "summary": "Create metadata instance on folder",
        "tags": [
          "Metadata instances (Folders)"
        ],
        "description": "Applies an instance of a metadata template to a folder.\n\nIn most cases only values that are present in the metadata template\nwill be accepted, except for the `global.properties` template which accepts\nany key-value pair.\n\nTo display the metadata template in the Box web app the enterprise needs to be\nconfigured to enable **Cascading Folder Level Metadata** for the user in the\nadmin console.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "description": "A value for each of the fields that are present on the metadata\ntemplate.\n\nFor the `global.properties` template this can be an a list of zero\nor more fields, as this template allows for any generic key-value\npairs to be stored on the template.",
                "x-box-example-key": "name"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the instance of the template that was applied to the folder,\nincluding the data that was applied to the template.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "Returns an error when the request body is not valid.\n\n* `schema_validation_failed` - The request body contains a value for a for\na field that either does not exist, or for which the value or type does\nnot match the expected field type. An example might be an unknown option\nfor an `enum` or `multiSelect` field.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the folder or metadata template could not be found.\n\n* `not_found` - The folder could not be found, or the user does not have\naccess to the folder.\n* `instance_tuple_not_found` - The metadata template could not be found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error when an instance of this metadata template is already\npresent on the folder.\n\n* `tuple_already_exists` - An instance of them metadata template already\nexists on the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_folders_id_metadata_id_id",
        "summary": "Update metadata instance on folder",
        "tags": [
          "Metadata instances (Folders)"
        ],
        "description": "Updates a piece of metadata on a folder.\n\nThe metadata instance can only be updated if the template has already been\napplied to the folder before. When editing metadata, only values that match\nthe metadata template schema will be accepted.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata instance will not be changed.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated metadata template instance, with the\ncustom template data included.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "Returns an error when the request body is not valid.\n\n* `bad_request` - The request body format is not an array of valid JSON\nPatch objects.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "Returns an error in some edge cases when the request body is not a valid\narray of JSON Patch items.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_folders_id_metadata_id_id",
        "summary": "Remove metadata instance from folder",
        "tags": [
          "Metadata instances (Folders)"
        ],
        "description": "Deletes a piece of folder metadata.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the metadata is\nsuccessfully deleted."
          },
          "400": {
            "description": "Returned when the request parameters are not valid. This may happen of the\n`scope` is not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the folder does not have an instance of the metadata\ntemplate applied to it, or when the user does not have access to the\nfolder.\n\n* `instance_not_found` - An instance of the metadata template with the\ngiven `scope` and `templateKey` was not found on this folder.\n* `not_found` - The folder was not found, or the user does not have access\nto the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "405": {
            "description": "Returned when the method was not allowed. This often happens when the\nfolder ID is not valid or the root folder with ID `0`.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/trash/items": {
      "get": {
        "operationId": "get_folders_trash_items",
        "summary": "List trashed items",
        "tags": [
          "Trashed items"
        ],
        "description": "Retrieves the files and folders that have been moved\nto the trash.\n\nAny attribute in the full files or folders objects can be passed\nin with the `fields` parameter to retrieve those specific\nattributes that are not returned by default.\n\nThis endpoint defaults to use offset-based pagination, yet also supports\nmarker-based pagination using the `marker` parameter.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "usemarker",
            "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "sort",
            "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported when using marker-based pagination.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "id",
              "name",
              "date",
              "size"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of items that have been deleted",
            "schema": {
              "$ref": "#/definitions/Items"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `invalid_parameter` can appear when the `sort`, `direction` or `offset`\nparameter is provided when using marker based pagination, or when the\n`marker` parameter is provided but `usemarker` is set to `false` or\n`null`.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/folders/{folder_id}/watermark": {
      "get": {
        "operationId": "get_folders_id_watermark",
        "summary": "Get watermark for folder",
        "tags": [
          "Watermarks (Folders)"
        ],
        "description": "Retrieve the watermark for a folder.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing information about the\nwatermark associated for to this folder.",
            "schema": {
              "$ref": "#/definitions/Watermark"
            }
          },
          "404": {
            "description": "Returns an error if the folder does not have a watermark applied.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_folders_id_watermark",
        "summary": "Apply watermark to folder",
        "tags": [
          "Watermarks (Folders)"
        ],
        "description": "Applies or update a watermark on a folder.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "watermark"
              ],
              "properties": {
                "watermark": {
                  "type": "object",
                  "description": "The watermark to imprint on the folder",
                  "required": [
                    "imprint"
                  ],
                  "properties": {
                    "imprint": {
                      "type": "string",
                      "description": "The type of watermark to apply.\n\nCurrently only supports one option.",
                      "enum": [
                        "default"
                      ]
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an updated watermark if a watermark already\nexisted on this folder.",
            "schema": {
              "$ref": "#/definitions/Watermark"
            }
          },
          "201": {
            "description": "Returns a new watermark if no watermark existed on\nthis folder yet.",
            "schema": {
              "$ref": "#/definitions/Watermark"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_folders_id_watermark",
        "summary": "Remove watermark from folder",
        "tags": [
          "Watermarks (Folders)"
        ],
        "description": "Removes the watermark from a folder.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response will be returned when the watermark\nwas successfully deleted."
          },
          "404": {
            "description": "Returns an error if the folder did not have\na watermark applied to it",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_templates": {
      "get": {
        "operationId": "get_metadata_templates",
        "summary": "Find metadata template by instance ID",
        "tags": [
          "Metadata templates"
        ],
        "description": "Finds a metadata template by searching for the ID of an instance of the\ntemplate.",
        "parameters": [
          {
            "name": "metadata_instance_id",
            "description": "The ID of an instance of the metadata template to find.",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list containing the 1 metadata template that matches the\ninstance ID.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplates"
            }
          },
          "400": {
            "description": "Returned when the request parameters are not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_templates/{scope}/{template_key}/schema": {
      "get": {
        "operationId": "get_metadata_templates_id_id_schema",
        "summary": "Get metadata template by name",
        "tags": [
          "Metadata templates"
        ],
        "description": "Retrieves a metadata template by its `scope` and `templateKey` values.\n\nTo find the `scope` and `templateKey` for a template, list all templates for\nan enterprise or globally, or list all templates applied to a file or folder.",
        "parameters": [
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the metadata template matching the `scope`\nand `template` name.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplate"
            }
          },
          "400": {
            "description": "Returned if any of the request parameters are not valid.\n\n* `bad_request`: Often returned when the scope of the template is not\n  recognised. Please make sure to use either `enterprise` or `global` as\n  the `scope` value.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returned when a template with the given `scope` and `template_key` can not\nbe found.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_metadata_templates_id_id_schema",
        "tags": [
          "Metadata templates"
        ],
        "summary": "Update metadata template",
        "description": "Updates a metadata template.\n\nThe metadata template can only be updated if the template\nalready exists.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata template will not be changed.",
        "parameters": [
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated metadata template, with the\ncustom template data included.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplate"
            }
          },
          "400": {
            "description": "The request body does not contain a valid metadata schema.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "The request body contains a scope that the user is not\nallowed to create templates for.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The requested template could not be found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_metadata_templates_id_id_schema",
        "summary": "Remove metadata template",
        "tags": [
          "Metadata templates"
        ],
        "description": "Delete a metadata template and its instances.\nThis deletion is permanent and can not be reversed.",
        "parameters": [
          {
            "name": "scope",
            "description": "The scope of the metadata template",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "global",
              "enterprise"
            ]
          },
          {
            "name": "template_key",
            "description": "The name of the metadata template",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the metadata\ntemplate is successfully deleted."
          },
          "400": {
            "description": "Request body does not contain a valid metadata schema.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Request body contains a scope that the user is not allowed to\ncreate a template for.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_templates/{template_id}": {
      "get": {
        "operationId": "get_metadata_templates_id",
        "summary": "Get metadata template by ID",
        "tags": [
          "Metadata templates"
        ],
        "description": "Retrieves a metadata template by its ID.",
        "parameters": [
          {
            "name": "template_id",
            "required": true,
            "in": "path",
            "description": "The ID of the template",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the metadata template that matches the ID.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplate"
            }
          },
          "400": {
            "description": "Returned if any of the request parameters are not valid.\n\n* `bad_request`: Often returned with a message when the ID of the template\n  is not recognised.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplate"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_templates/global": {
      "get": {
        "operationId": "get_metadata_templates_global",
        "summary": "List all global metadata templates",
        "tags": [
          "Metadata templates"
        ],
        "description": "Used to retrieve all generic, global metadata templates available to all\nenterprises using Box.",
        "parameters": [
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the metadata templates available to all enterprises\nand their corresponding schema.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplates"
            }
          },
          "400": {
            "description": "Returned when the request parameters are not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_templates/enterprise": {
      "get": {
        "operationId": "get_metadata_templates_enterprise",
        "summary": "List all metadata templates for enterprise",
        "tags": [
          "Metadata templates"
        ],
        "description": "Used to retrieve all metadata templates created to be used specifically within\nthe user's enterprise",
        "parameters": [
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the metadata templates within an enterprise\nand their corresponding schema.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplates"
            }
          },
          "400": {
            "description": "Returned when the request parameters are not valid.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_templates/schema": {
      "post": {
        "operationId": "post_metadata_templates_schema",
        "summary": "Create metadata template",
        "tags": [
          "Metadata templates"
        ],
        "description": "Creates a new metadata template that can be applied to\nfiles and folders.",
        "responses": {
          "201": {
            "description": "The schema representing the metadata template created.",
            "schema": {
              "$ref": "#/definitions/MetadataTemplate"
            }
          },
          "400": {
            "description": "Returned if the request parameters or body is not valid.\n\n* `bad_request` when the body does not contain a valid request. In many\ncases this response will include extra details on what fields are missing.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returned when the user does not have the permission to create the metadata\ntemplate. This can happen for a few reasons, most commonly when the user\ndoes not have (co-)admin permissions, or the application tries to create a\ntemplate with the `global` scope.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "scope",
                "displayName"
              ],
              "properties": {
                "scope": {
                  "type": "string",
                  "description": "The scope of the metadata template to create. Applications can\nonly create templates for use within the authenticated user's\nenterprise.\n\nThis value needs to be set to `enterprise`, as `global` scopes can\nnot be created by applications."
                },
                "templateKey": {
                  "type": "string",
                  "description": "A unique identifier for the template. This identifier needs to be\nunique across the enterprise for which the metadata template is\nbeing created.\n\nWhen not provided, the API will create a unique `templateKey`\nbased on the value of the `displayName`.",
                  "maxLength": 64,
                  "pattern": "^[a-zA-Z_][-a-zA-Z0-9_]*$"
                },
                "displayName": {
                  "type": "string",
                  "description": "The display name of the template.",
                  "maxLength": 4096
                },
                "hidden": {
                  "type": "boolean",
                  "description": "Defines if this template is visible in the Box web app UI, or if\nit is purely intended for usage through the API.",
                  "default": false
                },
                "fields": {
                  "type": "array",
                  "description": "An ordered list of template fields which are part of the template.\nEach field can be a regular text field, date field, number field,\nas well as a single or multi-select list.",
                  "items": {
                    "title": "Metadata Field (Write)",
                    "description": "A field within a metadata template. Fields can be a basic text, date, or\nnumber field, or a list of options.",
                    "required": [
                      "type",
                      "key",
                      "displayName"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of field. The basic fields are a `string` field for text, a\n`float` field for numbers, and a `date` fields to present the user with a\ndate-time picker.\n\nAdditionally, metadata templates support an `enum` field for a basic list\nof items, and ` multiSelect` field for a similar list of items where the\nuser can select more than one value.",
                        "enum": [
                          "string",
                          "float",
                          "date",
                          "enum",
                          "multiSelect"
                        ]
                      },
                      "key": {
                        "type": "string",
                        "description": "A unique identifier for the field. The identifier must\nbe unique within the template to which it belongs.",
                        "maxLength": 256
                      },
                      "displayName": {
                        "type": "string",
                        "description": "The display name of the field as it is shown to the user in the web and\nmobile apps.",
                        "maxLength": 4096
                      },
                      "description": {
                        "type": "string",
                        "description": "A description of the field. This is not shown to the user.",
                        "maxLength": 4096
                      },
                      "hidden": {
                        "type": "boolean",
                        "description": "Whether this field is hidden in the UI for the user and can only be set\nthrough the API instead."
                      },
                      "options": {
                        "description": "A list of options for this field. This is used in combination with the\n`enum` and `multiSelect` field types.",
                        "type": "array",
                        "items": {
                          "title": "Metadata Option (Write)",
                          "type": "object",
                          "description": "An option for a Metadata Template Field.\n\nOptions only need to be provided for fields of type `enum` and `multiSelect`.\nOptions represent the value(s) a user can select for the field either through\nthe UI or through the API.",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The text value of the option. This represents both the display name of the\noption and the internal key used when updating templates.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "copyInstanceOnItemCopy": {
                  "type": "boolean",
                  "description": "Whether or not to copy any metadata attached to a file or folder\nwhen it is copied. By default, metadata is not copied along with a\nfile or folder when it is copied.",
                  "default": false
                }
              }
            }
          }
        ]
      }
    },
    "/metadata_cascade_policies": {
      "get": {
        "operationId": "get_metadata_cascade_policies",
        "summary": "List metadata cascade policies",
        "tags": [
          "Metadata cascade policies (Beta)"
        ],
        "description": "Retrieves a list of all the metadata cascade policies\nthat are applied to a given folder. This can not be used on the root\nfolder with ID `0`.",
        "parameters": [
          {
            "name": "folder_id",
            "in": "query",
            "required": true,
            "description": "Specifies which folder to return policies for. This can not be used on the\nroot folder with ID `0`.",
            "type": "string"
          },
          {
            "name": "owner_enterprise_id",
            "in": "query",
            "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of metadata cascade policies",
            "schema": {
              "$ref": "#/definitions/MetadataCascadePolicies"
            }
          },
          "400": {
            "description": "Returns an error when any of the parameters are not in a valid format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error when the folder can not be accessed. This error often\nhappens when accessing the root folder with ID `0`.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the folder can not be found or the user does not\nhave access to the folder.\n\n* `not_found` - The folder could not be found or the user does not have\n  access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_metadata_cascade_policies",
        "summary": "Create metadata cascade policy",
        "tags": [
          "Metadata cascade policies (Beta)"
        ],
        "description": "Creates a new metadata cascade policy that applies a given\nmetadata template to a given folder and automatically\ncascades it down to any files within that folder.\n\nIn order for the policy to be applied a metadata instance must first\nbe applied to the folder the policy is to be applied to.",
        "responses": {
          "201": {
            "description": "Returns a new of metadata cascade policy",
            "schema": {
              "$ref": "#/definitions/MetadataCascadePolicy"
            }
          },
          "400": {
            "description": "Returns an error when any of the parameters are not in a valid format.\n\n* `bad_request` - Either the `scope`, `templateKey`, or `folder_id` are\nnot in a valid format.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error when trying to apply a policy to a restricted folder, for\nexample the root folder with ID `0`.\n\n* `forbidden` - Although the folder ID was valid and the user has access\nto the folder, the policy could not be applied to this folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the template or folder can not be found, or when the\nuser does not have access to the folder or template.\n\n* `instance_tuple_not_found` - The template could not be found or the user\ndoes not have access to the template.\n* `not_found` - The folder could not be found or the user\ndoes not have access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error when a policy for this folder and template is already in\nplace.\n\n* `tuple_already_exists` - A cascade policy for this combination of\n`folder_id`, `scope` and `templateKey` already exists.",
            "schema": {
              "$ref": "#/definitions/ConflictError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "folder_id",
                "scope",
                "templateKey"
              ],
              "properties": {
                "folder_id": {
                  "type": "string",
                  "description": "The ID of the folder to apply the policy to. This folder will\nneed to already have an instance of the targeted metadata\ntemplate applied to it."
                },
                "scope": {
                  "description": "The scope of the targeted metadata template. This template will\nneed to already have an instance applied to the targeted folder.",
                  "type": "string",
                  "enum": [
                    "global",
                    "enterprise"
                  ]
                },
                "templateKey": {
                  "type": "string",
                  "description": "The key of the targeted metadata template. This template will\nneed to already have an instance applied to the targeted folder."
                }
              }
            }
          }
        ]
      }
    },
    "/metadata_cascade_policies/{metadata_cascade_policy_id}": {
      "get": {
        "operationId": "get_metadata_cascade_policies_id",
        "summary": "Get metadata cascade policy",
        "tags": [
          "Metadata cascade policies (Beta)"
        ],
        "description": "Retrieve a specific metadata cascade policy assigned to a folder.",
        "parameters": [
          {
            "name": "metadata_cascade_policy_id",
            "description": "The ID of the metadata cascade policy.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a metadata cascade policy",
            "schema": {
              "$ref": "#/definitions/MetadataCascadePolicy"
            }
          },
          "404": {
            "description": "Returns an error when the policy can not be found or the user does not\nhave access to the folder.\n\n* `instance_not_found` - The policy could not be found\n* `not_found` - The folder could not be found or the user does not have\n  access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_metadata_cascade_policies_id",
        "summary": "Remove metadata cascade policy",
        "tags": [
          "Metadata cascade policies (Beta)"
        ],
        "description": "Deletes a metadata cascade policy.",
        "parameters": [
          {
            "name": "metadata_cascade_policy_id",
            "description": "The ID of the metadata cascade policy.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the policy\nis successfully deleted."
          },
          "404": {
            "description": "Returns an error when the policy can not be found or the user does not\nhave access to the folder.\n\n* `instance_not_found` - The policy could not be found\n* `not_found` - The folder could not be found or the user does not have\n  access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/metadata_cascade_policies/{metadata_cascade_policy_id}/apply": {
      "post": {
        "operationId": "post_metadata_cascade_policies_id_apply",
        "summary": "Force-apply metadata cascade policy to folder",
        "tags": [
          "Metadata cascade policies (Beta)"
        ],
        "description": "Force the metadata on a folder with a metadata cascade policy to be applied to\nall of its children. This can be used after creating a new cascade policy to\nenforce the metadata to be cascaded down to all existing files within that\nfolder.",
        "parameters": [
          {
            "name": "metadata_cascade_policy_id",
            "required": true,
            "in": "path",
            "description": "The ID of the cascade policy to force-apply.",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "conflict_resolution"
              ],
              "properties": {
                "conflict_resolution": {
                  "type": "string",
                  "enum": [
                    "none",
                    "overwrite"
                  ],
                  "description": "Describes the desired behavior when dealing with the conflict\nwhere a metadata template already has an instance applied\nto a child.\n\n* `none` will preserve the existing value on the file\n* `overwrite` will force-apply the templates values over\n  any existing values."
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returns an empty response when the API call was successful. The metadata\ncascade operation will be performed asynchronously.\n\nThe API call will return directly, before the cascade operation\nis complete. There is currently no API to check for the status of this\noperation."
          },
          "404": {
            "description": "Returns an error when the policy can not be found or the user does not\nhave access to the folder.\n\n* `instance_not_found` - The policy could not be found\n* `not_found` - The folder could not be found or the user does not have\n  access to the folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/comments/{comment_id}": {
      "get": {
        "operationId": "get_comments_id",
        "summary": "Get comment",
        "tags": [
          "Comments"
        ],
        "description": "Retrieves the message and metadata for a specific comment, as well\nas information on the user who created the comment.",
        "parameters": [
          {
            "name": "comment_id",
            "description": "The ID of the comment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full comment object.",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_comments_id",
        "summary": "Update comment",
        "tags": [
          "Comments"
        ],
        "description": "Update the message of a comment.",
        "parameters": [
          {
            "name": "comment_id",
            "description": "The ID of the comment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The text of the comment to update"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated comment object.",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_comments_id",
        "summary": "Remove comment",
        "tags": [
          "Comments"
        ],
        "description": "Permanently deletes a comment.",
        "parameters": [
          {
            "name": "comment_id",
            "description": "The ID of the comment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the comment has been deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/comments": {
      "post": {
        "operationId": "post_comments",
        "tags": [
          "Comments"
        ],
        "summary": "Create comment",
        "description": "Adds a comment comment by the user to a specific file, or\nas a reply to an other comment.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The text of the comment.\n\nTo mention a user, use the `tagged_message`\nparameter instead."
                },
                "tagged_message": {
                  "type": "string",
                  "description": "The text of the comment, including `@[user_id:name]`\nsomewhere in the message to mention another user, which\nwill send them an email notification, letting them know\nthey have been mentioned.\n\nThe `user_id` is the target user's ID, where the `name`\ncan be any custom phrase. In the Box UI this name will\nlink to the user's profile.\n\nIf you are not mentioning another user, use `message`\ninstead."
                },
                "item": {
                  "type": "object",
                  "description": "The item to attach the comment to.",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the item"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the item that this comment will be placed on.",
                      "enum": [
                        "file",
                        "comment"
                      ]
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created comment object.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields.",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/collaborations/{collaboration_id}": {
      "get": {
        "operationId": "get_collaborations_id",
        "summary": "Get collaboration",
        "tags": [
          "Collaborations"
        ],
        "description": "Retrieves a single collaboration.",
        "parameters": [
          {
            "name": "collaboration_id",
            "description": "The ID of the collaboration",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collaboration object.",
            "schema": {
              "$ref": "#/definitions/Collaboration"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_collaborations_id",
        "tags": [
          "Collaborations"
        ],
        "summary": "Update collaboration",
        "description": "Updates a collaboration.\n\nCan be used to change the owner of an item, or to\naccept collaboration invites.",
        "parameters": [
          {
            "name": "collaboration_id",
            "description": "The ID of the collaboration",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The level of access granted.",
                  "enum": [
                    "editor",
                    "viewer",
                    "previewer",
                    "uploader",
                    "previewer uploader",
                    "viewer uploader",
                    "co-owner",
                    "owner"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "<!-- alex disable reject -->\n\nSet the status of a `pending` collaboration invitation,\neffectively accepting, or rejecting the invite.",
                  "enum": [
                    "pending",
                    "accepted",
                    "rejected"
                  ]
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Set the expiration date for the collaboration. At this date, the\ncollaboration will be automatically removed from the item."
                },
                "can_view_path": {
                  "type": "boolean",
                  "description": "Determines if the invited users can see the entire parent path to\nthe associated folder. The user will not gain privileges in any\nparent folder and therefore can not see content the user is not\ncollaborated on.\n\nBe aware that this meaningfully increases the time required to load the\ninvitee's **All Files** page. We recommend you limit the number of\ncollaborations with `can_view_path` enabled to 1,000 per user."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an updated collaboration object unless the owner has changed.",
            "schema": {
              "$ref": "#/definitions/Collaboration"
            }
          },
          "204": {
            "description": "If the role is changed to `owner`, the collaboration is deleted\nand a new collaboration is created. The previous `owner` of\nthe old collaboration will be a `co-owner` on the new collaboration.",
            "schema": {
              "$ref": "#/definitions/Collaboration"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_collaborations_id",
        "summary": "Remove collaboration",
        "tags": [
          "Collaborations"
        ],
        "description": "Deletes a single collaboration.",
        "parameters": [
          {
            "name": "collaboration_id",
            "description": "The ID of the collaboration",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the collaboration was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/collaborations": {
      "get": {
        "operationId": "get_collaborations",
        "summary": "List pending collaborations",
        "tags": [
          "Collaborations (List)"
        ],
        "description": "Retrieves all pending collaboration invites for this user.",
        "parameters": [
          {
            "name": "status",
            "description": "The status of the collaborations to retrieve",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "pending"
            ]
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of pending collaboration objects.\n\nIf the user has no pending collaborations, the collection\nwill be empty.",
            "schema": {
              "$ref": "#/definitions/Collaborations"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_collaborations",
        "tags": [
          "Collaborations"
        ],
        "summary": "Create collaboration",
        "description": "Adds a collaboration for a single user or a single group to a file\nor folder.\n\nCollaborations can be created using email address, user IDs, or a\ngroup IDs.\n\nIf a collaboration is being created with a group, access to\nthis endpoint is dependent on the group's ability to be invited.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "notify",
            "description": "Determines if users should receive email notification\nfor the action performed.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "item",
                "accessible_by",
                "role"
              ],
              "properties": {
                "item": {
                  "type": "object",
                  "description": "The item to attach the comment to.",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the item that this collaboration will be\ngranted access to",
                      "enum": [
                        "file",
                        "folder"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the item that will be granted access to"
                    }
                  }
                },
                "accessible_by": {
                  "type": "object",
                  "description": "The user or group to give access to the item.",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of collaborator to invite.",
                      "enum": [
                        "user",
                        "group"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the user or group.\n\nAlternatively, use `login` to specify a user by email\naddress."
                    },
                    "login": {
                      "type": "string",
                      "description": "The email address of the user to grant access to the item.\n\nAlternatively, use `id` to specify a user by user ID."
                    }
                  }
                },
                "role": {
                  "type": "string",
                  "description": "The level of access granted.",
                  "enum": [
                    "editor",
                    "viewer",
                    "previewer",
                    "uploader",
                    "previewer uploader",
                    "viewer uploader",
                    "co-owner"
                  ]
                },
                "can_view_path": {
                  "type": "boolean",
                  "description": "Determines if the invited users can see the entire parent path to\nthe associated folder. The user will not gain privileges in any\nparent folder and therefore can not see content the user is not\ncollaborated on.\n\nBe aware that this meaningfully increases the time required to load the\ninvitee's **All Files** page. We recommend you limit the number of\ncollaborations with `can_view_path` enabled to 1,000 per user."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new collaboration object.",
            "schema": {
              "$ref": "#/definitions/Collaboration"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "operationId": "get_search",
        "summary": "Search for content",
        "tags": [
          "Search"
        ],
        "description": "Searches for items that are available to the user or an entire enterprise.",
        "parameters": [
          {
            "name": "query",
            "description": "The string to search for. This query is matched against item names,\ndescriptions, text content of files, and various other fields of\nthe different item types.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "Limits search results to a user scope.\n\nDefaults to `user_content` which limits the search to content\navailable to the current user\n\nSetting this to `enterprise_content` widens the search to content\navailable to the entire enterprise. To enable this scope for an\nadministrator, please reach out to support.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "user_content",
              "enterprise_content"
            ]
          },
          {
            "name": "file_extensions",
            "description": "Limits search results to a comma-separated list of\nfile extensions.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "created_at_range",
            "description": "Limits search results to items created within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_at_range",
            "description": "Limits search results to items updated within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size_range",
            "description": "Limits search results to items within a given file size\nrange.\n\nFile size ranges are defined as comma separated byte sizes.\n\nThe upper and lower bound can be omitted to create open ranges.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner_user_ids",
            "description": "Limits search results to items owned\nby the given list of owners.\n\nOwners are defined as a comma separated list of user IDs.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ancestor_folder_ids",
            "description": "Limits search results to items within the given\nlist of folders.\n\nFolders are defined as a comma separated lists\nof folder IDs.\n\nSearch results will also include items within subfolders.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "content_types",
            "description": "Limits search results to items with the given\ncontent types.\n\nContent types are defined as a comma separated lists\nof Box recognized content types.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "Limits search results to items of this type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "file",
              "folder",
              "web_link"
            ]
          },
          {
            "name": "trash_content",
            "description": "Controls if search results include the trash.\n\nDefaults to `non_trashed_only`",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "non_trashed_only",
              "trashed_only"
            ]
          },
          {
            "name": "mdfilters",
            "description": "Limits search results to items that match the\nmetadata template name and content.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Defines the order in which results are returned. Defaults to `relevance`.\n\n* `relevance` (default) returns the results sorted by relevance to the\nquery search term.\n* `modified_at`  returns the results ordered in descending order by date\nat which the item was last modified.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "relevance",
            "enum": [
              "modified_at",
              "relevance"
            ]
          },
          {
            "name": "direction",
            "description": "Defines the direction in which search results are ordered. Default value\nis `DESC`.\n\nWhen results are sorted by `relevance` the ordering is forced to `DESC`,\nignoring the value of this parameter.",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "DESC",
            "enum": [
              "DESC",
              "ASC"
            ]
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 200
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of search results. If there are no matching\nsearch results, the `entries` array will be empty.",
            "schema": {
              "$ref": "#/definitions/Items"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "operationId": "post_tasks",
        "tags": [
          "Tasks"
        ],
        "summary": "Create task",
        "description": "Creates a single task on a file. This task is not assigned to any user and\nwill need to be assigned separately.",
        "responses": {
          "201": {
            "description": "Returns the newly created task.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "Returned if the request parameters or body is not valid.\n\n* `bad_request` when the body does not contain a valid request. This may\nbe because the `action` or `completion_rule` are not one of the allowed\nvalues.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error when the user does not have the permission to create a\ntask on the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the file could not be found or the user does not\nhave access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "item"
              ],
              "properties": {
                "item": {
                  "type": "object",
                  "description": "The file to attach the task to.",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the file"
                    },
                    "type": {
                      "type": "string",
                      "description": "`file`",
                      "enum": [
                        "file"
                      ]
                    }
                  }
                },
                "action": {
                  "type": "string",
                  "description": "The action the task assignee will be prompted to do. Must be\n\n* `review` defines an approval task that can be approved or\nrejected\n* `complete` defines a general task which can be completed",
                  "default": "review",
                  "enum": [
                    "review",
                    "complete"
                  ]
                },
                "message": {
                  "type": "string",
                  "default": "",
                  "description": "An optional message to include with the task."
                },
                "due_at": {
                  "type": "string",
                  "format": "date-time",
                  "default": null,
                  "description": "Defines when the task is due. Defaults to `null` if not\nprovided."
                },
                "completion_rule": {
                  "type": "string",
                  "description": "Defines which assignees need to complete this task before the task\nis considered completed.\n\n* `all_assignees` (default) requires all assignees to review or\napprove the the task in order for it to be considered completed.\n* `any_assignee` accepts any one assignee to review or\napprove the the task in order for it to be considered completed.",
                  "default": "all_assignees",
                  "enum": [
                    "all_assignees",
                    "any_assignee"
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "/tasks/{task_id}": {
      "get": {
        "operationId": "get_tasks_id",
        "summary": "Get task",
        "tags": [
          "Tasks"
        ],
        "description": "Retrieves information about a specific task.",
        "parameters": [
          {
            "name": "task_id",
            "description": "The ID of the task.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a task object.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "404": {
            "description": "Returns an error when the task could not be found or the user does not\nhave access to the file the task is assigned to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_tasks_id",
        "tags": [
          "Tasks"
        ],
        "summary": "Update task",
        "description": "Updates a task. This can be used to update a task's configuration, or to\nupdate its completion state.",
        "parameters": [
          {
            "name": "task_id",
            "description": "The ID of the task.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "action": {
                  "type": "string",
                  "description": "The action the task assignee will be prompted to do. Must be\n\n* `review` defines an approval task that can be approved or\nrejected\n* `complete` defines a general task which can be completed",
                  "enum": [
                    "review",
                    "complete"
                  ]
                },
                "message": {
                  "type": "string",
                  "description": "The message included with the task."
                },
                "due_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "When the task is due at."
                },
                "completion_rule": {
                  "type": "string",
                  "description": "Defines which assignees need to complete this task before the task\nis considered completed.\n\n* `all_assignees` (default) requires all assignees to review or\napprove the the task in order for it to be considered completed.\n* `any_assignee` accepts any one assignee to review or\napprove the the task in order for it to be considered completed.",
                  "enum": [
                    "all_assignees",
                    "any_assignee"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated task object",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "Returned if the request parameters or body is not valid.\n\n* `bad_request` when the body does not contain a valid request. This may\nbe because the `action` or `completion_rule` are not one of the allowed\nvalues.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error when the user does not have the permission to update a\ntask on the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the file could not be found or the user does not\nhave access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_tasks_id",
        "tags": [
          "Tasks"
        ],
        "summary": "Remove task",
        "description": "Removes a task from a file.",
        "parameters": [
          {
            "name": "task_id",
            "description": "The ID of the task.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the task was successfully deleted."
          },
          "404": {
            "description": "Returns an error when the task could not be found or the user does not\nhave access to the file the task is assigned to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/tasks/{task_id}/assignments": {
      "get": {
        "operationId": "get_tasks_id_assignments",
        "summary": "List task assignments",
        "tags": [
          "Tasks"
        ],
        "description": "Lists all of the assignments for a given task.",
        "parameters": [
          {
            "name": "task_id",
            "description": "The ID of the task.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of task assignment defining what task on\na file has been assigned to which users and by who.",
            "schema": {
              "$ref": "#/definitions/TaskAssignments"
            }
          },
          "404": {
            "description": "Returns an error when the task could not be found or the user does not\nhave access to the file the task is assigned to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "Returns an error if the task assignment ID was omitted in\nthe request.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/task_assignments": {
      "post": {
        "operationId": "post_task_assignments",
        "summary": "Assign task",
        "tags": [
          "Tasks"
        ],
        "description": "Assigns a task to a user.\n\nA task can be assigned to more than one user by creating multiple\nassignments.",
        "responses": {
          "201": {
            "description": "Returns a new task assignment object.",
            "schema": {
              "$ref": "#/definitions/TaskAssignment"
            }
          },
          "403": {
            "description": "Returns an error if a change to a completed task is attempted",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the task could not be found or the user does not\nhave access to the file the task is assigned to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "Returns an error if any of the IDs for this request were not valid, or if\nthe targeted user does not have access to the file.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "task",
                "assign_to"
              ],
              "properties": {
                "task": {
                  "type": "object",
                  "description": "The task to assign to a user.",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the task"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the item to assign.",
                      "enum": [
                        "task"
                      ]
                    }
                  }
                },
                "assign_to": {
                  "type": "object",
                  "description": "The user to assign the task to.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the user to assign to the\ntask.\n\nTo specify a user by their email\naddress use the `login` parameter."
                    },
                    "login": {
                      "type": "string",
                      "description": "The email address of the user to assign to the task.\nTo specify a user by their user ID please use the `id` parameter."
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/task_assignments/{task_assignment_id}": {
      "get": {
        "operationId": "get_task_assignments_id",
        "summary": "Get task assignment",
        "tags": [
          "Tasks"
        ],
        "description": "Retrieves information about a task assignment.",
        "parameters": [
          {
            "name": "task_assignment_id",
            "description": "The ID of the task assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a task assignment, specifying who the task has been assigned to\nand by whom.",
            "schema": {
              "$ref": "#/definitions/TaskAssignment"
            }
          },
          "404": {
            "description": "Returns an error when the task assignment could not be found or the user\ndoes not have access to the file the task is assigned to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_task_assignments_id",
        "summary": "Update task assignment",
        "tags": [
          "Tasks"
        ],
        "description": "Updates a task assignment. This endpoint can be\nused to update the state of a task assigned to a user.",
        "parameters": [
          {
            "name": "task_assignment_id",
            "description": "The ID of the task assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "description": "An optional message by the assignee that can be added to the task."
                },
                "resolution_state": {
                  "type": "string",
                  "description": "The state of the task assigned to the user.\n\n* For a task with an `action` value of `complete` this can be\n`incomplete` or `completed`.\n* For a task with an `action` of `review` this can be\n`incomplete`, `approved`, or `rejected`.",
                  "enum": [
                    "completed",
                    "incomplete",
                    "approved",
                    "rejected"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated task assignment object.",
            "schema": {
              "$ref": "#/definitions/TaskAssignment"
            }
          },
          "400": {
            "description": "Returns an error if a resolution state is incompatible with the action\ntype of the task.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error when the task assignment could not be found or the user\ndoes not have access to the file the task is assigned to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_task_assignments_id",
        "summary": "Unassign task",
        "tags": [
          "Tasks"
        ],
        "description": "Deletes a specific task assignment.",
        "parameters": [
          {
            "name": "task_assignment_id",
            "description": "The ID of the task assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the task\nassignment was successfully deleted."
          },
          "404": {
            "description": "Returns an error if the task assignment for the given ID does not exist\nor is inaccessible to your account.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/shared_items": {
      "get": {
        "operationId": "get_shared_items",
        "summary": "Find item for shared link",
        "tags": [
          "Shared links"
        ],
        "description": "Return the file or folder represented by a shared link.\n\nShared items are any files or folders that are represented by a shared link,\nwhich can originate within the current enterprise or within another one.\n\nThis endpoint allows an application to retrieve information about a\nshared item when only given a shared link.",
        "parameters": [
          {
            "name": "If-None-Match",
            "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "BoxApi",
            "description": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full file or folder object if the shared link is valid and\nthe user has access to it.",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "304": {
            "description": "Returns an empty response when the `If-None-Match` header matches\nthe current `etag` value of the folder. This indicates that the folder\nhas not changed since it was last requested."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/web_links": {
      "post": {
        "operationId": "post_web_links",
        "summary": "Create web link",
        "tags": [
          "Web links"
        ],
        "description": "Creates a web link object within a folder.",
        "responses": {
          "200": {
            "description": "Returns the newly created web link object.",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "parent",
                "url"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The URL that this web link links to. Must start with\n`\"http://\"` or `\"https://\"`."
                },
                "parent": {
                  "type": "object",
                  "description": "The parent folder to create the web link within.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of parent folder"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Name of the web link. Defaults to the URL if not set."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the web link."
                }
              }
            }
          }
        ]
      }
    },
    "/web_links/{web_link_id}": {
      "get": {
        "operationId": "get_web_links_id",
        "summary": "Get web link",
        "tags": [
          "Web links"
        ],
        "description": "Retrieve information about a web link.",
        "parameters": [
          {
            "name": "web_link_id",
            "description": "The ID of the web link.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the web link object.",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_web_links_id",
        "summary": "Restore web link",
        "tags": [
          "Trashed items"
        ],
        "description": "Restores a web link that has been moved to the trash.\n\nAn optional new parent ID can be provided to restore the  web link to in case\nthe original folder has been deleted.",
        "parameters": [
          {
            "name": "web_link_id",
            "description": "The ID of the web link.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "description": "An optional new name for the web link.",
                  "type": "string"
                },
                "parent": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The parent for this item",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of parent item"
                        }
                      }
                    },
                    {
                      "description": "Specifies an optional ID of a folder to restore the web link\nto when the original folder no longer exists.\n\nPlease be aware that this ID will only be used if the original\nfolder no longer exists. Use this ID to provide a fallback\nlocation to restore the web link to if the original location\nhas been deleted."
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a web link object when it has been restored.",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          },
          "403": {
            "description": "Returns an error if the user does not have access to the folder\nthe web link is being restored to, or the user does not have permission\nto restore web link from the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the web link is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if there is an web link with the same name\nin the folder the web link is being restored to.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_web_links_id",
        "summary": "Update web link",
        "tags": [
          "Web links"
        ],
        "description": "Updates a web link object.",
        "parameters": [
          {
            "name": "web_link_id",
            "description": "The ID of the web link.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The new URL that the web link links to. Must start with\n`\"http://\"` or `\"https://\"`."
                },
                "parent": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The parent for this item",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of parent item"
                        }
                      }
                    },
                    {
                      "description": "The new parent folder to put the web link in.\nUse this to move the web link to a different folder."
                    }
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "A new name for the web link. Defaults to the URL if not set."
                },
                "description": {
                  "type": "string",
                  "description": "A new description of the web link."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated web link object.",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_web_links_id",
        "summary": "Remove web link",
        "tags": [
          "Web links"
        ],
        "description": "Deletes a web link.",
        "parameters": [
          {
            "name": "web_link_id",
            "description": "The ID of the web link.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response will be returned when the web link\nwas successfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/web_links/{web_link_id}/trash": {
      "get": {
        "operationId": "get_web_links_id_trash",
        "summary": "Get trashed web link",
        "tags": [
          "Trashed items"
        ],
        "description": "Retrieves a web link that has been moved to the trash.",
        "parameters": [
          {
            "name": "web_link_id",
            "description": "The ID of the web link.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the web link that was trashed,\nincluding information about when the it\nwas moved to the trash.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "404": {
            "description": "Returns an error if the web link is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_web_links_id_trash",
        "summary": "Permanently remove web link",
        "tags": [
          "Trashed items"
        ],
        "description": "Permanently deletes a web link that is in the trash.\nThis action cannot be undone.",
        "parameters": [
          {
            "name": "web_link_id",
            "description": "The ID of the web link.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the web link was\npermanently deleted."
          },
          "404": {
            "description": "Returns an error if the web link is not in the trash.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "get_users",
        "summary": "List enterprise users",
        "tags": [
          "Users"
        ],
        "description": "Returns a list of all users for the Enterprise along with their `user_id`,\n`public_name`, and `login`.\n\nThe application and the authenticated user need to\nhave the permission to look up users in the entire\nenterprise.",
        "parameters": [
          {
            "name": "filter_term",
            "description": "Limits the results to only users who's `name` or\n`login` start with the search term.\n\nFor externally managed users, the search term needs\nto completely match the in order to find the user, and\nit will only return one user at a time.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_type",
            "description": "Limits the results to the kind  of user specified.\n\n* `all` returns every kind of user for whom the\n  `login` or `name` partially matches the\n  `filter_term`. It will only return an external user\n  if the login matches the `filter_term` completely,\n  and in that case it will only return that user.\n* `managed` returns all managed and app users for whom\n  the `login` or `name` partially matches the\n  `filter_term`.\n* `external` returns all external users for whom the\n  `login` matches the `filter_term` exactly.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "all",
              "managed",
              "external"
            ]
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "usemarker",
            "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the users in the enterprise.",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_users",
        "summary": "Create user",
        "tags": [
          "Users"
        ],
        "description": "Creates a new managed user in an enterprise. This endpoint\nis only available to users and applications with the right\nadmin permissions.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the user",
                  "maxLength": 50
                },
                "login": {
                  "type": "string",
                  "description": "The email address the user uses to log in\n\nRequired, unless `is_platform_access_only`\nis set to `true`."
                },
                "is_platform_access_only": {
                  "type": "boolean",
                  "description": "Specifies that the user is an app user."
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "coadmin",
                    "user"
                  ],
                  "description": "The user’s enterprise role"
                },
                "language": {
                  "type": "string",
                  "format": "ISO639-1-BOX",
                  "description": "The language of the user, formatted in modified version of the\n[ISO 639-1][1] format.\n\n[1]: https://developer.box.com/docs/api-language-codes"
                },
                "is_sync_enabled": {
                  "type": "boolean",
                  "description": "Whether the user can use Box Sync"
                },
                "job_title": {
                  "type": "string",
                  "description": "The user’s job title",
                  "maxLength": 100
                },
                "phone": {
                  "type": "string",
                  "description": "The user’s phone number",
                  "maxLength": 100
                },
                "address": {
                  "type": "string",
                  "description": "The user’s address",
                  "maxLength": 255
                },
                "space_amount": {
                  "type": "integer",
                  "description": "The user’s total available space in bytes. Set this to `-1` to\nindicate unlimited storage."
                },
                "tracking_codes": {
                  "type": "array",
                  "description": "Tracking codes allow an admin to generate reports from the\nadmin console and assign an attribute to a specific group\nof users. This setting must be enabled for an enterprise before it\ncan be used.",
                  "items": {
                    "type": "string"
                  }
                },
                "can_see_managed_users": {
                  "type": "boolean",
                  "description": "Whether the user can see other enterprise users in their\ncontact list"
                },
                "timezone": {
                  "type": "string",
                  "format": "timezone",
                  "description": "The user's timezone"
                },
                "is_external_collab_restricted": {
                  "type": "boolean",
                  "description": "Whether the user is allowed to collaborate with users outside\ntheir enterprise"
                },
                "is_exempt_from_device_limits": {
                  "type": "boolean",
                  "description": "Whether to exempt the user from enterprise device limits"
                },
                "is_exempt_from_login_verification": {
                  "type": "boolean",
                  "description": "Whether the user must use two-factor authentication"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "active",
                    "inactive",
                    "cannot_delete_edit",
                    "cannot_delete_edit_upload"
                  ],
                  "description": "The user's account status"
                },
                "external_app_user_id": {
                  "type": "string",
                  "description": "An external identifier for an app user, which can be used to look\nup the user. This can be used to tie user IDs from external\nidentity providers to Box users."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a user object for the newly created user.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "operationId": "get_users_me",
        "summary": "Get current user",
        "tags": [
          "Users"
        ],
        "description": "Retrieves information about the user who is currently authenticated.\n\nIn the case of a client-side authenticated OAuth 2.0 application\nthis will be the user who authorized the app.\n\nIn the case of a JWT, server-side authenticated application\nthis will be the service account that belongs to the application\nby default.\n\nUse the `As-User` header to change who this API call is made on behalf of.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single user object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "operationId": "get_users_id",
        "summary": "Get user",
        "tags": [
          "Users"
        ],
        "description": "Retrieves information about a user in the enterprise.\n\nThe application and the authenticated user need to\nhave the permission to look up users in the entire\nenterprise.\n\nThis endpoint also returns a limited set of information\nfor external users who are collaborated on content\nowned by the enterprise for authenticated users with the\nright scopes. In this case, disallowed fields will return\nnull instead.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single user object.\n\nNot all available fields are returned by default. Use the\n[fields](#param-fields) query parameter to explicitly request\nany specific fields using the [fields](#get-users-id--request--fields)\nparameter.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_users_id",
        "summary": "Update user",
        "tags": [
          "Users"
        ],
        "description": "Updates a managed user in an enterprise. This endpoint\nis only available to users and applications with the right\nadmin permissions.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "enterprise": {
                  "type": "string",
                  "description": "Set this to `null` to roll the user out of the enterprise\nand make them a free user"
                },
                "notify": {
                  "type": "boolean",
                  "description": "Whether the user should receive an email when they\nare rolled out of an enterprise"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the user",
                  "maxLength": 50
                },
                "login": {
                  "type": "string",
                  "description": "The email address the user uses to log in"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "coadmin",
                    "user"
                  ],
                  "description": "The user’s enterprise role"
                },
                "language": {
                  "type": "string",
                  "format": "ISO639-1-BOX",
                  "description": "The language of the user, formatted in modified version of the\n[ISO 639-1][1] format.\n\n[1]: https://developer.box.com/docs/api-language-codes"
                },
                "is_sync_enabled": {
                  "type": "boolean",
                  "description": "Whether the user can use Box Sync"
                },
                "job_title": {
                  "type": "string",
                  "description": "The user’s job title",
                  "maxLength": 100
                },
                "phone": {
                  "type": "string",
                  "description": "The user’s phone number",
                  "maxLength": 100
                },
                "address": {
                  "type": "string",
                  "description": "The user’s address",
                  "maxLength": 255
                },
                "tracking_codes": {
                  "type": "array",
                  "description": "Tracking codes allow an admin to generate reports from the\nadmin console and assign an attribute to a specific group\nof users. This setting must be enabled for an enterprise before it\ncan be used.",
                  "items": {
                    "type": "string"
                  }
                },
                "can_see_managed_users": {
                  "type": "boolean",
                  "description": "Whether the user can see other enterprise users in their\ncontact list"
                },
                "timezone": {
                  "type": "string",
                  "format": "timezone",
                  "description": "The user's timezone"
                },
                "is_external_collab_restricted": {
                  "type": "boolean",
                  "description": "Whether the user is allowed to collaborate with users outside\ntheir enterprise"
                },
                "is_exempt_from_device_limits": {
                  "type": "boolean",
                  "description": "Whether to exempt the user from enterprise device limits"
                },
                "is_exempt_from_login_verification": {
                  "type": "boolean",
                  "description": "Whether the user must use two-factor authentication"
                },
                "is_password_reset_required": {
                  "type": "boolean",
                  "description": "Whether the user is required to reset their password"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "active",
                    "inactive",
                    "cannot_delete_edit",
                    "cannot_delete_edit_upload"
                  ],
                  "description": "The user's account status"
                },
                "space_amount": {
                  "type": "integer",
                  "description": "The user’s total available space in bytes. Set this to `-1` to\nindicate unlimited storage."
                },
                "notification_email": {
                  "type": "object",
                  "description": "An alternate notification email address to which email\nnotifications are sent. When it's confirmed, this will be\nthe email address to which notifications are sent instead of\nto the primary email address.\n\nSet this value to `null` to remove the notification email.",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "The email address to send the notifications to."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated user object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `invalid_parameter` when a parameter is formatted incorrectly,\n  for example when the `notification_email` has an incorrectly formatted\n  email address.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error if the user is not allowed to make the changes.\n\n* `access_denied_insufficient_permissions` when the user does not have\n  the right permissions, for example when updating the notification email\n  is turned off for the enterprise.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_users_id",
        "summary": "Delete user",
        "tags": [
          "Users"
        ],
        "description": "Deletes a user. By default this will fail if the user\nstill owns any content. Move their owned content first\nbefore proceeding, or use the `force` field to delete\nthe user and their files.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notify",
            "in": "query",
            "description": "Whether the user will receive email notification of\nthe deletion",
            "type": "boolean"
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether the user should be deleted even if this user\nstill own files",
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Removes the user and returns an empty response."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/{user_id}/avatar": {
      "get": {
        "operationId": "get_users_id_avatar",
        "summary": "Get user avatar",
        "tags": [
          "User avatars"
        ],
        "description": "Retrieves an image of a the user's avatar.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "When an avatar can be found for the user the\nimage data will be returned in the body of the\nresponse.",
            "schema": {
              "type": "string",
              "format": "binary",
              "description": "The avatar"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/{user_id}/folders/0": {
      "put": {
        "operationId": "put_users_id_folders_0",
        "summary": "Transfer owned folders",
        "tags": [
          "Users"
        ],
        "description": "Move all of the items owned by a user into a\nnew folder in another user’s account.\n\nOnly the root folder (`0`) can be transferred.\n\nFolders can only be moved across users by users with administrative\npermissions.\n\nThis call will be performed synchronously which might lead to a slow response\nwhen the source user has a large number of items in all of its folders.\n\nIf the destination path has a metadata cascade policy attached to any of\nthe parent folders, a metadata cascade operation will be kicked off\nasynchronously.\n\nThere is currently no way to check for when this operation is finished.\n\nThe destination folder's name will be in the format `{User}'s Files and\nFolders`, where `{User}` is the display name of the user.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "notify",
            "description": "Determines if users should receive email notification\nfor the action performed.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "enterprise"
              ],
              "properties": {
                "enterprise": {
                  "type": "object",
                  "description": "The user who the folder will be transferred to",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the user who the folder will be\ntransferred to"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the information for the newly created\ndestination folder.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/{user_id}/email_aliases": {
      "get": {
        "operationId": "get_users_id_email_aliases",
        "summary": "List user's email aliases",
        "tags": [
          "Users"
        ],
        "description": "Retrieves all email aliases for a user. The collection\ndoes not include the primary login for the user.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of email aliases.",
            "schema": {
              "$ref": "#/definitions/EmailAliases"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_users_id_email_aliases",
        "summary": "Create email alias",
        "tags": [
          "Users"
        ],
        "description": "Adds a new email alias to a user account..",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address to add to the account as an alias."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created email alias object.",
            "schema": {
              "$ref": "#/definitions/EmailAlias"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/{user_id}/email_aliases/{email_alias_id}": {
      "delete": {
        "operationId": "delete_users_id_email_aliases_id",
        "summary": "Remove email alias",
        "tags": [
          "Users"
        ],
        "description": "Removes an email alias from a user.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email_alias_id",
            "description": "The ID of the email alias.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Removes the alias and returns an empty response."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/users/{user_id}/memberships": {
      "get": {
        "operationId": "get_users_id_memberships",
        "summary": "List user's groups",
        "tags": [
          "Groups"
        ],
        "description": "Retrieves all the groups for a user. The user making\nan API call must have admin permissions to inspect the\nenterprise's groups.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of membership objects. If there are no\nmemberships, an empty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/GroupMemberships"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/invites": {
      "post": {
        "operationId": "post_invites",
        "summary": "Create user invite",
        "tags": [
          "Users"
        ],
        "description": "Invites an existing external user to join an enterprise.\n\nThe existing user can not be part of another enterprise and\nmust already have a Box account. Once invited, the user will receive an\nemail and are prompted to accept the invitation within the\nBox web application.\n\nThis method requires the \"Manage An Enterprise\" scope enabled for\nthe application, which can be enabled within the developer console.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "enterprise",
                "actionable_by"
              ],
              "properties": {
                "enterprise": {
                  "type": "object",
                  "description": "The enterprise to invite the user to",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the enterprise"
                    }
                  }
                },
                "actionable_by": {
                  "type": "object",
                  "description": "The user to invite",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "login": {
                      "type": "string",
                      "description": "The login of the invited user"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a new invite object.",
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/invites/{invite_id}": {
      "get": {
        "operationId": "get_invites_id",
        "summary": "Get user invite status",
        "tags": [
          "Users"
        ],
        "description": "Returns the status of a user invite.",
        "parameters": [
          {
            "name": "invite_id",
            "description": "The ID of an invite.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an invite object",
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "operationId": "get_groups",
        "summary": "List groups for enterprise",
        "tags": [
          "Groups"
        ],
        "description": "Retrieves all of the groups for a given enterprise. The user\nmust have admin permissions to inspect enterprise's groups.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of group objects. If there are no groups, an\nempty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/Groups"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_groups",
        "summary": "Create group",
        "tags": [
          "Groups"
        ],
        "description": "Creates a new group of users in an enterprise. Only users with admin\npermissions can create new groups.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the new group to be created. This name must be unique\nwithin the enterprise."
                },
                "provenance": {
                  "type": "string",
                  "description": "Keeps track of which external source this group is\ncoming, for example `Active Directory`, or `Okta`.\n\nSetting this will also prevent Box admins from editing\nthe group name and its members directly via the Box\nweb application.\n\nThis is desirable for one-way syncing of groups.",
                  "maxLength": 255
                },
                "external_sync_identifier": {
                  "type": "string",
                  "description": "An arbitrary identifier that can be used by\nexternal group sync tools to link this Box Group to\nan external group.\n\nExample values of this field\ncould be an **Active Directory Object ID** or a **Google\nGroup ID**.\n\nWe recommend you use of this field in\norder to avoid issues when group names are updated in\neither Box or external systems."
                },
                "description": {
                  "type": "string",
                  "description": "A human readable description of the group.",
                  "maxLength": 255
                },
                "invitability_level": {
                  "type": "string",
                  "description": "Specifies who can invite the group to collaborate\non folders.\n\nWhen set to `admins_only` the enterprise admin, co-admins,\nand the group's admin can invite the group.\n\nWhen set to `admins_and_members` all the admins listed\nabove and group members can invite the group.\n\nWhen set to `all_managed_users` all managed users in the\nenterprise can invite the group.",
                  "enum": [
                    "admins_only",
                    "admins_and_members",
                    "all_managed_users"
                  ]
                },
                "member_viewability_level": {
                  "type": "string",
                  "description": "Specifies who can see the members of the group.\n\n* `admins_only` - the enterprise admin, co-admins, group's\n  group admin\n* `admins_and_members` - all admins and group members\n* `all_managed_users` - all managed users in the\n  enterprise",
                  "enum": [
                    "admins_only",
                    "admins_and_members",
                    "all_managed_users"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the new group object.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "409": {
            "description": "Returns an error a conflict is stopping the group from being created.\n\n* `invalid_parameter`: Often returned if the group name is not unique in\nthe enterprise.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/groups/{group_id}": {
      "get": {
        "operationId": "get_groups_id",
        "summary": "Get group",
        "tags": [
          "Groups"
        ],
        "description": "Retrieves information about a group.",
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the group object",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_groups_id",
        "summary": "Update group",
        "tags": [
          "Groups"
        ],
        "description": "Updates a specific group.",
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the new group to be created. Must be unique within the\nenterprise."
                },
                "provenance": {
                  "type": "string",
                  "description": "Keeps track of which external source this group is\ncoming, for example `Active Directory`, or `Okta`.\n\nSetting this will also prevent Box admins from editing\nthe group name and its members directly via the Box\nweb application.\n\nThis is desirable for one-way syncing of groups.",
                  "maxLength": 255
                },
                "external_sync_identifier": {
                  "type": "string",
                  "description": "An arbitrary identifier that can be used by\nexternal group sync tools to link this Box Group to\nan external group.\n\nExample values of this field\ncould be an **Active Directory Object ID** or a **Google\nGroup ID**.\n\nWe recommend you use of this field in\norder to avoid issues when group names are updated in\neither Box or external systems."
                },
                "description": {
                  "type": "string",
                  "description": "A human readable description of the group.",
                  "maxLength": 255
                },
                "invitability_level": {
                  "type": "string",
                  "description": "Specifies who can invite the group to collaborate\non folders.\n\nWhen set to `admins_only` the enterprise admin, co-admins,\nand the group's admin can invite the group.\n\nWhen set to `admins_and_members` all the admins listed\nabove and group members can invite the group.\n\nWhen set to `all_managed_users` all managed users in the\nenterprise can invite the group.",
                  "enum": [
                    "admins_only",
                    "admins_and_members",
                    "all_managed_users"
                  ]
                },
                "member_viewability_level": {
                  "type": "string",
                  "description": "Specifies who can see the members of the group.\n\n* `admins_only` - the enterprise admin, co-admins, group's\n  group admin\n* `admins_and_members` - all admins and group members\n* `all_managed_users` - all managed users in the\n  enterprise",
                  "enum": [
                    "admins_only",
                    "admins_and_members",
                    "all_managed_users"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated group object.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "409": {
            "description": "Returns an error a conflict is stopping the group from being created.\n\n* `invalid_parameter`: Often returned if the group name is not unique in\nthe enterprise.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_groups_id",
        "summary": "Remove group",
        "tags": [
          "Groups"
        ],
        "description": "Permanently deletes a group.",
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the group was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/groups/{group_id}/memberships": {
      "get": {
        "operationId": "get_groups_id_memberships",
        "summary": "List members of group",
        "tags": [
          "Groups"
        ],
        "description": "Retrieves all the members for a group. The user\nmust have admin permissions to inspect enterprise's groups.",
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of membership objects. If there are no\nmemberships, an empty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/GroupMemberships"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/groups/{group_id}/collaborations": {
      "get": {
        "operationId": "get_groups_id_collaborations",
        "summary": "List collaborations for group",
        "tags": [
          "Collaborations (List)"
        ],
        "description": "Retrieves all the collaborations for a group. The user\nmust have admin permissions to inspect enterprise's groups.\n\nEach collaboration object has details on which files or\nfolders the group has access to and with what role.",
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of collaboration objects. If there are no\ncollaborations, an empty collection will be returned.",
            "schema": {
              "$ref": "#/definitions/Collaborations"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/group_memberships": {
      "post": {
        "operationId": "post_group_memberships",
        "summary": "Add user to group",
        "tags": [
          "Groups"
        ],
        "description": "Creates a group membership",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "user",
                "group"
              ],
              "properties": {
                "user": {
                  "type": "object",
                  "description": "The user to add to the group.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the user to add to the group"
                    }
                  }
                },
                "group": {
                  "type": "object",
                  "description": "The group to add the user to.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the group to add the user to"
                    }
                  }
                },
                "role": {
                  "type": "string",
                  "description": "The role of the user in the group.",
                  "enum": [
                    "member",
                    "admin"
                  ]
                },
                "configurable_permissions": {
                  "type": "object",
                  "description": "Custom configuration for the permissions an admin\nif a group will receive. This option has no effect\non members with a role of `member`.\n\nSetting these permissions overwrites the default\naccess levels of an admin.\n\nSpecifying a value of \"null\" for this object will disable\nall configurable permissions. Specifying permissions will set\nthem accordingly, omitted permissions will be enabled by default.",
                  "additionalProperties": {
                    "type": "boolean",
                    "description": "A key value pair of custom permissions.",
                    "x-box-example-key": "can_run_reports"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new group membership object.",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/group_memberships/{group_membership_id}": {
      "get": {
        "operationId": "get_group_memberships_id",
        "summary": "Get group membership",
        "tags": [
          "Groups"
        ],
        "description": "Retrieves a specific group membership.",
        "parameters": [
          {
            "name": "group_membership_id",
            "description": "The ID of the group membership.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the group membership object.",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_group_memberships_id",
        "summary": "Update group membership",
        "tags": [
          "Groups"
        ],
        "description": "Updates a user's group membership.",
        "parameters": [
          {
            "name": "group_membership_id",
            "description": "The ID of the group membership.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the user in the group.",
                  "enum": [
                    "member",
                    "admin"
                  ]
                },
                "configurable_permissions": {
                  "type": "object",
                  "description": "Custom configuration for the permissions an admin\nif a group will receive. This option has no effect\non members with a role of `member`.\n\nSetting these permissions overwrites the default\naccess levels of an admin.\n\nSpecifying a value of \"null\" for this object will disable\nall configurable permissions. Specifying permissions will set\nthem accordingly, omitted permissions will be enabled by default.",
                  "additionalProperties": {
                    "type": "boolean",
                    "description": "A key value pair of custom permissions.",
                    "x-box-example-key": "can_run_reports"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a new group membership object.",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_group_memberships_id",
        "summary": "Remove user from group",
        "tags": [
          "Groups"
        ],
        "description": "Deletes a specific group membership.",
        "parameters": [
          {
            "name": "group_membership_id",
            "description": "The ID of the group membership.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the membership was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "operationId": "get_webhooks",
        "summary": "List all webhooks",
        "tags": [
          "Webhooks"
        ],
        "description": "Returns all defined webhooks for the requesting application.\n\nThis API only returns webhooks that are applied to files or folders that are\nowned by the authenticated user. This means that an admin can not see webhooks\ncreated by a service account unless the admin has access to those folders, and\nvice versa.",
        "parameters": [
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of webhooks.",
            "schema": {
              "$ref": "#/definitions/Webhooks"
            }
          },
          "403": {
            "description": "Returns an error if the application does not\nhave the permission to manage webhooks.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_webhooks",
        "summary": "Create webhook",
        "tags": [
          "Webhooks"
        ],
        "description": "Creates a webhook.",
        "responses": {
          "201": {
            "description": "Returns the new webhook object.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Returns an error if the parameters were\nincorrect.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error if the application does not\nhave the permission to manage webhooks.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the target item could\nnot be found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if the a webhook for this\ncombination of target, application, and user\nalready exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "target",
                "triggers",
                "address"
              ],
              "properties": {
                "target": {
                  "type": "object",
                  "description": "The item that will trigger the webhook",
                  "properties": {
                    "id": {
                      "description": "The ID of the item to trigger a webhook",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of item to trigger a webhook",
                      "type": "string",
                      "enum": [
                        "file",
                        "folder"
                      ]
                    }
                  }
                },
                "address": {
                  "type": "string",
                  "description": "The URL that is notified by this webhook"
                },
                "triggers": {
                  "type": "array",
                  "description": "An array of event names that this webhook is\nto be triggered for",
                  "items": {
                    "title": "Webhook Trigger",
                    "type": "string",
                    "description": "The event name that triggered this webhook",
                    "enum": [
                      "FILE.UPLOADED",
                      "FILE.PREVIEWED",
                      "FILE.DOWNLOADED",
                      "FILE.TRASHED",
                      "FILE.DELETED",
                      "FILE.RESTORED",
                      "FILE.COPIED",
                      "FILE.MOVED",
                      "FILE.LOCKED",
                      "FILE.UNLOCKED",
                      "FILE.RENAMED",
                      "COMMENT.CREATED",
                      "COMMENT.UPDATED",
                      "COMMENT.DELETED",
                      "TASK_ASSIGNMENT.CREATED",
                      "TASK_ASSIGNMENT.UPDATED",
                      "METADATA_INSTANCE.CREATED",
                      "METADATA_INSTANCE.UPDATED",
                      "METADATA_INSTANCE.DELETED",
                      "FOLDER.CREATED",
                      "FOLDER.RENAMED",
                      "FOLDER.DOWNLOADED",
                      "FOLDER.RESTORED",
                      "FOLDER.DELETED",
                      "FOLDER.COPIED",
                      "FOLDER.MOVED",
                      "FOLDER.TRASHED",
                      "WEBHOOK.DELETED",
                      "COLLABORATION.CREATED",
                      "COLLABORATION.ACCEPTED",
                      "COLLABORATION.REJECTED",
                      "COLLABORATION.REMOVED",
                      "COLLABORATION.UPDATED",
                      "SHARED_LINK.DELETED",
                      "SHARED_LINK.CREATED",
                      "SHARED_LINK.UPDATED"
                    ]
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/webhooks/{webhook_id}": {
      "get": {
        "operationId": "get_webhooks_id",
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhook",
        "description": "Retrieves a specific webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "description": "The ID of the webhook.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a webhook object",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "403": {
            "description": "Returns an error if the application does not\nhave the permission to manage webhooks.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the webhook could not be found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_webhooks_id",
        "summary": "Update webhook",
        "tags": [
          "Webhooks"
        ],
        "description": "Updates a webhook.",
        "parameters": [
          {
            "name": "webhook_id",
            "description": "The ID of the webhook.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "target": {
                  "type": "object",
                  "description": "The item that will trigger the webhook",
                  "properties": {
                    "id": {
                      "description": "The ID of the item to trigger a webhook",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of item to trigger a webhook",
                      "type": "string",
                      "enum": [
                        "file",
                        "folder"
                      ]
                    }
                  }
                },
                "address": {
                  "type": "string",
                  "description": "The URL that is notified by this webhook"
                },
                "triggers": {
                  "type": "array",
                  "description": "An array of event names that this webhook is\nto be triggered for",
                  "items": {
                    "title": "Webhook Trigger",
                    "type": "string",
                    "description": "The event name that triggered this webhook",
                    "enum": [
                      "FILE.UPLOADED",
                      "FILE.PREVIEWED",
                      "FILE.DOWNLOADED",
                      "FILE.TRASHED",
                      "FILE.DELETED",
                      "FILE.RESTORED",
                      "FILE.COPIED",
                      "FILE.MOVED",
                      "FILE.LOCKED",
                      "FILE.UNLOCKED",
                      "FILE.RENAMED",
                      "COMMENT.CREATED",
                      "COMMENT.UPDATED",
                      "COMMENT.DELETED",
                      "TASK_ASSIGNMENT.CREATED",
                      "TASK_ASSIGNMENT.UPDATED",
                      "METADATA_INSTANCE.CREATED",
                      "METADATA_INSTANCE.UPDATED",
                      "METADATA_INSTANCE.DELETED",
                      "FOLDER.CREATED",
                      "FOLDER.RENAMED",
                      "FOLDER.DOWNLOADED",
                      "FOLDER.RESTORED",
                      "FOLDER.DELETED",
                      "FOLDER.COPIED",
                      "FOLDER.MOVED",
                      "FOLDER.TRASHED",
                      "WEBHOOK.DELETED",
                      "COLLABORATION.CREATED",
                      "COLLABORATION.ACCEPTED",
                      "COLLABORATION.REJECTED",
                      "COLLABORATION.REMOVED",
                      "COLLABORATION.UPDATED",
                      "SHARED_LINK.DELETED",
                      "SHARED_LINK.CREATED",
                      "SHARED_LINK.UPDATED"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the new webhook object.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Returns an error if the parameters were\nincorrect.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error if the application does not\nhave the permission to manage webhooks.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the target item or webhook\ncould not be found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if the a webhook for this\ncombination of target, application, and user\nalready exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_webhooks_id",
        "summary": "Remove webhook",
        "tags": [
          "Webhooks"
        ],
        "description": "Deletes a webhook.",
        "parameters": [
          {
            "name": "webhook_id",
            "description": "The ID of the webhook.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response will be returned when the webhook\nwas successfully deleted."
          },
          "403": {
            "description": "Returns an error if the application does not\nhave the permission to manage webhooks.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the webhook could not be found",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/skill_invocations/{skill_invocation_id}": {
      "put": {
        "operationId": "put_skill_invocations_id",
        "summary": "Update skill invocation",
        "tags": [
          "Skills"
        ],
        "description": "Updates the status, usage and response metadata of a\nskill invocation.",
        "parameters": [
          {
            "name": "skill_invocation_id",
            "description": "The ID of the skill invocation.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "status",
                "metadata",
                "file"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Sets the status of the skill invocation.",
                  "enum": [
                    "invoked",
                    "processing",
                    "success",
                    "transient_failure",
                    "permanent_failure"
                  ]
                },
                "metadata": {
                  "type": "object",
                  "description": "The metadata to set for this skill",
                  "properties": {
                    "cards": {
                      "description": "The metadata cards to set on the file.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A Box Skills card that is applied to the metadata\nof a file.",
                        "required": [
                          "type",
                          "created_at",
                          "skill",
                          "skill_card_title"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "`skill_card`",
                            "enum": [
                              "skill_card"
                            ]
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The time the card was created at"
                          },
                          "skill_card_type": {
                            "type": "string",
                            "description": "The type of card to create",
                            "enum": [
                              "transcript",
                              "keyword",
                              "timeline",
                              "status",
                              "error"
                            ]
                          },
                          "skill": {
                            "type": "object",
                            "description": "The skill that is updating the cards",
                            "required": [
                              "type",
                              "id"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "`service`",
                                "enum": [
                                  "service"
                                ]
                              },
                              "id": {
                                "type": "string",
                                "description": "The ID of the skill."
                              }
                            }
                          },
                          "skill_card_title": {
                            "type": "object",
                            "description": "The title of the card",
                            "required": [
                              "code",
                              "message"
                            ],
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "An identifier for your title"
                              },
                              "message": {
                                "type": "string",
                                "description": "The actual title to show in the UI"
                              }
                            }
                          },
                          "invocation": {
                            "type": "object",
                            "description": "The current invocation of the skill",
                            "required": [
                              "type",
                              "id"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "`skill_invocation`",
                                "enum": [
                                  "skill_invocation"
                                ]
                              },
                              "id": {
                                "type": "string",
                                "description": "The ID of the skill invocation."
                              }
                            }
                          },
                          "status": {
                            "type": "object",
                            "description": "Optional status. Used with a `card_type` of `status`.",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "The type of status being set",
                                "enum": [
                                  "skills_pending_status",
                                  "custom_error"
                                ]
                              },
                              "message": {
                                "type": "string",
                                "description": "The message for the status to show in the UI."
                              }
                            }
                          },
                          "entries": {
                            "description": "An optional list of entries.\n\nUsed with a `card_type` of`transcript`, `keyword` or\n`timeline`.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "description": "An entry in the `entries` attribute of a metadata card",
                              "required": [
                                "type",
                                "text"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "`text`",
                                  "enum": [
                                    "text"
                                  ]
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The text of the entry"
                                }
                              }
                            }
                          },
                          "duration": {
                            "type": "integer",
                            "description": "An optional duration.\n\nUsed with a `card_type` of`transcript`, or\n`timeline`."
                          }
                        }
                      }
                    }
                  }
                },
                "file": {
                  "type": "object",
                  "description": "The file to assign this metadata to",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "`file`",
                      "enum": [
                        "file"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the file"
                    }
                  }
                },
                "file_version": {
                  "type": "object",
                  "description": "The file version to assign this metadata to",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "`file_version`",
                      "enum": [
                        "file_version"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the file version"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/events": {
      "options": {
        "operationId": "options_events",
        "summary": "Get events long poll endpoint",
        "tags": [
          "Events"
        ],
        "description": "Returns a list of real-time servers that can be used for long-polling updates\nto the [event stream](#get-events).\n\nLong polling is the concept where a HTTP request is kept open until the\nserver sends a response, then repeating the process over and over to receive\nupdated responses.\n\nLong polling the event stream can only be used for user events, not for\nenterprise events.\n\nTo use long polling, first use this endpoint to retrieve a list of long poll\nURLs. Next, make a long poll request to any of the provided URLs.\n\nWhen an event occurs in monitored account a response with the value\n`new_change` will be sent. The response contains no other details as\nit only serves as a prompt to take further action such as sending a\nrequest to the [events endpoint](#get-events) with the last known\n`stream_position`.\n\nAfter the server sends this response it closes the connection. You must now\nrepeat the long poll process to begin listening for events again.\n\nIf no events occur for a while and the connection times out you will\nreceive a response with the value `reconnect`. When you receive this response\nyou’ll make another call to this endpoint to restart the process.\n\nIf you receive no events in `retry_timeout` seconds then you will need to\nmake another request to the real-time server (one of the URLs in the response\nfor this endpoint). This might be necessary due to network errors.\n\nFinally, if you receive a `max_retries` error when making a request to the\nreal-time server, you should start over by making a call to this endpoint\nfirst.",
        "responses": {
          "200": {
            "description": "Returns a paginated array of servers that can be used\ninstead of the regular endpoints for long-polling events.",
            "schema": {
              "$ref": "#/definitions/RealtimeServers"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": []
      },
      "get": {
        "operationId": "get_events",
        "summary": "List user and enterprise events",
        "tags": [
          "Events"
        ],
        "description": "Returns up to a year of past events for a given user\nor for the entire enterprise.\n\nBy default this returns events for the authenticated user. To retrieve\nevents for the entire enterprise, set the `stream_type` to `admin_logs`.\nThe user making the API call will need to have admin privileges, and\nthe application will need to have the permission to access the event feed\nto get the enterprise event feed.",
        "parameters": [
          {
            "name": "stream_type",
            "description": "Defines the type of events that are returned\n\n* `all` returns everything for a user and is the default\n* `changes` returns events that may cause file tree changes\n  such as file updates or collaborations.\n* `sync` is similar to `changes` but only applies to synced folders\n* `admin_logs` returns all events for an entire enterprise and\n  requires the user making the API call to have admin permissions.",
            "in": "query",
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "changes",
              "sync",
              "admin_logs"
            ]
          },
          {
            "name": "stream_position",
            "description": "The location in the event stream to start receiving events from.\n\n* `now` will return an empty list events and\nthe latest stream position for initialization.\n* `0` or `null` will return all events.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limits the number of events returned",
            "in": "query",
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 500
          },
          {
            "name": "event_type",
            "description": "A comma-separated list of events to filter by. This can only be used when\nrequesting the events with a `stream_type` of `admin_logs`. For any other\n`stream_type` this value will be ignored.",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "created_after",
            "description": "The lower bound date and time to return events for.",
            "in": "query",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "created_before",
            "description": "The upper bound date and time to return events for.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of event objects.\n\nEvents objects are returned in pages, with each page (chunk)\nincluding a list of event objects. The response includes a\n`chunk_size` parameter indicating how many events were returned in this\nchunk, as well as the next `stream_position` that can be\nqueried.",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/collections": {
      "get": {
        "operationId": "get_collections",
        "summary": "List all collections",
        "tags": [
          "Collections"
        ],
        "description": "Retrieves all collections for a given user.\n\nCurrently, only the `favorites` collection\nis supported.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all collections for the given user",
            "schema": {
              "$ref": "#/definitions/Collections"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/collections/{collection_id}/items": {
      "get": {
        "operationId": "get_collections_id_items",
        "summary": "List collection items",
        "tags": [
          "Collections"
        ],
        "description": "Retrieves the files and/or folders contained within\nthis collection.",
        "parameters": [
          {
            "name": "collection_id",
            "description": "The ID of the collection.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of items in the collection.",
            "schema": {
              "$ref": "#/definitions/Items"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/recent_items": {
      "get": {
        "operationId": "get_recent_items",
        "summary": "List recently accessed items",
        "tags": [
          "Recent items"
        ],
        "description": "Returns information about the recent items accessed\nby a user, either in the last 90 days or up to the last\n1000 items accessed.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list recent items access by a user.",
            "schema": {
              "$ref": "#/definitions/RecentItems"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/retention_policies": {
      "get": {
        "operationId": "get_retention_policies",
        "summary": "List retention policies",
        "tags": [
          "Retention policies"
        ],
        "description": "Retrieves all of the retention policies for an enterprise.",
        "parameters": [
          {
            "name": "policy_name",
            "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "policy_type",
            "description": "Filters results by the type of retention policy.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "finite",
              "indefinite"
            ]
          },
          {
            "name": "created_by_user_id",
            "description": "Filters results by the ID of the user who created policy.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list retention policies in the enterprise.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicies"
            }
          },
          "400": {
            "description": "Returns a `bad_request` if a non existent `policy_type` was specified.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns a `not_found` error if the user specified in `created_by_user_id`\ndoes not exist.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_retention_policies",
        "summary": "Create retention policy",
        "tags": [
          "Retention policies"
        ],
        "description": "Creates a retention policy.",
        "responses": {
          "200": {
            "description": "Returns a new retention policy object.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "400": {
            "description": "Returns a `bad_request` error with the `retention_length` was\nspecified for a `infinite` retention policy, or an incorrect\n`disposition_action` was set.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if a retention policy with the given name already exists",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "policy_name",
                "policy_type",
                "disposition_action"
              ],
              "properties": {
                "policy_name": {
                  "type": "string",
                  "description": "The name for the retention policy"
                },
                "policy_type": {
                  "type": "string",
                  "description": "The type of the retention policy. A retention\npolicy type can either be `finite`, where a\nspecific amount of time to retain the content is known\nupfront, or `indefinite`, where the amount of time\nto retain the content is still unknown.",
                  "enum": [
                    "finite",
                    "indefinite"
                  ]
                },
                "disposition_action": {
                  "type": "string",
                  "description": "The disposition action of the retention policy.\nThis action can be `permanently_delete`, which\nwill cause the content retained by the policy\nto be permanently deleted, or `remove_retention`,\nwhich will lift the retention policy from the content,\nallowing it to be deleted by users,\nonce the retention policy has expired.",
                  "enum": [
                    "permanently_delete",
                    "remove_retention"
                  ]
                },
                "retention_length": {
                  "type": "string",
                  "format": "int32",
                  "description": "The length of the retention policy. This length\nspecifies the duration in days that the retention\npolicy will be active for after being assigned to\ncontent.  If the policy has A `policy_type` of\n`indefinite`, the `retention_length` will also be\n`indefinite`."
                },
                "can_owner_extend_retention": {
                  "type": "boolean",
                  "description": "Whether the owner of a file will be allowed to\nextend the retention."
                },
                "are_owners_notified": {
                  "type": "boolean",
                  "description": "Whether owner and co-owners of a file are notified\nwhen the policy nears expiration."
                },
                "custom_notification_recipients": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "A user that is notified of an event.",
                    "properties": {
                      "type": {
                        "description": "The type of item to notify",
                        "type": "string",
                        "enum": [
                          "user"
                        ]
                      },
                      "id": {
                        "description": "The id of the user to notify",
                        "type": "string"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the user to notify"
                      },
                      "login": {
                        "type": "string",
                        "description": "The email address the user uses to notify"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/retention_policies/{retention_policy_id}": {
      "get": {
        "operationId": "get_retention_policies_id",
        "summary": "Get retention policy",
        "tags": [
          "Retention policies"
        ],
        "description": "Retrieves a retention policy.",
        "parameters": [
          {
            "name": "retention_policy_id",
            "description": "The ID of the retention policy.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the retention policy object.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_retention_policies_id",
        "summary": "Update retention policy",
        "tags": [
          "Retention policies"
        ],
        "description": "Updates a retention policy.",
        "parameters": [
          {
            "name": "retention_policy_id",
            "description": "The ID of the retention policy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "policy_name": {
                  "type": "string",
                  "description": "The name for the retention policy"
                },
                "disposition_action": {
                  "type": "string",
                  "description": "The disposition action of the retention policy.\nThis action can be `permanently_delete`, which\nwill cause the content retained by the policy\nto be permanently deleted, or `remove_retention`,\nwhich will lift the retention policy from the content,\nallowing it to be deleted by users,\nonce the retention policy has expired.",
                  "enum": [
                    "permanently_delete",
                    "remove_retention"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Used to retire a retention policy.\n\nIf not retiring a policy, do not include this parameter\nor set it to `null`.",
                  "enum": [
                    "retired"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated retention policy object.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicy"
            }
          },
          "400": {
            "description": "Returns a `bad_request` if an incorrect\n`disposition_action` was set.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if a retention policy with the given name already exists",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/retention_policies/{retention_policy_id}/assignments": {
      "get": {
        "operationId": "get_retention_policies_id_assignments",
        "summary": "List retention policy assignments",
        "tags": [
          "Retention policies"
        ],
        "description": "Returns a list of all retention policy assignments associated with a specified\nretention policy.",
        "parameters": [
          {
            "name": "retention_policy_id",
            "description": "The ID of the retention policy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "The type of the retention policy assignment to retrieve.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "folder",
              "enterprise"
            ]
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of the retention policy assignments associated with the\nspecified retention policy.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicyAssignments"
            }
          },
          "400": {
            "description": "Returns an error if an unknown `type` is specified.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/retention_policy_assignments": {
      "post": {
        "operationId": "post_retention_policy_assignments",
        "summary": "Assign retention policy",
        "tags": [
          "Retention policies"
        ],
        "description": "Assigns a retention policy to an item.",
        "responses": {
          "201": {
            "description": "Returns a new retention policy assignment object.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicyAssignment"
            }
          },
          "400": {
            "description": "Returns an error if an `id` is specified while assigning a the\nretention policy to an enterprise.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if no retention policy with the given `policy_id` exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if a retention policy of equal or greater length has\nalready been assigned to this item.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "policy_id",
                "assign_to"
              ],
              "properties": {
                "policy_id": {
                  "type": "string",
                  "description": "The ID of the retention policy to assign"
                },
                "assign_to": {
                  "type": "object",
                  "description": "The item to assign the policy to",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of item to assign the policy to.",
                      "enum": [
                        "enterprise",
                        "folder",
                        "metadata_template"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of item to assign the policy to.\n\nSet to `null` or omit when `type` is set to\n`enterprise`."
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/retention_policy_assignments/{retention_policy_assignment_id}": {
      "get": {
        "operationId": "get_retention_policy_assignments_id",
        "summary": "Get retention policy assignment",
        "tags": [
          "Retention policies"
        ],
        "description": "Retrieves a retention policy assignment",
        "parameters": [
          {
            "name": "retention_policy_assignment_id",
            "description": "The ID of the retention policy assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the retention policy assignment object.",
            "schema": {
              "$ref": "#/definitions/RetentionPolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/legal_hold_policies": {
      "get": {
        "operationId": "get_legal_hold_policies",
        "summary": "List all legal hold policies",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Retrieves a list of legal hold policies that belong to\nan enterprise.",
        "parameters": [
          {
            "name": "policy_name",
            "description": "Limits results to policies for which the names start with\nthis search term. This is a case-insensitive prefix.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of legal hold policies.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicies"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_legal_hold_policies",
        "summary": "Create legal hold policy",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Create a new legal hold policy.",
        "responses": {
          "201": {
            "description": "Returns a new legal hold policy object.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          },
          "400": {
            "description": "Returns an error if required parameters are missing,\nor neither `is_ongoing` or filter dates are specified.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          },
          "409": {
            "description": "Returns an error if a policy with this name already exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "policy_name"
              ],
              "properties": {
                "policy_name": {
                  "description": "The name of the policy.",
                  "type": "string",
                  "maxLength": 254
                },
                "description": {
                  "description": "A description for the policy.",
                  "type": "string",
                  "maxLength": 500
                },
                "filter_started_at": {
                  "description": "The filter start date.\n\nWhen this policy is applied using a `custodian` legal\nhold assignments, it will only apply to file versions\ncreated or uploaded inside of the\ndate range. Other assignment types, such as folders and\nfiles, will ignore the date filter.\n\nRequired if `is_ongoing` is set to `false`.",
                  "type": "string",
                  "maxLength": 500,
                  "format": "date-time"
                },
                "filter_ended_at": {
                  "description": "The filter end date.\n\nWhen this policy is applied using a `custodian` legal\nhold assignments, it will only apply to file versions\ncreated or uploaded inside of the\ndate range. Other assignment types, such as folders and\nfiles, will ignore the date filter.\n\nRequired if `is_ongoing` is set to `false`.",
                  "type": "string",
                  "maxLength": 500,
                  "format": "date-time"
                },
                "is_ongoing": {
                  "description": "Whether new assignments under this policy should\ncontinue applying to files even after initialization.\n\nWhen this policy is applied using a legal hold assignment,\nit will continue applying the policy to any new file versions\neven after it has been applied.\n\nFor example, if a legal hold assignment is placed on a user\ntoday, and that user uploads a file tomorrow, that file will\nget held. This will continue until the policy is retired.\n\nRequired if no filter dates are set.",
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "/legal_hold_policies/{legal_hold_policy_id}": {
      "get": {
        "operationId": "get_legal_hold_policies_id",
        "summary": "Get legal hold policy",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Retrieve a legal hold policy.",
        "parameters": [
          {
            "name": "legal_hold_policy_id",
            "description": "The ID of the legal hold policy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a legal hold policy object.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_legal_hold_policies_id",
        "summary": "Update legal hold policy",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Update legal hold policy.",
        "parameters": [
          {
            "name": "legal_hold_policy_id",
            "description": "The ID of the legal hold policy",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "policy_name": {
                  "description": "The name of the policy.",
                  "type": "string",
                  "maxLength": 254
                },
                "description": {
                  "description": "A description for the policy.",
                  "type": "string",
                  "maxLength": 500
                },
                "release_notes": {
                  "description": "Notes around why the policy was released.",
                  "type": "string",
                  "maxLength": 500
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a new legal hold policy object.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicy"
            }
          },
          "409": {
            "description": "Returns an error if a policy with this name already exists.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_legal_hold_policies_id",
        "tags": [
          "Legal hold policies"
        ],
        "summary": "Remove legal hold policy",
        "description": "Delete an existing legal hold policy.\n\nThis is an asynchronous process. The policy will not be\nfully deleted yet when the response returns.",
        "parameters": [
          {
            "name": "legal_hold_policy_id",
            "description": "The ID of the legal hold policy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A blank response is returned if the policy was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/legal_hold_policy_assignments": {
      "get": {
        "operationId": "get_legal_hold_policy_assignments",
        "summary": "List legal hold policy assignments",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Retrieves a list of items a legal hold policy has been assigned to.",
        "parameters": [
          {
            "name": "policy_id",
            "description": "The ID of the legal hold policy",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "assign_to_type",
            "description": "Filters the results by the type of item the\npolicy was applied to.",
            "in": "query",
            "type": "string",
            "enum": [
              "file",
              "file_version",
              "folder",
              "user"
            ]
          },
          {
            "name": "assign_to_id",
            "description": "Filters the results by the ID of item the\npolicy was applied to.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of legal hold policy assignments.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicyAssignments"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_legal_hold_policy_assignments",
        "summary": "Assign legal hold policy",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Assign a legal hold to a file, file version, folder, or user.",
        "responses": {
          "201": {
            "description": "Returns a new legal hold policy assignment.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "policy_id",
                "assign_to"
              ],
              "properties": {
                "policy_id": {
                  "description": "The ID of the policy to assign.",
                  "type": "string"
                },
                "assign_to": {
                  "type": "object",
                  "description": "The item to assign the policy to",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of item to assign the policy to",
                      "enum": [
                        "file",
                        "file_version",
                        "folder",
                        "user"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of item to assign the policy to"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}": {
      "get": {
        "operationId": "get_legal_hold_policy_assignments_id",
        "summary": "Get legal hold policy assignment",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Retrieve a legal hold policy assignment.",
        "parameters": [
          {
            "name": "legal_hold_policy_assignment_id",
            "description": "The ID of the legal hold policy assignment",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a legal hold policy object.",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_legal_hold_policy_assignments_id",
        "tags": [
          "Legal hold policies"
        ],
        "summary": "Unassign legal hold policy",
        "description": "Remove a legal hold from an item.\n\nThis is an asynchronous process. The policy will not be\nfully removed yet when the response returns.",
        "parameters": [
          {
            "name": "legal_hold_policy_assignment_id",
            "description": "The ID of the legal hold policy assignment",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "A blank response is returned if the assignment was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/files_on_hold": {
      "get": {
        "operationId": "get_legal_hold_policy_assignments_id_files_on_hold",
        "summary": "List current file versions for legal hold policy assignment",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Get a list of current file versions for a legal hold\nassignment.\n\nIn some cases you may want to get previous file versions instead. In these\ncases, use the `GET  /legal_hold_policy_assignments/:id/file_versions_on_hold`\nAPI instead to return any previous versions of a file for this legal hold\npolicy assignment.\n\nDue to ongoing re-architecture efforts this API might not return all file\nversions held for this policy ID. Instead, this API will only return the\nlatest file version held in the newly developed architecture. The `GET\n/file_version_legal_holds` API can be used to fetch current and past versions\nof files held within the legacy architecture.\n\nThe `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to\nfind a list of policy assignments for a given policy ID.",
        "parameters": [
          {
            "name": "legal_hold_policy_assignment_id",
            "description": "The ID of the legal hold policy assignment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of current file versions held under legal hold for a\nspecific legal hold policy assignment.",
            "schema": {
              "$ref": "#/definitions/FileVersionLegalHolds"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/file_versions_on_hold": {
      "get": {
        "operationId": "get_legal_hold_policy_assignments_id_file_versions_on_hold",
        "summary": "List previous file versions for legal hold policy assignment",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Get a list of previous file versions for a legal hold\nassignment.\n\nIn some cases you may only need the latest file versions instead. In these\ncases, use the `GET  /legal_hold_policy_assignments/:id/files_on_hold` API\ninstead to return any current (latest) versions of a file for this legal hold\npolicy assignment.\n\nDue to ongoing re-architecture efforts this API might not return all files\nheld for this policy ID. Instead, this API will only return past file versions\nheld in the newly developed architecture. The `GET /file_version_legal_holds`\nAPI can be used to fetch current and past versions of files held within the\nlegacy architecture.\n\nThe `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to\nfind a list of policy assignments for a given policy ID.",
        "parameters": [
          {
            "name": "legal_hold_policy_assignment_id",
            "description": "The ID of the legal hold policy assignment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of previous file versions held under legal hold for a\nspecific legal hold policy assignment.",
            "schema": {
              "$ref": "#/definitions/FileVersionLegalHolds"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/file_version_retentions/{file_version_retention_id}": {
      "get": {
        "operationId": "get_file_version_retentions_id",
        "tags": [
          "Retention policies"
        ],
        "summary": "Get retention on file",
        "description": "Returns information about a file version retention.",
        "parameters": [
          {
            "name": "file_version_retention_id",
            "description": "The ID of the file version retention",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a file version retention object.",
            "schema": {
              "$ref": "#/definitions/FileVersionRetention"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/file_version_retentions": {
      "get": {
        "operationId": "get_file_version_retentions",
        "tags": [
          "Retention policies"
        ],
        "summary": "List file version retentions",
        "description": "Retrieves all file version retentions for the given enterprise.",
        "parameters": [
          {
            "name": "file_id",
            "description": "Filters results by files with this ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "file_version_id",
            "description": "Filters results by file versions with this ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "policy_id",
            "description": "Filters results by the retention policy with this ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "disposition_action",
            "description": "Filters results by the retention policy with this disposition\naction.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "permanently_delete",
              "remove_retention"
            ]
          },
          {
            "name": "disposition_before",
            "description": "Filters results by files that will have their disposition\ncome into effect before this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "disposition_after",
            "description": "Filters results by files that will have their disposition\ncome into effect after this date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all file version retentions for the enterprise.",
            "schema": {
              "$ref": "#/definitions/FileVersionRetentions"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/file_version_legal_holds/{file_version_legal_hold_id}": {
      "get": {
        "operationId": "get_file_version_legal_holds_id",
        "summary": "Get file version legal hold",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Retrieves information about the legal hold policies\nassigned to a file version.",
        "parameters": [
          {
            "name": "file_version_legal_hold_id",
            "description": "The ID of the file version legal hold",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the legal hold policy assignments for the file version.",
            "schema": {
              "$ref": "#/definitions/FileVersionLegalHold"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/file_version_legal_holds": {
      "get": {
        "operationId": "get_file_version_legal_holds",
        "summary": "List file version legal holds",
        "tags": [
          "Legal hold policies"
        ],
        "description": "Get a list of file versions on legal hold for a legal hold\nassignment.\n\nDue to ongoing re-architecture efforts this API might not return all file\nversions for this policy ID.\n\nInstead, this API will only return file versions held in the legacy\narchitecture. Two new endpoints will available to request any file versions\nheld in the new architecture.\n\nFor file versions held in the new architecture, the `GET\n/legal_hold_policy_assignments/:id/file_versions_on_hold` API can be used to\nreturn all past file versions available for this policy assignment, and the\n`GET /legal_hold_policy_assignments/:id/files_on_hold` API can be used to\nreturn any current (latest) versions of a file under legal hold.\n\nThe `GET /legal_hold_policy_assignments?policy_id={id}` API can be used to\nfind a list of policy assignments for a given policy ID.\n\nOnce the re-architecture is completed this API will be deprecated.",
        "parameters": [
          {
            "name": "policy_id",
            "description": "The ID of the legal hold policy to get the file version legal\nholds for.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of file version legal holds for a specific legal\nhold policy.",
            "schema": {
              "$ref": "#/definitions/FileVersionLegalHolds"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/device_pinners/{device_pinner_id}": {
      "get": {
        "operationId": "get_device_pinners_id",
        "summary": "Get device pin",
        "tags": [
          "Device pinners"
        ],
        "description": "Retrieves information about an individual device pin.",
        "parameters": [
          {
            "name": "device_pinner_id",
            "description": "The ID of the device pin",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about a single device pin.",
            "schema": {
              "$ref": "#/definitions/DevicePinner"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_device_pinners_id",
        "summary": "Remove device pin",
        "tags": [
          "Device pinners"
        ],
        "description": "Deletes an individual device pin.",
        "parameters": [
          {
            "name": "device_pinner_id",
            "description": "The ID of the device pin",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the pin has been deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise_id}/device_pinners": {
      "get": {
        "operationId": "get_enterprises_id_device_pinners",
        "summary": "List enterprise device pins",
        "tags": [
          "Device pinners"
        ],
        "description": "Retrieves all the device pins within an enterprise.\n\nThe user must have admin privileges, and the application\nneeds the \"manage enterprise\" scope to make this call.",
        "parameters": [
          {
            "name": "enterprise_id",
            "description": "The ID of the enterprise",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          },
          {
            "name": "direction",
            "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of device pins for a given enterprise.",
            "schema": {
              "$ref": "#/definitions/DevicePinners"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/terms_of_services": {
      "get": {
        "operationId": "get_terms_of_services",
        "summary": "List terms of services",
        "tags": [
          "Terms of service"
        ],
        "description": "Returns the current terms of service text and settings\nfor the enterprise.",
        "parameters": [
          {
            "name": "tos_type",
            "description": "Limits the results to the terms of service of the given type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "external",
              "managed"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of terms of service text and settings for the\nenterprise.",
            "schema": {
              "$ref": "#/definitions/TermsOfServices"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_terms_of_services",
        "tags": [
          "Terms of service"
        ],
        "summary": "Create terms of service",
        "description": "Creates a terms of service for a given enterprise\nand type of user.",
        "responses": {
          "200": {
            "description": "Returns a new task object",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "status",
                "text"
              ],
              "properties": {
                "status": {
                  "description": "Whether this terms of service is active.",
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                },
                "tos_type": {
                  "description": "The type of user to set the terms of\nservice for.",
                  "type": "string",
                  "enum": [
                    "external",
                    "managed"
                  ]
                },
                "text": {
                  "description": "The terms of service text to display to users.\n\nThe text can be set to empty if the `status` is set to `disabled`.",
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/terms_of_services/{terms_of_service_id}": {
      "get": {
        "operationId": "get_terms_of_services_id",
        "summary": "Get terms of service",
        "tags": [
          "Terms of service"
        ],
        "description": "Fetches a specific terms of service.",
        "parameters": [
          {
            "name": "terms_of_service_id",
            "description": "The ID of the terms of service.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a terms of service object.",
            "schema": {
              "$ref": "#/definitions/TermsOfService"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_terms_of_services_id",
        "summary": "Update terms of service",
        "tags": [
          "Terms of service"
        ],
        "description": "Updates a specific terms of service.",
        "parameters": [
          {
            "name": "terms_of_service_id",
            "description": "The ID of the terms of service.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "status",
                "text"
              ],
              "properties": {
                "status": {
                  "description": "Whether this terms of service is active.",
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                },
                "text": {
                  "description": "The terms of service text to display to users.\n\nThe text can be set to empty if the `status` is set to `disabled`.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an updated terms of service object.",
            "schema": {
              "$ref": "#/definitions/TermsOfService"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/terms_of_service_user_statuses": {
      "get": {
        "operationId": "get_terms_of_service_user_statuses",
        "summary": "List terms of service user statuses",
        "tags": [
          "Terms of service"
        ],
        "description": "Retrieves an overview of users and their status for a\nterms of service, including Whether they have accepted\nthe terms and when.",
        "parameters": [
          {
            "name": "tos_id",
            "description": "The ID of the terms of service.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "Limits results to the given user ID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of terms of service statuses.",
            "schema": {
              "$ref": "#/definitions/TermsOfServiceUserStatuses"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_terms_of_service_user_statuses",
        "summary": "Create terms of service status for new user",
        "tags": [
          "Terms of service"
        ],
        "description": "Sets the status for a terms of service for a user.",
        "responses": {
          "200": {
            "description": "Returns a terms of service status object.",
            "schema": {
              "$ref": "#/definitions/TermsOfServiceUserStatus"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "tos",
                "user",
                "is_accepted"
              ],
              "properties": {
                "tos": {
                  "type": "object",
                  "description": "The terms of service to set the status for.",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of object.",
                      "enum": [
                        "terms_of_service"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of terms of service"
                    }
                  }
                },
                "user": {
                  "type": "object",
                  "description": "The user to set the status for.",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of object.",
                      "enum": [
                        "user"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of user"
                    }
                  }
                },
                "is_accepted": {
                  "type": "boolean",
                  "description": "Whether the user has accepted the terms."
                }
              }
            }
          }
        ]
      }
    },
    "/terms_of_service_user_statuses/{terms_of_service_user_status_id}": {
      "put": {
        "operationId": "put_terms_of_service_user_statuses_id",
        "summary": "Update terms of service status for existing user",
        "tags": [
          "Terms of service"
        ],
        "description": "Updates the status for a terms of service for a user.",
        "parameters": [
          {
            "name": "terms_of_service_user_status_id",
            "description": "The ID of the terms of service status.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "is_accepted"
              ],
              "properties": {
                "is_accepted": {
                  "type": "boolean",
                  "description": "Whether the user has accepted the terms."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated terms of service status object.",
            "schema": {
              "$ref": "#/definitions/TermsOfServiceUserStatus"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/collaboration_whitelist_entries": {
      "get": {
        "operationId": "get_collaboration_whitelist_entries",
        "summary": "List collaboration whitelist entries",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Returns the list of whitelist entries which specify what domains can\ncollaborate with the current enterprise.",
        "parameters": [
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of collaboration whitelist entries.",
            "schema": {
              "$ref": "#/definitions/CollaborationWhitelistEntries"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_collaboration_whitelist_entries",
        "summary": "Create collaboration whitelist entry",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Creates a collaboration whitelist entry, specifying a domain\nand direction to allow collaboration for.",
        "responses": {
          "200": {
            "description": "Returns a new collaboration whitelist entry.",
            "schema": {
              "$ref": "#/definitions/CollaborationWhitelistEntry"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "domain",
                "direction"
              ],
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "The domain to add to the whitelist."
                },
                "direction": {
                  "type": "string",
                  "description": "The direction in which to allow collaborations.",
                  "enum": [
                    "inbound",
                    "outbound",
                    "both"
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}": {
      "get": {
        "operationId": "get_collaboration_whitelist_entries_id",
        "summary": "Get collaboration whitelist entry",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Returns a specific collaboration whitelist entry.",
        "parameters": [
          {
            "name": "collaboration_whitelist_entry_id",
            "description": "The ID of the collaboration whitelist item",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collaboration whitelist entry.",
            "schema": {
              "$ref": "#/definitions/CollaborationWhitelistEntry"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_collaboration_whitelist_entries_id",
        "summary": "Remove collaboration whitelist entry",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Deletes a specific collaboration whitelist entry.",
        "parameters": [
          {
            "name": "collaboration_whitelist_entry_id",
            "description": "The ID of the collaboration whitelist item",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the entry was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/collaboration_whitelist_exempt_targets": {
      "get": {
        "operationId": "get_collaboration_whitelist_exempt_targets",
        "summary": "List collaboration whitelist exempt target",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Returns a list of users who have been exempt from the collaboration\nwhitelist.",
        "parameters": [
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of collaboration whitelist exemptions.",
            "schema": {
              "$ref": "#/definitions/CollaborationWhitelistExemptTargets"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_collaboration_whitelist_exempt_targets",
        "summary": "Create whitelist exempt target",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Creates a collaboration whitelist entry exemption, specifying a user\nthat is exempted from the whitelist.",
        "responses": {
          "200": {
            "description": "Returns a new collaboration whitelist entry.",
            "schema": {
              "$ref": "#/definitions/CollaborationWhitelistExemptTarget"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "user"
              ],
              "properties": {
                "user": {
                  "type": "object",
                  "description": "The user to exempt.",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the user to exempt."
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}": {
      "get": {
        "operationId": "get_collaboration_whitelist_exempt_targets_id",
        "summary": "Get collaboration whitelist exempt target",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Returns a users who has been exempt from the collaboration\nwhitelist.",
        "parameters": [
          {
            "name": "collaboration_whitelist_exempt_target_id",
            "description": "<!-- alex disable whitelist -->\n\nThe ID of the collaboration whitelist exemption",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collaboration whitelist exemption.",
            "schema": {
              "$ref": "#/definitions/CollaborationWhitelistExemptTarget"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_collaboration_whitelist_exempt_targets_id",
        "summary": "Remove collaboration whitelist exempt target",
        "tags": [
          "Collaboration whitelist entries"
        ],
        "description": "Deletes a specific collaboration whitelist exemption.",
        "parameters": [
          {
            "name": "collaboration_whitelist_exempt_target_id",
            "description": "<!-- alex disable whitelist -->\n\nThe ID of the collaboration whitelist exemption",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the exemption was\nsuccessfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/storage_policies": {
      "get": {
        "operationId": "get_storage_policies",
        "summary": "List storage policies",
        "tags": [
          "Storage policies"
        ],
        "description": "Fetches all the storage policies in the enterprise.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of storage policies.",
            "schema": {
              "$ref": "#/definitions/StoragePolicies"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/storage_policies/{storage_policy_id}": {
      "get": {
        "operationId": "get_storage_policies_id",
        "summary": "Get storage policy",
        "tags": [
          "Storage policies"
        ],
        "description": "Fetches a specific storage policy.",
        "parameters": [
          {
            "name": "storage_policy_id",
            "description": "The ID of the storage policy.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a storage policy object.",
            "schema": {
              "$ref": "#/definitions/StoragePolicy"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/storage_policy_assignments": {
      "get": {
        "operationId": "get_storage_policy_assignments",
        "summary": "List storage policy assignments",
        "tags": [
          "Storage policy assignments"
        ],
        "description": "Fetches all the storage policy assignment for an enterprise or user.",
        "parameters": [
          {
            "name": "marker",
            "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolved_for_type",
            "in": "query",
            "description": "The target type to return assignments for",
            "required": true,
            "type": "string",
            "enum": [
              "user",
              "enterprise"
            ]
          },
          {
            "name": "resolved_for_id",
            "in": "query",
            "required": true,
            "description": "The ID of the user or enterprise to return assignments for",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of storage policies for\nthe enterprise or user.",
            "schema": {
              "$ref": "#/definitions/StoragePolicyAssignments"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "post": {
        "operationId": "post_storage_policy_assignments",
        "summary": "Assign storage policy",
        "tags": [
          "Storage policy assignments"
        ],
        "description": "Creates a storage policy assignment for an enterprise or user.",
        "responses": {
          "200": {
            "description": "Returns the new storage policy assignment created.",
            "schema": {
              "$ref": "#/definitions/StoragePolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "storage_policy",
                "assigned_to"
              ],
              "properties": {
                "storage_policy": {
                  "type": "object",
                  "description": "The storage policy to assign to the user or\nenterprise",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type to assign.",
                      "enum": [
                        "storage_policy"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the storage policy to assign."
                    }
                  }
                },
                "assigned_to": {
                  "type": "object",
                  "description": "The user or enterprise to assign the storage\npolicy to.",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type to assign the policy to.",
                      "enum": [
                        "user",
                        "enterprise"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the user or enterprise"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/storage_policy_assignments/{storage_policy_assignment_id}": {
      "get": {
        "operationId": "get_storage_policy_assignments_id",
        "summary": "Get storage policy assignment",
        "tags": [
          "Storage policy assignments"
        ],
        "description": "Fetches a specific storage policy assignment.",
        "parameters": [
          {
            "name": "storage_policy_assignment_id",
            "description": "The ID of the storage policy assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a storage policy assignment object.",
            "schema": {
              "$ref": "#/definitions/StoragePolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_storage_policy_assignments_id",
        "summary": "Update storage policy assignment",
        "tags": [
          "Storage policy assignments"
        ],
        "description": "Updates a specific storage policy assignment.",
        "parameters": [
          {
            "name": "storage_policy_assignment_id",
            "description": "The ID of the storage policy assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "storage_policy"
              ],
              "properties": {
                "storage_policy": {
                  "type": "object",
                  "description": "The storage policy to assign to the user or\nenterprise",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type to assign.",
                      "enum": [
                        "storage_policy"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the storage policy to assign."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an updated storage policy assignment object.",
            "schema": {
              "$ref": "#/definitions/StoragePolicyAssignment"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_storage_policy_assignments_id",
        "summary": "Unassign storage policy",
        "tags": [
          "Storage policy assignments"
        ],
        "description": "Delete a storage policy assignment.\n\nDeleting a storage policy assignment on a user\nwill have the user inherit the enterprise's default\nstorage policy.\n\nThere is a rate limit for calling this endpoint of only\ntwice per user in a 24 hour time frame.",
        "parameters": [
          {
            "name": "storage_policy_assignment_id",
            "description": "The ID of the storage policy assignment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the storage policy\nassignment is successfully deleted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2Security": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.box.com/api/oauth2/authorize",
      "tokenUrl": "https://api.box.com/oauth2/token",
      "scopes": {
        "root_readonly": "Read all files and folders stored in Box",
        "root_readwrite": "Read and write all files and folders stored in Box",
        "manage_app_users": "Provision and manage app users",
        "manage_managed_users": "Provision and manage managed users",
        "manage_groups": "Manage an enterprise's groups",
        "manage_webhook": "Create webhooks programmatically through the API",
        "manage_enterprise_properties": "Manage enterprise properties",
        "manage_data_retention": "Manage data retention polices",
        "manage_legal_hold": "Manage Legal Holds"
      }
    }
  },
  "security": [
    {
      "OAuth2Security": []
    }
  ],
  "definitions": {
    "File": {
      "title": "File",
      "x-box-tag": "files",
      "x-box-reference-category": "files",
      "description": "A full representation of a file, as can be returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Standard"
        },
        {},
        {
          "properties": {
            "version_number": {
              "type": "string",
              "description": "The version number of this file"
            },
            "comment_count": {
              "type": "integer",
              "description": "The number of comments on this file"
            },
            "permissions": {
              "allOf": [
                {
                  "type": "object",
                  "description": "The permissions that the authenticated user has for a file.",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The permissions that the authenticated user has for an item.",
                      "properties": {
                        "can_delete": {
                          "type": "boolean",
                          "description": "Specifies if the user can delete this item"
                        },
                        "can_download": {
                          "type": "boolean",
                          "description": "Specifies if the user can download this item"
                        },
                        "can_invite_collaborator": {
                          "type": "boolean",
                          "description": "Specifies if the user can invite collaborators to the item"
                        },
                        "can_rename": {
                          "type": "boolean",
                          "description": "Specifies if the user can rename this item"
                        },
                        "can_set_share_access": {
                          "type": "boolean",
                          "description": "Specifies if the user can manage shared links for\nthis item"
                        },
                        "can_share": {
                          "type": "boolean",
                          "description": "Specifies if the user can invite new collaborators to this item"
                        }
                      }
                    },
                    {
                      "properties": {
                        "can_annotate": {
                          "type": "boolean",
                          "description": "Specifies if the user can place annotations on this file."
                        },
                        "can_comment": {
                          "type": "boolean",
                          "description": "Specifies if the user can place comments on this file."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Specifies if the user can preview this file."
                        },
                        "can_upload": {
                          "type": "boolean",
                          "description": "Specifies if the user can upload a new version of this file."
                        },
                        "can_view_annotations_all": {
                          "type": "boolean",
                          "description": "Specifies if the user view all annotations placed on this file"
                        },
                        "can_view_annotations_self": {
                          "type": "boolean",
                          "description": "Specifies if the user view annotations placed by themselves\non this file"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "Describes the permissions that the current user has\nfor this file."
                },
                {},
                {}
              ]
            },
            "tags": {
              "allOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100,
                  "description": "The tags for this item. These tags are shown in\nthe Box web app and mobile apps next to an item.\n\nTo add or remove a tag, retrieve the item's current tags,\nmodify them, and then update this field.\n\nThere is a limit of 100 tags per item, and 10,000\nunique tags per enterprise."
                },
                {},
                {}
              ]
            },
            "lock": {
              "allOf": [
                {
                  "title": "Lock",
                  "type": "object",
                  "description": "The lock held on a file. A lock prevents a file from being moved,\nrenamed, or otherwise changed by anyone else than the user who created the\nlock.",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`lock`",
                          "enum": [
                            "lock"
                          ]
                        },
                        "created_by": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/User--Mini"
                            },
                            {
                              "description": "The user who created the lock."
                            }
                          ]
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time this lock was created at."
                        },
                        "expired_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time this lock is to expire at, which might be in the past."
                        },
                        "is_download_prevented": {
                          "type": "boolean",
                          "description": "Whether or not the file can be downloaded while locked."
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "The lock held on this file. If there is no lock, this can either\nbe `null` or have a timestamp in the past."
                },
                {}
              ]
            },
            "extension": {
              "type": "string",
              "description": "Indicates the (optional) file extension for this file. By default,\nthis is set to an empty string."
            },
            "is_package": {
              "type": "boolean",
              "description": "Indicates if the file is a package. Packages are commonly used\nby Mac Applications and can include iWork files."
            },
            "expiring_embed_link": {
              "allOf": [
                {
                  "title": "Expiring embed link",
                  "type": "object",
                  "description": "An expiring Box Embed Link.",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The basics of an access token",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "format": "token",
                          "description": "The requested access token."
                        },
                        "expires_in": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The time in seconds in seconds by which this token will expire."
                        },
                        "token_type": {
                          "type": "string",
                          "enum": [
                            "bearer"
                          ],
                          "description": "The type of access token returned."
                        },
                        "restricted_to": {
                          "type": "array",
                          "description": "The permissions that this access token permits,\nproviding a list of resources (files, folders, etc)\nand the scopes permitted for each of those resources.",
                          "items": {
                            "$ref": "#/definitions/FileScope"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "url": {
                          "type": "string",
                          "format": "url",
                          "description": "The actual expiring embed URL for this file, constructed\nfrom the file ID and access tokens specified in this object."
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "Requesting this field creates an expiring Box Embed URL for an\nembedded preview session in an `iframe`.\n\nThis URL will expire after 60 seconds and the session will\nexpire after 60 minutes.\n\nNot all file types are supported for these embed URLs. Box Embed\nis not optimized for mobile browsers and should not be used in web\nexperiences designed for mobile devices. Many UI elements, like\nthe **download** and **print** options might not show in mobile\nbrowsers."
                },
                {}
              ]
            },
            "watermark_info": {
              "allOf": [
                {
                  "type": "object",
                  "description": "Details about the watermark applied to this item",
                  "properties": {
                    "is_watermarked": {
                      "type": "boolean",
                      "description": "Specifies if this item has a watermark applied."
                    }
                  }
                },
                {
                  "description": "Details about the watermark applied to this folder"
                },
                {}
              ]
            },
            "allowed_invitee_roles": {
              "type": "array",
              "description": "A list of the types of roles that user can be invited at\nwhen sharing this file.",
              "items": {
                "type": "string",
                "enum": [
                  "editor",
                  "viewer",
                  "previewer",
                  "uploader",
                  "previewer uploader",
                  "viewer uploader",
                  "co-owner"
                ]
              }
            },
            "is_externally_owned": {
              "type": "boolean",
              "description": "Specifies if this folder is owned by a user outside of the\nauthenticated enterprise."
            },
            "has_collaborations": {
              "type": "boolean",
              "description": "Specifies if this folder has any other collaborators."
            },
            "metadata": {
              "type": "object",
              "description": "A list of key-value pairs of metadata objects within their\nscopes.\n\nTo access the metadata for a file, first use the\nMetadata-endpoints to determine\nthe metadata templates available to your enterprise.\n\nThen use the `GET /files/:id` endpoint with\nthe `fields` query parameter to get the metadata by ID.\n\nThe ID for a metadata template will be in the format\n`metadata.<scope>.<templatename>`, for example\n`metadata.global.properties`.",
              "additionalProperties": {
                "type": "object",
                "description": "The name of the metadata template",
                "additionalProperties": {
                  "$ref": "#/definitions/Metadata"
                }
              }
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the file will automatically be deleted"
            },
            "representations": {
              "allOf": [
                {
                  "title": "Representations",
                  "description": "A list of file representations",
                  "type": "object",
                  "properties": {
                    "entries": {
                      "type": "array",
                      "description": "A list of files",
                      "items": {
                        "type": "object",
                        "description": "A file representation",
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "An object containing the URL that can be used to actually fetch\nthe representation.",
                            "properties": {
                              "url_template": {
                                "type": "string",
                                "description": "The download URL that can be used to fetch the representation.\nMake sure to make an authenticated API call to this endpoint.\n\nThis URL is a template and will require the `{+asset_path}` to\nbe replaced by a path. In general, for unpaged representations\nit can be replaced by an empty string.\n\nFor paged representations, replace the `{+asset_path}` with the\npage to request plus the extension for the file, for example\n`1.pdf`.\n\nWhen requesting the download URL the following additional\nquery params can be passed along.\n\n* `set_content_disposition_type` - Sets the\n`Content-Disposition` header in the API response with the\nspecified disposition type of either `inline` or `attachment`.\nIf not supplied, the `Content-Disposition` header is not\nincluded in the response.\n\n* `set_content_disposition_filename` - Allows the application to\n  define the representation's file name used in the\n  `Content-Disposition` header.  If not defined, the filename\n  is derived from the source file name in Box combined with the\n  extension of the representation."
                              }
                            }
                          },
                          "info": {
                            "type": "object",
                            "description": "An object containing the URL that can be used to fetch more info\non this representation.",
                            "properties": {
                              "url": {
                                "type": "string",
                                "description": "The API URL that can be used to get more info on this file\nrepresentation. Make sure to make an authenticated API call\nto this endpoint."
                              }
                            }
                          },
                          "properties": {
                            "type": "object",
                            "description": "An object containing the size and type of this presentation.",
                            "properties": {
                              "dimensions": {
                                "type": "string",
                                "format": "<width>x<height>",
                                "description": "The width by height size of this representation in pixels."
                              },
                              "paged": {
                                "type": "boolean",
                                "description": "Indicates if the representation is build up out of multiple\npages."
                              },
                              "thumb": {
                                "type": "boolean",
                                "description": "Indicates if the representation can be used as a thumbnail of\nthe file."
                              }
                            }
                          },
                          "representation": {
                            "type": "string",
                            "description": "Indicates the file type of the returned representation."
                          },
                          "status": {
                            "type": "object",
                            "description": "An object containing the status of this representation.",
                            "properties": {
                              "state": {
                                "type": "string",
                                "enum": [
                                  "success",
                                  "viewable",
                                  "pending",
                                  "none"
                                ],
                                "description": "The status of the representation.\n\n* `success` defines the representation as ready to be viewed.\n* `viewable` defines a video to be ready for viewing.\n* `pending` defines the representation as to be generated. Retry\n  this endpoint to re-check the status.\n* `none` defines that the representation will be created when\n  requested. Request the URL defined in the `info` object to\n  trigger this generation."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "description": "A list of representations for a file that can be used to\ndisplay a placeholder of the file in your application. By default\nthis returns all representations and we recommend using the\n`X-Rep-Hints` header to further customize the desired\nrepresentations."
                },
                {}
              ]
            }
          }
        }
      ]
    },
    "ClientError": {
      "title": "Client error",
      "description": "A generic error",
      "properties": {
        "type": {
          "description": "`error`",
          "type": "string",
          "enum": [
            "error"
          ]
        },
        "status": {
          "description": "The HTTP status of the response.",
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "description": "A Box-specific error code",
          "type": "string",
          "enum": [
            "created",
            "accepted",
            "no_content",
            "redirect",
            "not_modified",
            "bad_request",
            "unauthorized",
            "forbidden",
            "not_found",
            "method_not_allowed",
            "conflict",
            "precondition_failed",
            "too_many_requests",
            "internal_server_error",
            "unavailable",
            "item_name_invalid"
          ]
        },
        "help_url": {
          "description": "A URL that links to more information about why this error occurred.",
          "type": "string"
        },
        "message": {
          "description": "A short message describing the error.",
          "type": "string"
        },
        "request_id": {
          "description": "A unique identifier for this response, which can be used\nwhen contacting Box support.",
          "type": "string"
        }
      }
    },
    "UploadUrl": {
      "title": "Upload URL",
      "x-box-tag": "uploads",
      "x-box-reference-category": "uploads",
      "description": "The details for the upload session for the file.",
      "properties": {
        "upload_url": {
          "type": "string",
          "description": "A URL for an upload session that can be used to upload\nthe file."
        },
        "upload_token": {
          "type": "string",
          "description": "An optional access token to use to upload the file"
        }
      }
    },
    "ConflictError": {
      "title": "Conflict error",
      "x-box-tag": "uploads",
      "x-box-reference-category": "uploads",
      "description": "The error that occurs when a file can not be created due\nto a conflict.",
      "allOf": [
        {
          "$ref": "#/definitions/ClientError"
        },
        {
          "properties": {
            "context_info": {
              "type": "object",
              "properties": {
                "conflicts": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/File--Mini"
                    },
                    {
                      "properties": {
                        "sha1": {
                          "type": "string",
                          "description": "The SHA1 hash of the file."
                        },
                        "file_version": {
                          "$ref": "#/definitions/FileVersion--Mini"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "Collaborations": {
      "title": "Collaborations",
      "x-box-tag": "user_collaborations",
      "x-box-reference-category": "user_collaborations",
      "description": "A list of collaborations",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collaboration"
              }
            }
          }
        }
      ]
    },
    "Comments": {
      "title": "Comments",
      "x-box-tag": "comments",
      "x-box-reference-category": "comments",
      "description": "A list of comments",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        }
      ]
    },
    "Tasks": {
      "title": "Tasks",
      "x-box-tag": "tasks",
      "x-box-reference-category": "tasks",
      "description": "A list of tasks",
      "properties": {
        "total_count": {
          "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      }
    },
    "FileVersions": {
      "title": "File versions",
      "x-box-tag": "file_versions",
      "x-box-reference-category": "file_versions",
      "description": "A list of file versions",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileVersion"
              }
            }
          }
        }
      ]
    },
    "FileVersion": {
      "title": "File version",
      "x-box-tag": "file_versions",
      "x-box-reference-category": "file_versions",
      "description": "A standard representation of a file version",
      "allOf": [
        {
          "$ref": "#/definitions/FileVersion--Mini"
        },
        {},
        {
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the file version"
            },
            "size": {
              "type": "integer",
              "format": "int64",
              "description": "Size of the file version in bytes"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the file version object was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the file version object was last updated"
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last updated the file version"
                },
                {}
              ]
            },
            "trashed_at": {
              "type": "string",
              "description": "When the file version object was trashed.",
              "format": "date-time"
            },
            "trashed_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who trashed the file version"
                },
                {}
              ]
            },
            "restored_at": {
              "type": "string",
              "description": "When the file version was restored from the trash.",
              "format": "date-time"
            },
            "restored_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who restored the file version from the trash."
                },
                {}
              ]
            },
            "purged_at": {
              "type": "string",
              "description": "When the file version object will be permanently deleted.",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "Metadatas": {
      "title": "Metadata instances",
      "x-box-tag": "file_metadata",
      "x-box-reference-category": "file_metadata",
      "description": "A list of metadata instances that have been applied to a file or folder.",
      "properties": {
        "entries": {
          "type": "array",
          "description": "A list of metadata instances, as applied to this file or folder.",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "limit": {
          "description": "The limit that was used for this page of results.",
          "type": "integer"
        }
      }
    },
    "Metadata": {
      "title": "Metadata instance",
      "description": "A piece of metadata as specified by a metadata template and\napplied to a file or folder.",
      "x-box-tag": "file_metadata",
      "x-box-reference-category": "file_metadata",
      "type": "object",
      "properties": {
        "$canEdit": {
          "type": "boolean",
          "description": "Whether the user can edit this metadata"
        },
        "$id": {
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "description": "A UUID to identify the metadata object"
        },
        "$parent": {
          "type": "string",
          "description": "An ID for the parent folder"
        },
        "$scope": {
          "type": "string",
          "description": "An ID for the scope in which this template\nhas been applied"
        },
        "$template": {
          "type": "string",
          "description": "The name of the template"
        },
        "$type": {
          "type": "string",
          "description": "A unique identifier for the \"type\" of this instance. This is an internal\nsystem property and should not be used by a client application."
        },
        "$typeVersion": {
          "type": "integer",
          "description": "The last-known version of the template of the object. This is an internal\nsystem property and should not be used by a client application."
        },
        "$version": {
          "type": "integer",
          "description": "The version of the metadata object. Starts at 0 and increases every time\na user-defined property is modified."
        }
      },
      "additionalProperties": {
        "type": "string",
        "x-box-example-key": "name"
      }
    },
    "Watermark": {
      "title": "Watermark",
      "x-box-tag": "file_watermarks",
      "x-box-reference-category": "file_watermarks",
      "description": "A watermark is a semi-transparent overlay on an embedded file\npreview that displays a viewer's email address or user ID\nand the time of access over a file's content",
      "properties": {
        "watermark": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this watermark was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this task was modified"
            }
          }
        }
      }
    },
    "Folder": {
      "title": "Folder",
      "description": "A full representation of a folder, as can be returned from any\nfolder API endpoints by default",
      "x-box-tag": "folders",
      "x-box-reference-category": "folders",
      "allOf": [
        {
          "$ref": "#/definitions/Folder--Standard"
        },
        {},
        {
          "properties": {
            "sync_state": {
              "allOf": [
                {
                  "type": "string",
                  "description": "Specifies whether a folder should be synced to a\nuser's device or not. This is used by Box Sync\n(discontinued) and is not used by Box Drive.",
                  "enum": [
                    "synced",
                    "not_synced",
                    "partially_synced"
                  ]
                },
                {}
              ]
            },
            "has_collaborations": {
              "type": "boolean",
              "description": "Specifies if this folder has any other collaborators."
            },
            "permissions": {
              "allOf": [
                {
                  "type": "object",
                  "description": "The permissions that the authenticated user has for a folder.",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The permissions that the authenticated user has for an item.",
                      "properties": {
                        "can_delete": {
                          "type": "boolean",
                          "description": "Specifies if the user can delete this item"
                        },
                        "can_download": {
                          "type": "boolean",
                          "description": "Specifies if the user can download this item"
                        },
                        "can_invite_collaborator": {
                          "type": "boolean",
                          "description": "Specifies if the user can invite collaborators to the item"
                        },
                        "can_rename": {
                          "type": "boolean",
                          "description": "Specifies if the user can rename this item"
                        },
                        "can_set_share_access": {
                          "type": "boolean",
                          "description": "Specifies if the user can manage shared links for\nthis item"
                        },
                        "can_share": {
                          "type": "boolean",
                          "description": "Specifies if the user can invite new collaborators to this item"
                        }
                      }
                    },
                    {
                      "properties": {
                        "can_upload": {
                          "type": "boolean",
                          "description": "Specifies if the user can upload into this folder."
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "Describes the permissions that the current user has\nfor this folder"
                },
                {},
                {}
              ]
            },
            "tags": {
              "allOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100,
                  "description": "The tags for this item. These tags are shown in\nthe Box web app and mobile apps next to an item.\n\nTo add or remove a tag, retrieve the item's current tags,\nmodify them, and then update this field.\n\nThere is a limit of 100 tags per item, and 10,000\nunique tags per enterprise."
                },
                {},
                {}
              ]
            },
            "can_non_owners_invite": {
              "allOf": [
                {
                  "type": "boolean",
                  "description": "Specifies if users who are not the owner\nof the folder can invite new collaborators to the folder."
                },
                {},
                {}
              ]
            },
            "is_externally_owned": {
              "type": "boolean",
              "description": "Specifies if this folder is owned by a user outside of the\nauthenticated enterprise."
            },
            "is_collaboration_restricted_to_enterprise": {
              "allOf": [
                {
                  "type": "boolean",
                  "description": "Specifies if new invites to this folder are restricted to users\nwithin the enterprise. This does not affect existing\ncollaborations."
                },
                {},
                {}
              ]
            },
            "allowed_shared_link_access_levels": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "open",
                  "company",
                  "collaborators"
                ]
              },
              "description": "A list of access levels that are available\nfor this folder.\n\nFor some folders, like the root folder, this will always\nbe an empty list as sharing is not allowed at that level."
            },
            "allowed_invitee_roles": {
              "type": "array",
              "description": "A list of the types of roles that user can be invited at\nwhen sharing this folder.",
              "items": {
                "type": "string",
                "enum": [
                  "editor",
                  "viewer",
                  "previewer",
                  "uploader",
                  "previewer uploader",
                  "viewer uploader",
                  "co-owner"
                ]
              }
            },
            "watermark_info": {
              "allOf": [
                {
                  "type": "object",
                  "description": "Details about the watermark applied to this item",
                  "properties": {
                    "is_watermarked": {
                      "type": "boolean",
                      "description": "Specifies if this item has a watermark applied."
                    }
                  }
                },
                {
                  "description": "Details about the watermark applied to this folder"
                },
                {},
                {}
              ]
            },
            "can_non_owners_view_collaborators": {
              "type": "boolean",
              "description": "Specifies if collaborators who are not owners\nof this folder are restricted from viewing other\ncollaborations on this folder.\n\nIt also restricts non-owners from inviting new\ncollaborators."
            }
          }
        }
      ]
    },
    "Items": {
      "title": "Items",
      "x-box-tag": "folders",
      "x-box-reference-category": "folders",
      "description": "A list of files, folders, and web links in\ntheir mini representation.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "description": "The items in this collection.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/File--Mini"
              }
            }
          }
        }
      ]
    },
    "MetadataTemplates": {
      "title": "Metadata templates",
      "x-box-tag": "metadata_templates",
      "x-box-reference-category": "metadata_templates",
      "description": "A list of metadata templates",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataTemplate"
              }
            }
          }
        }
      ]
    },
    "MetadataTemplate": {
      "title": "Metadata template",
      "x-box-tag": "metadata_templates",
      "x-box-reference-category": "metadata_templates",
      "description": "A template for metadata that can be applied to files and folders",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the metadata template."
        },
        "type": {
          "type": "string",
          "description": "`metadata_template`",
          "enum": [
            "metadata_template"
          ]
        },
        "scope": {
          "type": "string",
          "description": "The scope of the metadata template can either be `global` or\n`enterprise_*`. The `global` scope is used for templates that are\navailable to any Box enterprise. The `enterprise_*` scope represents\ntemplates that have been created within a specific enterprise, where `*`\nwill be the ID of that enterprise."
        },
        "templateKey": {
          "type": "string",
          "description": "A unique identifier for the template. This identifier is unique across\nthe `scope` of the enterprise to which the metadata template is being\napplied, yet is not necessarily unique across different enterprises.",
          "maxLength": 64,
          "pattern": "^[a-zA-Z_][-a-zA-Z0-9_]*$"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the template. This can be seen in the Box web app\nand mobile apps.",
          "maxLength": 4096
        },
        "hidden": {
          "type": "boolean",
          "description": "Defines if this template is visible in the Box web app UI, or if\nit is purely intended for usage through the API."
        },
        "fields": {
          "type": "array",
          "description": "An ordered list of template fields which are part of the template. Each\nfield can be a regular text field, date field, number field, as well as a\nsingle or multi-select list.",
          "items": {
            "type": "object",
            "description": "A field within a metadata template. Fields can be a basic text, date, or\nnumber field, or a list of options.",
            "allOf": [
              {
                "title": "Metadata Field (Write)",
                "description": "A field within a metadata template. Fields can be a basic text, date, or\nnumber field, or a list of options.",
                "required": [
                  "type",
                  "key",
                  "displayName"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of field. The basic fields are a `string` field for text, a\n`float` field for numbers, and a `date` fields to present the user with a\ndate-time picker.\n\nAdditionally, metadata templates support an `enum` field for a basic list\nof items, and ` multiSelect` field for a similar list of items where the\nuser can select more than one value.",
                    "enum": [
                      "string",
                      "float",
                      "date",
                      "enum",
                      "multiSelect"
                    ]
                  },
                  "key": {
                    "type": "string",
                    "description": "A unique identifier for the field. The identifier must\nbe unique within the template to which it belongs.",
                    "maxLength": 256
                  },
                  "displayName": {
                    "type": "string",
                    "description": "The display name of the field as it is shown to the user in the web and\nmobile apps.",
                    "maxLength": 4096
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the field. This is not shown to the user.",
                    "maxLength": 4096
                  },
                  "hidden": {
                    "type": "boolean",
                    "description": "Whether this field is hidden in the UI for the user and can only be set\nthrough the API instead."
                  },
                  "options": {
                    "description": "A list of options for this field. This is used in combination with the\n`enum` and `multiSelect` field types.",
                    "type": "array",
                    "items": {
                      "title": "Metadata Option (Write)",
                      "type": "object",
                      "description": "An option for a Metadata Template Field.\n\nOptions only need to be provided for fields of type `enum` and `multiSelect`.\nOptions represent the value(s) a user can select for the field either through\nthe UI or through the API.",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "The text value of the option. This represents both the display name of the\noption and the internal key used when updating templates.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique ID of the metadata template field."
                  },
                  "options": {
                    "description": "A list of options for this field. This is used in combination\nwith the `enum` and `multiSelect` field types.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "An option for a Metadata Template Field.\n\nOptions are only present for fields of type `enum` and\n`multiSelect`. Options represent the value(s) a user can\nselect for the field either through the UI or through the API.",
                      "allOf": [
                        {
                          "title": "Metadata Option (Write)",
                          "type": "object",
                          "description": "An option for a Metadata Template Field.\n\nOptions only need to be provided for fields of type `enum` and `multiSelect`.\nOptions represent the value(s) a user can select for the field either through\nthe UI or through the API.",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The text value of the option. This represents both the display name of the\noption and the internal key used when updating templates.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The internal unique identifier of the the option."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        },
        "copyInstanceOnItemCopy": {
          "type": "boolean",
          "description": "Whether or not to copy the metadata for a file or folder when an it is\ncopied."
        }
      }
    },
    "MetadataCascadePolicies": {
      "title": "Metadata cascade policies",
      "x-box-tag": "metadata_cascade_policies",
      "x-box-reference-category": "metadata_cascade_policies",
      "description": "A list of metadata cascade policies.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataCascadePolicy"
              }
            }
          }
        }
      ]
    },
    "MetadataCascadePolicy": {
      "title": "Metadata cascade policy",
      "x-box-tag": "metadata_cascade_policies",
      "x-box-reference-category": "metadata_cascade_policies",
      "description": "A metadata cascade policy automatically applies a metadata template instance\nto all the files and folders within the targeted folder.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the metadata cascade policy object"
        },
        "type": {
          "type": "string",
          "description": "`metadata_cascade_policy`",
          "enum": [
            "metadata_cascade_policy"
          ]
        },
        "owner_enterprise": {
          "type": "object",
          "description": "The enterprise that owns this policy.",
          "properties": {
            "type": {
              "type": "string",
              "description": "`enterprise`",
              "enum": [
                "enterprise"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the enterprise that owns the policy."
            }
          }
        },
        "parent": {
          "type": "object",
          "description": "Represent the folder the policy is applied to.",
          "properties": {
            "type": {
              "type": "string",
              "description": "`folder`",
              "enum": [
                "folder"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the folder the policy is applied to."
            }
          }
        },
        "scope": {
          "type": "string",
          "description": "The scope of the of the template that is cascaded down to the folder's\nchildren.",
          "enum": [
            "global",
            "enterprise_*"
          ]
        },
        "templateKey": {
          "type": "string",
          "description": "The key of the of the template that is cascaded down to the folder's\nchildren."
        }
      }
    },
    "Comment": {
      "title": "Comment",
      "x-box-tag": "comments",
      "x-box-reference-category": "comments",
      "description": "Comments are messages created on files. Comments\ncan be made independently or created as responses to other\ncomments",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Comment--Standard"
        },
        {},
        {
          "properties": {
            "tagged_message": {
              "type": "string",
              "description": "The string representing the comment text with\n@mentions included. @mention format is @[id:username]\nwhere `id` is user's Box ID and `username` is\ntheir display name."
            }
          }
        }
      ]
    },
    "Collaboration": {
      "title": "Collaboration",
      "description": "Collaborations define access permissions for users and groups to files and\nfolders, similar to access control lists. A collaboration object grants a\nuser or group access to a file or folder with permissions defined by a\nspecific role.",
      "x-box-tag": "user_collaborations",
      "x-box-reference-category": "user_collaborations",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`collaboration`",
              "enum": [
                "collaboration"
              ]
            },
            "item": {
              "allOf": [
                {
                  "$ref": "#/definitions/Item"
                },
                {
                  "description": "The file or folder to which access is granted. The field is\n`null` when the collaboration `status` is `pending`."
                }
              ]
            },
            "accessible_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user or group that is granted access"
                }
              ]
            },
            "invite_email": {
              "type": "string",
              "description": "The email address used to invite an unregistered collaborator, if\nthey are not a registered user."
            },
            "role": {
              "type": "string",
              "enum": [
                "editor",
                "viewer",
                "previewer",
                "uploader",
                "previewer uploader",
                "viewer uploader",
                "co-owner",
                "owner"
              ],
              "description": "The level of access granted."
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the collaboration will expire, or `null` if no expiration\ndate is set."
            },
            "status": {
              "type": "string",
              "enum": [
                "accepted",
                "pending",
                "rejected"
              ],
              "description": "The status of the collaboration invitation."
            },
            "acknowledged_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the `status` of the collaboration object changed to\n`accepted` or `rejected`"
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created the collaboration object"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the collaboration object was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the collaboration object was last modified"
            },
            "acceptance_requirements_status": {
              "type": "object",
              "properties": {
                "terms_of_service_requirement": {
                  "type": "object",
                  "properties": {
                    "is_accepted": {
                      "type": "boolean",
                      "description": "Whether or not the terms of service have been accepted.  The\nfield is `null` when there is no terms of service required."
                    },
                    "terms_of_service": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TermsOfService--Mini"
                        },
                        {
                          "description": "The terms of service that must be accepted before the\ncollaboration can be accepted. The field is `null` when\nthere is no terms of service required."
                        }
                      ]
                    }
                  }
                },
                "strong_password_requirement": {
                  "type": "object",
                  "properties": {
                    "enterprise_has_strong_password_required_for_external_users": {
                      "type": "boolean",
                      "description": "Whether or not the enterprise that owns the content requires\na strong password to collaborate on the content."
                    },
                    "user_has_strong_password": {
                      "type": "boolean",
                      "description": "Whether or not the user has a strong password set for their\naccount. The field is `null` when a strong password is not\nrequired."
                    }
                  }
                },
                "two_factor_authentication_requirement": {
                  "type": "object",
                  "properties": {
                    "enterprise_has_two_factor_auth_enabled": {
                      "type": "boolean",
                      "description": "Whether or not the enterprise that owns the content requires\ntwo-factor authentication to be enabled in order to\ncollaborate on the content."
                    },
                    "user_has_two_factor_authentication_enabled": {
                      "type": "boolean",
                      "description": "Whether or not the user has two-factor authentication\nenabled. The field is `null` when two-factor\nauthentication is not required."
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Task": {
      "title": "Task",
      "x-box-tag": "tasks",
      "x-box-reference-category": "tasks",
      "description": "A task allows for file-centric workflows within Box. Users can\ncreate tasks on files and assign them to other users for them to complete the\ntasks.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`task`",
              "enum": [
                "task"
              ]
            },
            "item": {
              "allOf": [
                {
                  "$ref": "#/definitions/File--Mini"
                },
                {
                  "description": "The file associated with the task"
                }
              ]
            },
            "due_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the task is due"
            },
            "action": {
              "type": "string",
              "description": "The type of task the task assignee will be prompted to\nperform.",
              "enum": [
                "review",
                "complete"
              ]
            },
            "message": {
              "type": "string",
              "description": "A message that will be included with the task"
            },
            "task_assignment_collection": {
              "allOf": [
                {
                  "$ref": "#/definitions/TaskAssignments"
                },
                {
                  "description": "A collection of task assignment objects\nassociated with the task"
                }
              ]
            },
            "is_completed": {
              "type": "boolean",
              "description": "Whether the task has been completed"
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created the task"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the task object was created"
            },
            "completion_rule": {
              "type": "string",
              "description": "Defines which assignees need to complete this task before the task\nis considered completed.\n\n* `all_assignees` requires all assignees to review or\napprove the the task in order for it to be considered completed.\n* `any_assignee` accepts any one assignee to review or\napprove the the task in order for it to be considered completed.",
              "enum": [
                "all_assignees",
                "any_assignee"
              ]
            }
          }
        }
      ]
    },
    "TaskAssignments": {
      "title": "Task assignments",
      "x-box-tag": "task_assignments",
      "x-box-reference-category": "task_assignments",
      "type": "object",
      "description": "A list of task assignments",
      "properties": {
        "total_count": {
          "description": "The total number of items in this collection.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAssignment"
          }
        }
      }
    },
    "TaskAssignment": {
      "title": "Task assignment",
      "x-box-tag": "task_assignments",
      "x-box-reference-category": "task_assignments",
      "description": "A task assignment defines which task is assigned to which user to complete.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`task_assignment`",
              "enum": [
                "task_assignment"
              ]
            },
            "item": {
              "allOf": [
                {
                  "$ref": "#/definitions/File--Mini"
                },
                {
                  "description": "The file that the task has been assigned to."
                }
              ]
            },
            "assigned_to": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user that the task has been assigned to."
                }
              ]
            },
            "message": {
              "type": "string",
              "description": "A message that will is included with the task\nassignment. This is visible to the assigned user in the web and mobile\nUI."
            },
            "completed_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date at which this task assignment was\ncompleted. This will be `null` if the task is not completed yet."
            },
            "assigned_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date at which this task was assigned to the user."
            },
            "reminded_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date at which the assigned user was reminded of this task\nassignment."
            },
            "resolution_state": {
              "type": "string",
              "description": "The current state of the assignment. The available states depend on\nthe `action` value of the task object.",
              "enum": [
                "completed",
                "incomplete",
                "approved",
                "rejected"
              ]
            },
            "assigned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who assigned this task."
                }
              ]
            }
          }
        }
      ]
    },
    "Item": {
      "title": "Item",
      "description": "A generic mini representation of a file, folder, user or enterprise",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "description": "The type of this item",
              "type": "string"
            },
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {},
                {}
              ]
            },
            "etag": {
              "type": "string",
              "description": "The entity tag of this item. Used with If-Match headers.\nMay be `null` for some folders such as root or trash."
            },
            "name": {
              "type": "string",
              "description": "The name of the item."
            }
          }
        }
      ]
    },
    "WebLink": {
      "title": "Web link",
      "x-box-tag": "web_links",
      "x-box-reference-category": "web_links",
      "description": "Web links are objects that point to URLs. These objects\nare also known as bookmarks within the Box web application.\n\nWeb link objects are treated similarly to file objects,\nthey will also support most actions that apply to regular files.",
      "allOf": [
        {
          "$ref": "#/definitions/WebLink--Mini"
        },
        {},
        {
          "properties": {
            "parent": {
              "allOf": [
                {
                  "$ref": "#/definitions/Folder--Mini"
                },
                {
                  "description": "The parent object the web link belongs to"
                },
                {}
              ]
            },
            "description": {
              "type": "string",
              "description": "The description accompanying the web link. This is\nvisible within the Box web application."
            },
            "path_collection": {
              "type": "array",
              "description": "The path of folders to this link, starting at the root",
              "items": {
                "$ref": "#/definitions/Folder--Mini"
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was created on Box’s servers."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last updated on the Box\nservers."
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last moved to the trash."
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file will be permanently deleted."
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created this web link"
                },
                {}
              ]
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last modified this web link"
                },
                {}
              ]
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who owns this web link"
                },
                {}
              ]
            },
            "shared_link": {
              "allOf": [
                {
                  "title": "Shared link",
                  "description": "Shared links provide direct, read-only access to files or folder on Box.\n\nShared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriately authenticated Box users.",
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "url",
                      "description": "The URL that can be used to access the item on Box.\n\nThis URL will display the item in Box's preview UI where the file\ncan be downloaded if allowed.\n\nThis URL will continue to work even when a custom `vanity_url`\nhas been set for this shared link."
                    },
                    "download_url": {
                      "type": "string",
                      "format": "url",
                      "x-box-premium-feature": true,
                      "description": "A URL that can be used to download the file. This URL can be used in\na browser to download the file. This URL includes the file\nextension so that the file will be saved with the right file type.\n\nThis property will be `null` for folders."
                    },
                    "vanity_url": {
                      "type": "string",
                      "format": "url",
                      "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application."
                    },
                    "access": {
                      "type": "string",
                      "description": "The access level for this shared link.\n\n* `open` - provides access to this item to anyone with this link\n* `company` - only provides access to this item to people the same company\n* `collaborators` - only provides access to this item to people who are\n   collaborators on this item\n\nIf this field is omitted when creating the shared link, the access level\nwill be set to the default access level specified by the enterprise admin.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_access": {
                      "type": "string",
                      "description": "The effective access level for the shared link. This can be a more\nrestrictive access level than the value in the `access` field when the\nenterprise settings restrict the allowed access levels.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_permission": {
                      "type": "string",
                      "description": "The effective permissions for this shared link.",
                      "enum": [
                        "can_download",
                        "can_preview"
                      ]
                    },
                    "unshared_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when this link will be unshared. This field can only be\nset by users with paid accounts."
                    },
                    "is_password_enabled": {
                      "type": "boolean",
                      "description": "Defines if the shared link requires a password to access the item."
                    },
                    "permissions": {
                      "type": "object",
                      "description": "Defines if this link allows a user to preview and download an item.",
                      "properties": {
                        "can_download": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be downloaded. For\nshared links on folders, this also applies to any items in the folder.\n\nThis value can be set to `true` when the effective access level is\nset to `open` or `company`, not `collaborators`."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be previewed.\n\nThis value is always `true`. For shared links on folders this also\napplies to any items in the folder."
                        }
                      }
                    },
                    "download_count": {
                      "type": "integer",
                      "description": "The number of times this item has been downloaded."
                    },
                    "preview_count": {
                      "type": "integer",
                      "description": "The number of times this item has been previewed."
                    }
                  }
                },
                {
                  "description": "The shared link object for this item. Will be\n`null` if no shared link has been created."
                },
                {},
                {}
              ]
            },
            "item_status": {
              "type": "string",
              "enum": [
                "active",
                "trashed",
                "deleted"
              ],
              "description": "Whether this item is deleted or not. Values include `active`,\n`trashed` if the file has been moved to the trash, and `deleted` if\nthe file has been permanently deleted"
            }
          }
        }
      ]
    },
    "Users": {
      "title": "Users",
      "x-box-tag": "users",
      "x-box-reference-category": "users",
      "description": "A list of users.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      ]
    },
    "User": {
      "title": "User",
      "description": "A full representation of a user, as can be returned from any\nuser API endpoint.",
      "x-box-tag": "users",
      "x-box-reference-category": "users",
      "allOf": [
        {
          "$ref": "#/definitions/User--Standard"
        },
        {},
        {
          "properties": {
            "role": {
              "type": "string",
              "enum": [
                "admin",
                "coadmin",
                "user"
              ],
              "description": "The user’s enterprise role"
            },
            "tracking_codes": {
              "type": "array",
              "description": "Tracking codes allow an admin to generate reports from the\nadmin console and assign an attribute to a specific group\nof users. This setting must be enabled for an enterprise\nbefore it can be used.",
              "items": {
                "type": "object",
                "description": "Custom tracking code for a user.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "`tracking_code`",
                    "enum": [
                      "tracking_code"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the tracking code, which must be preconfigured in\nthe Admin Console"
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the tracking code"
                  }
                }
              }
            },
            "can_see_managed_users": {
              "type": "boolean",
              "description": "Whether the user can see other enterprise users in their contact list"
            },
            "is_sync_enabled": {
              "type": "boolean",
              "description": "Whether the user can use Box Sync"
            },
            "is_external_collab_restricted": {
              "type": "boolean",
              "description": "Whether the user is allowed to collaborate with users outside their\nenterprise"
            },
            "is_exempt_from_device_limits": {
              "type": "boolean",
              "description": "Whether to exempt the user from Enterprise device limits"
            },
            "is_exempt_from_login_verification": {
              "type": "boolean",
              "description": "Whether the user must use two-factor authentication"
            },
            "enterprise": {
              "allOf": [
                {
                  "title": "Enterprise",
                  "type": "object",
                  "description": "A representation of a Box enterprise",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`enterprise`",
                          "enum": [
                            "enterprise"
                          ]
                        },
                        "name": {
                          "description": "The name of the enterprise",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "Representation of the user’s enterprise"
                },
                {}
              ]
            },
            "my_tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags for all files and folders owned by the user. Values returned\nwill only contain tags that were set by the requester."
            },
            "hostname": {
              "type": "string",
              "description": "The root (protocol, subdomain, domain) of any links that need to be\ngenerated for the user"
            },
            "is_platform_access_only": {
              "type": "boolean",
              "description": "Whether the user is an App User"
            },
            "external_app_user_id": {
              "type": "string",
              "description": "An external identifier for an app user, which can be used to look up\nthe user. This can be used to tie user IDs from external identity\nproviders to Box users."
            },
            "notification_email": {
              "type": "object",
              "description": "An alternate notification email address to which email\nnotifications are sent. When it's confirmed, this will be\nthe email address to which notifications are sent instead of\nto the primary email address.",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email address to send the notifications to."
                },
                "is_confirmed": {
                  "type": "boolean",
                  "description": "Specifies if this email address has been confirmed."
                }
              }
            }
          }
        }
      ]
    },
    "EmailAliases": {
      "title": "Email aliases",
      "x-box-tag": "email_aliases",
      "x-box-reference-category": "email_aliases",
      "description": "A list of email aliases",
      "properties": {
        "total_count": {
          "description": "The number of email aliases.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailAlias"
          }
        }
      }
    },
    "EmailAlias": {
      "title": "Email alias",
      "x-box-tag": "email_aliases",
      "x-box-reference-category": "email_aliases",
      "description": "An email alias for a user.",
      "type": "object",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`email_alias`",
              "enum": [
                "email_alias"
              ]
            },
            "email": {
              "type": "string",
              "description": "The email address"
            },
            "is_confirmed": {
              "type": "boolean",
              "description": "Whether the email address has been confirmed"
            }
          }
        }
      ]
    },
    "GroupMemberships": {
      "title": "Group memberships",
      "x-box-tag": "memberships",
      "x-box-reference-category": "memberships",
      "description": "A list of group memberships.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupMembership"
              }
            }
          }
        }
      ]
    },
    "Invite": {
      "title": "Invite",
      "x-box-tag": "invites",
      "x-box-reference-category": "invites",
      "description": "An invite for a user to an enterprise.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`invite`",
              "enum": [
                "invite"
              ]
            },
            "invited_to": {
              "title": "Enterprise",
              "type": "object",
              "description": "A representation of a Box enterprise",
              "allOf": [
                {
                  "title": "Reference",
                  "description": "The bare basic reference for an object",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier for this object"
                    }
                  }
                },
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "`enterprise`",
                      "enum": [
                        "enterprise"
                      ]
                    },
                    "name": {
                      "description": "The name of the enterprise",
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "actionable_by": {
              "$ref": "#/definitions/User--Mini"
            },
            "invited_by": {
              "$ref": "#/definitions/User--Mini"
            },
            "status": {
              "description": "The status of the invite",
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the invite was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the invite was modified."
            }
          }
        }
      ]
    },
    "Groups": {
      "title": "Groups",
      "x-box-tag": "groups",
      "x-box-reference-category": "groups",
      "description": "A list of groups.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          }
        }
      ]
    },
    "Group": {
      "title": "Group",
      "x-box-tag": "groups",
      "x-box-reference-category": "groups",
      "description": "Groups contain a set of users, and can be used in place of\nusers in some operations, such as collaborations.",
      "allOf": [
        {
          "$ref": "#/definitions/Group--Standard"
        },
        {},
        {
          "properties": {
            "provenance": {
              "type": "string",
              "description": "Keeps track of which external source this group is\ncoming from (e.g. \"Active Directory\", \"Google Groups\",\n\"Facebook Groups\").  Setting this will\nalso prevent Box users from editing the group name\nand its members directly via the Box web application.\nThis is desirable for one-way syncing of groups.",
              "maxLength": 255
            },
            "external_sync_identifier": {
              "type": "string",
              "description": "An arbitrary identifier that can be used by\nexternal group sync tools to link this Box Group to\nan external group. Example values of this field\ncould be an Active Directory Object ID or a Google\nGroup ID.  We recommend you use of this field in\norder to avoid issues when group names are updated in\neither Box or external systems."
            },
            "description": {
              "type": "string",
              "description": "Human readable description of the group.",
              "maxLength": 255
            },
            "invitability_level": {
              "type": "string",
              "description": "Specifies who can invite the group to collaborate\non folders (Create Collaboration).\n\nWhen set to `admins_only` the enterprise admin, co-admins,\nand the group's admin can invite the group.\n\nWhen set to `admins_and_members` all the admins listed\nabove and group members can invite the group.\n\nWhen set to `all_managed_users` all managed users in the\nenterprise can invite the group.",
              "enum": [
                "admins_only",
                "admins_and_members",
                "all_managed_users"
              ]
            },
            "member_viewability_level": {
              "type": "string",
              "description": "Specifies who can view the members of the group\n(Get Memberships for Group).\n\n* `admins_only` - the enterprise admin, co-admins, group's\n  group admin\n* `admins_and_members` - all admins and group members\n* `all_managed_users` - all managed users in the\n  enterprise",
              "enum": [
                "admins_only",
                "admins_and_members",
                "all_managed_users"
              ]
            }
          }
        }
      ]
    },
    "GroupMembership": {
      "title": "Group membership",
      "x-box-tag": "memberships",
      "x-box-reference-category": "memberships",
      "description": "Membership is used to signify that a user is part of a\ngroup.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`group_membership`",
              "enum": [
                "group_membership"
              ]
            },
            "user": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user that the membership applies to"
                }
              ]
            },
            "group": {
              "allOf": [
                {
                  "$ref": "#/definitions/Group--Mini"
                },
                {
                  "description": "The group that the membership applies to"
                }
              ]
            },
            "role": {
              "type": "string",
              "description": "The role of the user in the group.",
              "enum": [
                "member",
                "admin"
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time this membership was created."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time this membership was last modified."
            }
          }
        }
      ]
    },
    "Webhooks": {
      "title": "Webhooks",
      "x-box-tag": "webhooks",
      "x-box-reference-category": "webhooks",
      "description": "A list of webhooks.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Webhook"
              }
            }
          }
        }
      ]
    },
    "Webhook": {
      "title": "Webhook",
      "x-box-tag": "webhooks",
      "x-box-reference-category": "webhooks",
      "description": "Represents a configured webhook.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`webhook`",
              "enum": [
                "webhook"
              ]
            },
            "target": {
              "type": "object",
              "description": "The item that will trigger the webhook",
              "properties": {
                "id": {
                  "description": "The ID of the item to trigger a webhook",
                  "type": "string"
                },
                "type": {
                  "description": "The type of item to trigger a webhook",
                  "type": "string",
                  "enum": [
                    "file",
                    "folder"
                  ]
                }
              }
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created the webhook"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "A timestamp identifying the time that\nthe webhook was created."
            },
            "address": {
              "type": "string",
              "description": "The URL that is notified by this webhook"
            },
            "triggers": {
              "type": "array",
              "description": "An array of event names that this webhook is\nto be triggered for",
              "items": {
                "title": "Webhook Trigger",
                "type": "string",
                "description": "The event name that triggered this webhook",
                "enum": [
                  "FILE.UPLOADED",
                  "FILE.PREVIEWED",
                  "FILE.DOWNLOADED",
                  "FILE.TRASHED",
                  "FILE.DELETED",
                  "FILE.RESTORED",
                  "FILE.COPIED",
                  "FILE.MOVED",
                  "FILE.LOCKED",
                  "FILE.UNLOCKED",
                  "FILE.RENAMED",
                  "COMMENT.CREATED",
                  "COMMENT.UPDATED",
                  "COMMENT.DELETED",
                  "TASK_ASSIGNMENT.CREATED",
                  "TASK_ASSIGNMENT.UPDATED",
                  "METADATA_INSTANCE.CREATED",
                  "METADATA_INSTANCE.UPDATED",
                  "METADATA_INSTANCE.DELETED",
                  "FOLDER.CREATED",
                  "FOLDER.RENAMED",
                  "FOLDER.DOWNLOADED",
                  "FOLDER.RESTORED",
                  "FOLDER.DELETED",
                  "FOLDER.COPIED",
                  "FOLDER.MOVED",
                  "FOLDER.TRASHED",
                  "WEBHOOK.DELETED",
                  "COLLABORATION.CREATED",
                  "COLLABORATION.ACCEPTED",
                  "COLLABORATION.REJECTED",
                  "COLLABORATION.REMOVED",
                  "COLLABORATION.UPDATED",
                  "SHARED_LINK.DELETED",
                  "SHARED_LINK.CREATED",
                  "SHARED_LINK.UPDATED"
                ]
              }
            }
          }
        }
      ]
    },
    "RealtimeServers": {
      "title": "Real-time servers",
      "description": "A list of real-time servers that can\nbe used for long-polling.",
      "x-box-tag": "events",
      "x-box-reference-category": "events",
      "properties": {
        "chunk_size": {
          "description": "The number of items in this response.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealtimeServer"
          }
        }
      }
    },
    "Events": {
      "title": "Events",
      "x-box-tag": "events",
      "x-box-reference-category": "events",
      "description": "A list of event objects",
      "properties": {
        "chunk_size": {
          "description": "The number of events returned in this response.",
          "type": "integer",
          "format": "int64"
        },
        "next_stream_position": {
          "description": "The stream position of the start of the next page (chunk)\nof events.",
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "Collections": {
      "title": "Collections",
      "x-box-tag": "collections",
      "x-box-reference-category": "collections",
      "description": "A list of collections",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collection"
              }
            }
          }
        }
      ]
    },
    "RecentItems": {
      "title": "Recent items",
      "description": "A list of recent items.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecentItem"
              }
            }
          }
        }
      ]
    },
    "RetentionPolicies": {
      "title": "Retention policies",
      "x-box-tag": "retention_policies",
      "x-box-reference-category": "retention_policies",
      "description": "A list of retention policies",
      "properties": {
        "total_count": {
          "description": "The number of retention policies.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionPolicy--Mini"
          }
        }
      }
    },
    "RetentionPolicy": {
      "title": "Retention policy",
      "x-box-tag": "retention_policies",
      "x-box-reference-category": "retention_policies",
      "description": "A retention policy blocks permanent deletion of content\nfor a specified amount of time. Admins can create retention\npolicies and then later assign them to specific folders\nor their entire enterprise.  To use this feature, you must\nhave the manage retention policies scope enabled\nfor your API key via your application management console.",
      "allOf": [
        {
          "$ref": "#/definitions/RetentionPolicy--Mini"
        },
        {},
        {
          "properties": {
            "policy_type": {
              "type": "string",
              "description": "The type of the retention policy. A retention\npolicy type can either be `finite`, where a\nspecific amount of time to retain the content is known\nupfront, or `indefinite`, where the amount of time\nto retain the content is still unknown.",
              "enum": [
                "finite",
                "indefinite"
              ]
            },
            "status": {
              "type": "string",
              "description": "The status of the retention policy. The status of\na policy will be `active`, unless explicitly retired by an\nadministrator, in which case the status will be `retired`.\nOnce a policy has been retired, it cannot become\nactive again.",
              "enum": [
                "active",
                "retired"
              ]
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "A mini user object representing the user that\ncreated the retention policy"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the retention policy object was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the retention policy object was last modified"
            }
          }
        }
      ]
    },
    "RetentionPolicyAssignments": {
      "title": "Retention policy assignments",
      "x-box-tag": "retention_policy_assignments",
      "x-box-reference-category": "retention_policy_assignments",
      "description": "A list of retention policy assignments",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetentionPolicyAssignment"
              }
            }
          }
        }
      ]
    },
    "RetentionPolicyAssignment": {
      "title": "Retention policy assignment",
      "x-box-tag": "retention_policy_assignments",
      "x-box-reference-category": "retention_policy_assignments",
      "description": "The retention policy assignment endpoint provides a way\nfor admins to apply a retention policy on a per-folder\nbasis, or place a blanket policy over the entire\nenterprise.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`retention_policy_assignment`",
              "enum": [
                "retention_policy_assignment"
              ]
            },
            "retention_policy": {
              "allOf": [
                {
                  "$ref": "#/definitions/RetentionPolicy--Mini"
                },
                {
                  "description": "A mini retention policy object representing the\nretention policy that has been assigned to this content"
                }
              ]
            },
            "assigned_to": {
              "allOf": [
                {
                  "title": "Reference",
                  "description": "The bare basic reference for an object",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier for this object"
                    }
                  }
                },
                {
                  "description": "The `type` and `id` of the content that is under\nretention. The `type` can either be `folder` or `\nenterprise`."
                }
              ]
            },
            "assigned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "A mini user object representing the user that\ncreated the retention policy assignment object"
                }
              ]
            },
            "assigned_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the retention policy assignment object was\ncreated"
            }
          }
        }
      ]
    },
    "LegalHoldPolicies": {
      "title": "Legal hold policies",
      "x-box-tag": "legal_hold_policies",
      "x-box-reference-category": "legal_hold_policies",
      "description": "A list of legal hold policies.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LegalHoldPolicy"
              }
            }
          }
        }
      ]
    },
    "LegalHoldPolicy": {
      "title": "Legal hold policy",
      "x-box-tag": "legal_hold_policies",
      "x-box-reference-category": "legal_hold_policies",
      "description": "Legal Hold Policy information describes the basic\ncharacteristics of the Policy, such as name, description,\nand filter dates.",
      "allOf": [
        {
          "$ref": "#/definitions/LegalHoldPolicy--Mini"
        },
        {},
        {
          "properties": {
            "policy_name": {
              "type": "string",
              "description": "Name of the legal hold policy.",
              "maxLength": 254
            },
            "description": {
              "type": "string",
              "description": "Description of the legal hold policy. Optional\nproperty with a 500 character limit.",
              "maxLength": 500
            },
            "status": {
              "type": "string",
              "enum": [
                "active",
                "applying",
                "releasing",
                "released"
              ],
              "description": "* 'active' - the policy is not in a transition state\n* 'applying' - that the policy is in the process of\n  being applied\n* 'releasing' - that the process is in the process\n  of being released\n* 'released' - the policy is no longer active"
            },
            "assignment_counts": {
              "type": "object",
              "description": "Counts of assignments within this a legal hold policy by item type",
              "properties": {
                "user": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of users this policy is applied to"
                },
                "folder": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of folders this policy is applied to"
                },
                "file": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of files this policy is applied to"
                },
                "file_version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of file versions this policy is applied to"
                }
              }
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created the legal hold policy object"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal hold policy object was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal hold policy object was modified.\nDoes not update when assignments are added or removed."
            },
            "deleted_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the policy release request was sent. (Because\nit can take time for a policy to fully delete, this\nisn't quite the same time that the policy is fully deleted).\n\nIf `null`, the policy was not deleted."
            },
            "filter_started_at": {
              "type": "string",
              "format": "date-time",
              "description": "User-specified, optional date filter applies to\nCustodian assignments only"
            },
            "filter_ended_at": {
              "type": "string",
              "format": "date-time",
              "description": "User-specified, optional date filter applies to\nCustodian assignments only"
            },
            "release_notes": {
              "type": "string",
              "description": "Optional notes about why the policy was created.",
              "maxLength": 500
            }
          }
        }
      ]
    },
    "LegalHoldPolicyAssignments": {
      "title": "Legal hold policy assignments",
      "x-box-tag": "legal_hold_policy_assignments",
      "x-box-reference-category": "legal_hold_policy_assignments",
      "description": "A list of legal hold policies assignments.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LegalHoldPolicyAssignment"
              }
            }
          }
        }
      ]
    },
    "LegalHoldPolicyAssignment": {
      "title": "Legal hold policy assignment",
      "x-box-tag": "legal_hold_policy_assignments",
      "x-box-reference-category": "legal_hold_policy_assignments",
      "description": "Legal Hold Assignments are used to assign Legal Hold\nPolicies to Users, Folders, Files, or File Versions.\n\nCreating a Legal Hold Assignment puts a hold\non the File-Versions that belong to the Assignment's\n'apply-to' entity.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`legal_hold_policy_assignment`",
              "enum": [
                "legal_hold_policy_assignment"
              ]
            },
            "legal_hold_policy": {
              "allOf": [
                {
                  "$ref": "#/definitions/LegalHoldPolicy--Mini"
                },
                {
                  "description": "The policy that the legal hold policy assignment\nis part of"
                }
              ]
            },
            "assigned_to": {
              "allOf": [
                {
                  "$ref": "#/definitions/Item"
                },
                {
                  "description": "The item that the the legal hold policy\nis assigned to. Includes type and ID."
                }
              ]
            },
            "assigned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created the legal hold policy\nassignment"
                }
              ]
            },
            "assigned_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal hold policy assignment object was\ncreated"
            },
            "deleted_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the assignment release request was sent.\n(Because it can take time for an assignment to fully\ndelete, this isn't quite the same time that the\nassignment is fully deleted). If null, Assignment\nwas not deleted."
            }
          }
        }
      ]
    },
    "FileVersionLegalHolds": {
      "title": "File version legal holds",
      "x-box-tag": "file_version_legal_holds",
      "x-box-reference-category": "file_version_legal_holds",
      "description": "A list of file version legal holds.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileVersionLegalHold"
              }
            }
          }
        }
      ]
    },
    "FileVersionRetention": {
      "title": "File version retention",
      "x-box-tag": "file_version_retentions",
      "x-box-reference-category": "file_version_retentions",
      "description": "A retention policy blocks permanent deletion of content\nfor a specified amount of time. Admins can apply policies to\nspecified folders, or an entire enterprise. A file version retention\nis a  record for a retained file version. To use this feature,\nyou must  have the manage retention policies scope enabled for your\nAPI key via  your application management console. For more information\nabout retention policies, please visit our help documentation",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`file_version_retention`",
              "enum": [
                "file_version_retention"
              ]
            },
            "file_version": {
              "allOf": [
                {
                  "$ref": "#/definitions/FileVersion--Mini"
                },
                {
                  "description": "The file version this file version retention was\napplied to"
                }
              ]
            },
            "file": {
              "allOf": [
                {
                  "$ref": "#/definitions/File--Mini"
                },
                {
                  "description": "The file this file version retention was applied to"
                }
              ]
            },
            "applied_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file version retention object was\ncreated"
            },
            "disposition_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the retention expires on this file\nversion retention"
            },
            "winning_retention_policy": {
              "allOf": [
                {
                  "$ref": "#/definitions/RetentionPolicy--Mini"
                },
                {
                  "description": "The winning retention policy applied to this file\nversion retention. A file version can have multiple\nretention policies applied."
                }
              ]
            }
          }
        }
      ]
    },
    "FileVersionRetentions": {
      "title": "File version retentions",
      "x-box-tag": "file_version_retentions",
      "x-box-reference-category": "file_version_retentions",
      "description": "A list of file version retentions.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileVersionRetention"
              }
            }
          }
        }
      ]
    },
    "FileVersionLegalHold": {
      "title": "File version legal hold",
      "x-box-tag": "file_version_legal_holds",
      "x-box-reference-category": "file_version_legal_holds",
      "description": "File-Version-Legal-Hold is an entity representing all\nholds on a File Version.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`file_version_legal_hold`",
              "enum": [
                "file_version_legal_hold"
              ]
            },
            "file_version": {
              "allOf": [
                {
                  "$ref": "#/definitions/FileVersion--Mini"
                },
                {
                  "description": "The file version that is held"
                }
              ]
            },
            "file": {
              "allOf": [
                {
                  "$ref": "#/definitions/File--Mini"
                },
                {
                  "description": "The file for the file version held.\nNote that there is no guarantee that the current\nversion of this file is held."
                }
              ]
            },
            "legal_hold_policy_assignments": {
              "description": "List of assignments contributing to this Hold.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/LegalHoldPolicyAssignment"
              }
            },
            "deleted_at": {
              "type": "string",
              "format": "date-time",
              "description": "Time that this File-Version-Legal-Hold was\ndeleted."
            }
          }
        }
      ]
    },
    "DevicePinner": {
      "title": "Device pinner",
      "x-box-tag": "device_pinners",
      "x-box-reference-category": "device_pinners",
      "description": "Device pins allow enterprises to control what devices can\nuse native Box applications.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`device_pinner`",
              "enum": [
                "device_pinner"
              ]
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user that the device pin belongs to"
                }
              ]
            },
            "product_name": {
              "type": "string",
              "description": "The type of device being pinned"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time the device pin was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time the device pin was modified"
            }
          }
        }
      ]
    },
    "DevicePinners": {
      "title": "Device pinners",
      "x-box-tag": "device_pinners",
      "x-box-reference-category": "device_pinners",
      "description": "A list of device pins",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DevicePinner"
              }
            }
          }
        }
      ]
    },
    "TermsOfServices": {
      "title": "Terms of services",
      "x-box-tag": "terms_of_services",
      "x-box-reference-category": "terms_of_services",
      "description": "A list of terms of services",
      "properties": {
        "total_count": {
          "description": "The total number of objects.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TermsOfService"
          }
        }
      }
    },
    "TermsOfService": {
      "title": "Terms of service",
      "x-box-tag": "terms_of_services",
      "x-box-reference-category": "terms_of_services",
      "description": "The root-level record that is supposed to represent a\nsingle Terms of Service.",
      "allOf": [
        {
          "$ref": "#/definitions/TermsOfService--Mini"
        },
        {},
        {
          "properties": {
            "status": {
              "description": "Whether these terms are enabled or not",
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "enterprise": {
              "allOf": [
                {
                  "title": "Enterprise",
                  "type": "object",
                  "description": "A representation of a Box enterprise",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`enterprise`",
                          "enum": [
                            "enterprise"
                          ]
                        },
                        "name": {
                          "description": "The name of the enterprise",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "The enterprise these terms apply to"
                }
              ]
            },
            "tos_type": {
              "description": "Whether to apply these terms to managed users or external users",
              "type": "string",
              "enum": [
                "managed",
                "external"
              ]
            },
            "text": {
              "description": "The text for your terms and conditions. This text could be\nempty if the `status` is set to `disabled`.",
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal item was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal item was modified."
            }
          }
        }
      ]
    },
    "TermsOfServiceUserStatuses": {
      "title": "Terms of service user statuses",
      "x-box-tag": "terms_of_service_user_statuses",
      "x-box-reference-category": "terms_of_service_user_statuses",
      "description": "A list of terms of service user statuses",
      "properties": {
        "total_count": {
          "description": "The total number of objects.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TermsOfServiceUserStatus"
          }
        }
      }
    },
    "TermsOfServiceUserStatus": {
      "title": "Terms of service user status",
      "x-box-tag": "terms_of_service_user_statuses",
      "x-box-reference-category": "terms_of_service_user_statuses",
      "description": "The association between a Terms of Service and a user",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`terms_of_service_user_status`",
              "enum": [
                "terms_of_service_user_status"
              ]
            },
            "tos": {
              "allOf": [
                {
                  "$ref": "#/definitions/TermsOfService--Mini"
                },
                {
                  "description": "The terms of service"
                }
              ]
            },
            "user": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user"
                }
              ]
            },
            "is_accepted": {
              "type": "boolean",
              "description": "If the user has accepted the terms of services"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal item was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the legal item was modified."
            }
          }
        }
      ]
    },
    "CollaborationWhitelistEntries": {
      "title": "Collaboration whitelist entries",
      "x-box-tag": "collaboration_whitelist_entries",
      "x-box-reference-category": "collaboration_whitelist_entries",
      "description": "A list of collaboration whitelist entries.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CollaborationWhitelistEntry"
              }
            }
          }
        }
      ]
    },
    "CollaborationWhitelistEntry": {
      "title": "Collaboration whitelist entry",
      "x-box-tag": "collaboration_whitelist_entries",
      "x-box-reference-category": "collaboration_whitelist_entries",
      "description": "A Collaboration Whitelist entry describes an\napproved domain that can collaborate with your enterprise",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`collaboration_whitelist_entry`",
              "enum": [
                "collaboration_whitelist_entry"
              ]
            },
            "domain": {
              "type": "string",
              "description": "The whitelisted domain"
            },
            "direction": {
              "type": "string",
              "description": "The direction of the collaborations to whitelist",
              "enum": [
                "inbound",
                "outbound",
                "both"
              ]
            },
            "enterprise": {
              "allOf": [
                {
                  "title": "Enterprise",
                  "type": "object",
                  "description": "A representation of a Box enterprise",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`enterprise`",
                          "enum": [
                            "enterprise"
                          ]
                        },
                        "name": {
                          "description": "The name of the enterprise",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "The enterprise this whitelist is applied to"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time the whitelist entry was created"
            }
          }
        }
      ]
    },
    "CollaborationWhitelistExemptTargets": {
      "title": "Collaboration whitelist exempt targets",
      "x-box-tag": "collaboration_whitelist_exempt_targets",
      "x-box-reference-category": "collaboration_whitelist_exempt_targets",
      "description": "A list of collaboration whitelist exemptions.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CollaborationWhitelistExemptTarget"
              }
            }
          }
        }
      ]
    },
    "CollaborationWhitelistExemptTarget": {
      "title": "Collaboration whitelist exempt target",
      "x-box-tag": "collaboration_whitelist_exempt_targets",
      "x-box-reference-category": "collaboration_whitelist_exempt_targets",
      "description": "The record that represents a target user that is exempt from the\ncollaboration whitelist.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`collaboration_whitelist`",
              "enum": [
                "collaboration_whitelist"
              ]
            },
            "enterprise": {
              "allOf": [
                {
                  "title": "Enterprise",
                  "type": "object",
                  "description": "A representation of a Box enterprise",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`enterprise`",
                          "enum": [
                            "enterprise"
                          ]
                        },
                        "name": {
                          "description": "The name of the enterprise",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "The enterprise this entry belongs to"
                }
              ]
            },
            "user": {
              "allOf": [
                {
                  "title": "Enterprise",
                  "type": "object",
                  "description": "A representation of a Box enterprise",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`enterprise`",
                          "enum": [
                            "enterprise"
                          ]
                        },
                        "name": {
                          "description": "The name of the enterprise",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "The user that has been exempt"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time the entry was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time the entry was modified"
            }
          }
        }
      ]
    },
    "StoragePolicies": {
      "title": "Storage policies",
      "x-box-tag": "storage_policies",
      "x-box-reference-category": "storage_policies",
      "description": "A list of storage policies.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoragePolicy"
              }
            }
          }
        }
      ]
    },
    "StoragePolicy": {
      "title": "Storage policy",
      "x-box-tag": "storage_policies",
      "x-box-reference-category": "storage_policies",
      "description": "The Storage Policy object describes the storage zone.",
      "allOf": [
        {
          "$ref": "#/definitions/StoragePolicy--Mini"
        },
        {},
        {
          "properties": {
            "name": {
              "description": "A descriptive name of the region",
              "type": "string"
            }
          }
        }
      ]
    },
    "StoragePolicyAssignments": {
      "title": "Storage policy assignments",
      "x-box-tag": "storage_policy_assignments",
      "x-box-reference-category": "storage_policy_assignments",
      "description": "A list of storage policy assignments.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes marker\nbased pagination",
          "properties": {
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "next_marker": {
              "description": "The marker for the start of the next page of results.",
              "type": "integer",
              "format": "int64"
            },
            "prev_marker": {
              "description": "The marker for the start of the previous page of results.",
              "type": "integer",
              "format": "int64"
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoragePolicyAssignment"
              }
            }
          }
        }
      ]
    },
    "StoragePolicyAssignment": {
      "title": "Storage policy assignment",
      "x-box-tag": "storage_policy_assignments",
      "x-box-reference-category": "storage_policy_assignments",
      "description": "The assignment of a storage policy to a user or enterprise",
      "properties": {
        "storage_policy": {
          "allOf": [
            {
              "$ref": "#/definitions/StoragePolicy--Mini"
            },
            {
              "description": "The assigned storage policy"
            }
          ]
        },
        "assigned_to": {
          "allOf": [
            {
              "title": "Reference",
              "description": "The bare basic reference for an object",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier for this object"
                }
              }
            },
            {
              "description": "The enterprise or use the policy is assigned to"
            }
          ]
        }
      }
    },
    "File--Standard": {
      "title": "File (Standard)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A standard representation of a file, as returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Mini"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "format": "digest",
              "description": "The SHA1 hash of the file. This can be used to compare the contents\nof a file on Box with a local file."
            },
            "description": {
              "type": "string",
              "description": "The optional description of this file",
              "maxLength": 256
            },
            "size": {
              "type": "integer",
              "description": "The file size in bytes. Be careful parsing this integer as it can\nget very large and cause an integer overflow."
            },
            "path_collection": {
              "allOf": [
                {
                  "title": "Path collection",
                  "description": "A list of parent folders for an item.",
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "description": "The number of folders in this list.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "entries": {
                      "type": "array",
                      "description": "The parent folders for this item",
                      "items": {
                        "$ref": "#/definitions/Folder--Mini"
                      }
                    }
                  }
                },
                {
                  "description": "The tree of folders that this file is contained in,\nstarting at the root."
                },
                {},
                {}
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the file was created on Box."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the folder was last updated on Box."
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this file was put in the trash."
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this file is expected to be purged\nfrom the trash."
            },
            "content_created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this file was originally\ncreated, which might be before it was uploaded to Box."
            },
            "content_modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this folder was last updated,\nwhich might be before it was uploaded to Box."
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created this file"
                },
                {}
              ]
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last modified this file"
                },
                {},
                {}
              ]
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who owns this file"
                },
                {},
                {}
              ]
            },
            "shared_link": {
              "allOf": [
                {
                  "title": "Shared link",
                  "description": "Shared links provide direct, read-only access to files or folder on Box.\n\nShared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriately authenticated Box users.",
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "url",
                      "description": "The URL that can be used to access the item on Box.\n\nThis URL will display the item in Box's preview UI where the file\ncan be downloaded if allowed.\n\nThis URL will continue to work even when a custom `vanity_url`\nhas been set for this shared link."
                    },
                    "download_url": {
                      "type": "string",
                      "format": "url",
                      "x-box-premium-feature": true,
                      "description": "A URL that can be used to download the file. This URL can be used in\na browser to download the file. This URL includes the file\nextension so that the file will be saved with the right file type.\n\nThis property will be `null` for folders."
                    },
                    "vanity_url": {
                      "type": "string",
                      "format": "url",
                      "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application."
                    },
                    "access": {
                      "type": "string",
                      "description": "The access level for this shared link.\n\n* `open` - provides access to this item to anyone with this link\n* `company` - only provides access to this item to people the same company\n* `collaborators` - only provides access to this item to people who are\n   collaborators on this item\n\nIf this field is omitted when creating the shared link, the access level\nwill be set to the default access level specified by the enterprise admin.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_access": {
                      "type": "string",
                      "description": "The effective access level for the shared link. This can be a more\nrestrictive access level than the value in the `access` field when the\nenterprise settings restrict the allowed access levels.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_permission": {
                      "type": "string",
                      "description": "The effective permissions for this shared link.",
                      "enum": [
                        "can_download",
                        "can_preview"
                      ]
                    },
                    "unshared_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when this link will be unshared. This field can only be\nset by users with paid accounts."
                    },
                    "is_password_enabled": {
                      "type": "boolean",
                      "description": "Defines if the shared link requires a password to access the item."
                    },
                    "permissions": {
                      "type": "object",
                      "description": "Defines if this link allows a user to preview and download an item.",
                      "properties": {
                        "can_download": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be downloaded. For\nshared links on folders, this also applies to any items in the folder.\n\nThis value can be set to `true` when the effective access level is\nset to `open` or `company`, not `collaborators`."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be previewed.\n\nThis value is always `true`. For shared links on folders this also\napplies to any items in the folder."
                        }
                      }
                    },
                    "download_count": {
                      "type": "integer",
                      "description": "The number of times this item has been downloaded."
                    },
                    "preview_count": {
                      "type": "integer",
                      "description": "The number of times this item has been previewed."
                    }
                  }
                },
                {
                  "description": "The shared link for this file. This will be\n`null` if no shared link has been created for this\nfile."
                },
                {},
                {}
              ]
            },
            "parent": {
              "allOf": [
                {
                  "$ref": "#/definitions/Folder--Mini"
                },
                {
                  "description": "The folder that this file is located within."
                },
                {}
              ]
            },
            "item_status": {
              "type": "string",
              "description": "Defines if this item has been deleted or not.\n\n* `active` when the item has is not in the trash\n* `trashed` when the item has been moved to the trash but not deleted\n* `deleted` when the item has been permanently deleted.",
              "enum": [
                "active",
                "trashed",
                "deleted"
              ]
            },
            "file_version": {
              "allOf": [
                {
                  "$ref": "#/definitions/FileVersion--Mini"
                },
                {
                  "description": "The information about the current version of the file."
                },
                {}
              ]
            }
          }
        }
      ]
    },
    "User--Mini": {
      "title": "User (Mini)",
      "description": "A mini representation of a user, used when\nnested within another resource.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`user`",
              "enum": [
                "user"
              ]
            },
            "name": {
              "type": "string",
              "description": "The display name of this user",
              "maxLength": 50
            },
            "login": {
              "type": "string",
              "format": "email",
              "description": "The primary email address of this user"
            }
          }
        }
      ]
    },
    "FileScope": {
      "title": "File scope",
      "type": "object",
      "description": "A relation between a file and the scopes for which the file can be accessed",
      "properties": {
        "scope": {
          "type": "string",
          "description": "The file scopes for the file access",
          "enum": [
            "annotation_edit",
            "annotation_view_all",
            "annotation_view_self",
            "base_explorer",
            "base_picker",
            "base_preview",
            "base_upload",
            "item_delete",
            "item_download",
            "item_preview",
            "item_rename",
            "item_share"
          ]
        },
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/File--Mini"
            },
            {
              "description": "The file for which the file can be accessed"
            }
          ]
        }
      }
    },
    "File--Mini": {
      "title": "File (Mini)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A mini representation of a file, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/File--Base"
        },
        {
          "properties": {
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {},
                {}
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the file"
            }
          }
        }
      ]
    },
    "FileVersion--Mini": {
      "title": "File version (Mini)",
      "description": "A mini representation of a file version, used when\nnested within another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/FileVersion--Base"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "description": "The SHA1 hash of this version of the file."
            }
          }
        }
      ]
    },
    "Folder--Standard": {
      "title": "Folder (Standard)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A standard representation of a folder, as returned from any\nfolder API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/Folder--Mini"
        },
        {
          "properties": {
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the folder was created. This value may\nbe `null` for some folders such as the root folder or the trash\nfolder."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the folder was last updated. This value may\nbe `null` for some folders such as the root folder or the trash\nfolder."
            },
            "description": {
              "allOf": [
                {
                  "type": "string",
                  "description": "The optional description of this folder",
                  "maxLength": 256
                },
                {},
                {}
              ]
            },
            "size": {
              "type": "integer",
              "format": "int64",
              "description": "The folder size in bytes.\n\nBe careful parsing this integer as its\nvalue can get very large."
            },
            "path_collection": {
              "allOf": [
                {
                  "title": "Path collection",
                  "description": "A list of parent folders for an item.",
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "description": "The number of folders in this list.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "entries": {
                      "type": "array",
                      "description": "The parent folders for this item",
                      "items": {
                        "$ref": "#/definitions/Folder--Mini"
                      }
                    }
                  }
                },
                {
                  "description": "The tree of folders that this folder is contained in,\nstarting at the root."
                },
                {},
                {}
              ]
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created this folder"
                },
                {},
                {}
              ]
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last modified this folder."
                },
                {},
                {}
              ]
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this folder was put in the trash."
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this folder is expected to be purged\nfrom the trash."
            },
            "content_created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this folder was originally\ncreated."
            },
            "content_modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this folder was last updated."
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time and which the folder will be automatically be deleted."
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who owns this folder."
                },
                {},
                {}
              ]
            },
            "shared_link": {
              "allOf": [
                {
                  "title": "Shared link",
                  "description": "Shared links provide direct, read-only access to files or folder on Box.\n\nShared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriately authenticated Box users.",
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "url",
                      "description": "The URL that can be used to access the item on Box.\n\nThis URL will display the item in Box's preview UI where the file\ncan be downloaded if allowed.\n\nThis URL will continue to work even when a custom `vanity_url`\nhas been set for this shared link."
                    },
                    "download_url": {
                      "type": "string",
                      "format": "url",
                      "x-box-premium-feature": true,
                      "description": "A URL that can be used to download the file. This URL can be used in\na browser to download the file. This URL includes the file\nextension so that the file will be saved with the right file type.\n\nThis property will be `null` for folders."
                    },
                    "vanity_url": {
                      "type": "string",
                      "format": "url",
                      "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application."
                    },
                    "access": {
                      "type": "string",
                      "description": "The access level for this shared link.\n\n* `open` - provides access to this item to anyone with this link\n* `company` - only provides access to this item to people the same company\n* `collaborators` - only provides access to this item to people who are\n   collaborators on this item\n\nIf this field is omitted when creating the shared link, the access level\nwill be set to the default access level specified by the enterprise admin.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_access": {
                      "type": "string",
                      "description": "The effective access level for the shared link. This can be a more\nrestrictive access level than the value in the `access` field when the\nenterprise settings restrict the allowed access levels.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_permission": {
                      "type": "string",
                      "description": "The effective permissions for this shared link.",
                      "enum": [
                        "can_download",
                        "can_preview"
                      ]
                    },
                    "unshared_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when this link will be unshared. This field can only be\nset by users with paid accounts."
                    },
                    "is_password_enabled": {
                      "type": "boolean",
                      "description": "Defines if the shared link requires a password to access the item."
                    },
                    "permissions": {
                      "type": "object",
                      "description": "Defines if this link allows a user to preview and download an item.",
                      "properties": {
                        "can_download": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be downloaded. For\nshared links on folders, this also applies to any items in the folder.\n\nThis value can be set to `true` when the effective access level is\nset to `open` or `company`, not `collaborators`."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be previewed.\n\nThis value is always `true`. For shared links on folders this also\napplies to any items in the folder."
                        }
                      }
                    },
                    "download_count": {
                      "type": "integer",
                      "description": "The number of times this item has been downloaded."
                    },
                    "preview_count": {
                      "type": "integer",
                      "description": "The number of times this item has been previewed."
                    }
                  }
                },
                {
                  "description": "The shared link for this folder. This will be\n`null` if no shared link has been created for this\nfolder."
                },
                {}
              ]
            },
            "folder_upload_email": {
              "type": "object",
              "properties": {
                "access": {
                  "type": "string",
                  "enum": [
                    "open",
                    "collaborators"
                  ],
                  "description": "When this parameter has been set, users can email files\nto the email address that has been automatically\ncreated for this folder.\n\nTo create an email address, set this property either when\ncreating or updating the folder.\n\nWhen set to `collaborators`, only emails from registered email\naddresses for collaborators will be accepted. This includes\nany email aliases a user might have registered.\n\nWhen set to `open` it will accept emails from any email\naddress."
                },
                "email": {
                  "description": "The optional upload email address for this folder.",
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "parent": {
              "allOf": [
                {
                  "$ref": "#/definitions/Folder--Mini"
                },
                {
                  "description": "The optional folder that this folder is located within.\n\nThis value may be `null` for some folders such as the\nroot folder or the trash folder."
                },
                {}
              ]
            },
            "item_status": {
              "type": "string",
              "description": "Defines if this item has been deleted or not.\n\n* `active` when the item has is not in the trash\n* `trashed` when the item has been moved to the trash but not deleted\n* `deleted` when the item has been permanently deleted.",
              "enum": [
                "active",
                "trashed",
                "deleted"
              ]
            },
            "item_collection": {
              "allOf": [
                {
                  "$ref": "#/definitions/Items"
                },
                {
                  "description": "A page of the items that are in the folder.\n\nThis field can only be requested when querying a folder's\ninformation, not when querying a folder's items."
                },
                {},
                {}
              ]
            }
          }
        }
      ]
    },
    "Folder--Mini": {
      "title": "Folder (Mini)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A mini representation of a file version, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/Folder--Base"
        },
        {
          "properties": {
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {},
                {}
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the folder."
            }
          }
        }
      ]
    },
    "WebLink--Mini": {
      "title": "Web link (Mini)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "Web links are objects that point to URLs. These objects\nare also known as bookmarks within the Box web application.\n\nWeb link objects are treated similarly to file objects,\nthey will also support most actions that apply to regular files.",
      "allOf": [
        {
          "$ref": "#/definitions/Item"
        },
        {
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL this web link points to"
            },
            "type": {
              "type": "string",
              "description": "`web_link`",
              "enum": [
                "web_link"
              ]
            },
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {},
                {}
              ]
            },
            "etag": {
              "type": "string",
              "description": "The entity tag of this web link. Used with `If-Match`\nheaders."
            },
            "name": {
              "type": "string",
              "description": "The name of the web link"
            }
          }
        }
      ]
    },
    "Comment--Standard": {
      "title": "Comment (Standard)",
      "description": "Standard representation of a comment, as returned by the\ncomment API endpoints and when nested within other resources.",
      "type": "object",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`comment`",
              "enum": [
                "comment"
              ]
            },
            "is_reply_comment": {
              "type": "boolean",
              "description": "Whether or not this comment is a reply to another\ncomment"
            },
            "message": {
              "type": "string",
              "description": "The text of the comment, as provided by the user"
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "A mini user object representing the author of the\ncomment"
                },
                {}
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time this comment was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time this comment was last modified"
            },
            "item": {
              "allOf": [
                {
                  "title": "Reference",
                  "description": "The bare basic reference for an object",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier for this object"
                    }
                  }
                },
                {
                  "description": "The object this comment was placed on"
                },
                {}
              ]
            }
          }
        }
      ]
    },
    "TermsOfService--Mini": {
      "title": "Terms of service (Mini)",
      "description": "The root-level record that is supposed to represent a\nsingle Terms of Service.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`terms_of_service`",
              "enum": [
                "terms_of_service"
              ]
            }
          }
        }
      ]
    },
    "User--Standard": {
      "title": "User (Standard)",
      "description": "A standard representation of a user, as returned from any\nuser API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/User--Mini"
        },
        {
          "properties": {
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the user object was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the user object was last modified"
            },
            "language": {
              "type": "string",
              "format": "ISO639-1-BOX",
              "description": "The user's preferred language"
            },
            "timezone": {
              "type": "string",
              "format": "timezone",
              "description": "The user's timezone"
            },
            "space_amount": {
              "type": "integer",
              "description": "The user’s total available space amount in bytes"
            },
            "space_used": {
              "type": "integer",
              "description": "The amount of space in use by the user"
            },
            "max_upload_size": {
              "type": "integer",
              "description": "The maximum individual file size in bytes the user can have"
            },
            "status": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "cannot_delete_edit",
                "cannot_delete_edit_upload"
              ],
              "description": "The user's account status"
            },
            "job_title": {
              "type": "string",
              "description": "The user’s job title",
              "maxLength": 100
            },
            "phone": {
              "type": "string",
              "description": "The user’s phone number",
              "maxLength": 100
            },
            "address": {
              "type": "string",
              "description": "The user’s address",
              "maxLength": 255
            },
            "avatar_url": {
              "type": "string",
              "description": "URL of the user’s avatar image"
            }
          }
        }
      ]
    },
    "Group--Standard": {
      "title": "Group (Standard)",
      "description": "A standard representation of a group, as returned from any\ngroup API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/Group--Mini"
        },
        {
          "properties": {
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the group object was created"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the group object was last modified"
            }
          }
        }
      ]
    },
    "Group--Mini": {
      "title": "Group (Mini)",
      "type": "object",
      "description": "Mini representation of a group, including id and name of\ngroup.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`group`",
              "enum": [
                "group"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the group"
            },
            "group_type": {
              "type": "string",
              "description": "The type of the group.",
              "enum": [
                "managed_group",
                "all_users_group"
              ]
            }
          }
        }
      ]
    },
    "RealtimeServer": {
      "title": "Real-time server",
      "description": "A real-time server that can be used for\nlong polling user events",
      "properties": {
        "type": {
          "description": "`realtime_server`",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The URL for the server."
        },
        "ttl": {
          "description": "The time in minutes for which this server is available",
          "type": "integer"
        },
        "max_retries": {
          "description": "The maximum number of retries this server will\nallow before a new long poll should be started by\ngetting a [new list of server](#options-events).",
          "type": "integer"
        },
        "retry_timeout": {
          "description": "The maximum number of seconds without a response\nafter which you should retry the long poll connection.\n\nThis helps to overcome network issues where the long\npoll looks to be working but no packages are coming\nthrough.",
          "type": "integer"
        }
      }
    },
    "Event": {
      "title": "Event",
      "x-box-tag": "events",
      "x-box-reference-category": "events",
      "description": "The description of an event that happened within Box",
      "properties": {
        "type": {
          "description": "`event`",
          "type": "string"
        },
        "event_id": {
          "type": "string",
          "description": "The ID of the event object. You can use this to detect duplicate events"
        },
        "created_by": {
          "allOf": [
            {
              "$ref": "#/definitions/User--Mini"
            },
            {
              "description": "The user that performed the action represented by the event.\nSome events may be performed by users not logged into Box.\nIn that case, not all attributes of the object are populated and the\nevent is attributed to a unknown user (`user_id = 2`)"
            }
          ]
        },
        "event_type": {
          "allOf": [
            {
              "title": "Event Type",
              "type": "string",
              "description": "An event type that can trigger an event",
              "enum": [
                "ACCESS_GRANTED",
                "ACCESS_REVOKED",
                "ADD_DEVICE_ASSOCIATION",
                "ADD_LOGIN_ACTIVITY_DEVICE",
                "ADMIN_LOGIN",
                "APPLICATION_CREATED",
                "APPLICATION_PUBLIC_KEY_ADDED",
                "APPLICATION_PUBLIC_KEY_DELETED",
                "CHANGE_ADMIN_ROLE",
                "CHANGE_FOLDER_PERMISSION",
                "COLLABORATION_ACCEPT",
                "COLLABORATION_EXPIRATION",
                "COLLABORATION_INVITE",
                "COLLABORATION_REMOVE",
                "COLLABORATION_ROLE_CHANGE",
                "COLLAB_ADD_COLLABORATOR",
                "COLLAB_INVITE_COLLABORATOR",
                "COLLAB_REMOVE_COLLABORATOR",
                "COLLAB_ROLE_CHANGE",
                "COMMENT_CREATE",
                "COMMENT_DELETE",
                "CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY",
                "CONTENT_WORKFLOW_AUTOMATION_ADD",
                "CONTENT_WORKFLOW_AUTOMATION_DELETE",
                "CONTENT_WORKFLOW_POLICY_ADD",
                "CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION",
                "CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION",
                "COPY",
                "DATA_RETENTION_CREATE_RETENTION",
                "DATA_RETENTION_REMOVE_RETENTION",
                "DELETE",
                "DELETE_USER",
                "DEVICE_TRUST_CHECK_FAILED",
                "DOWNLOAD",
                "EDIT",
                "EDIT_USER",
                "EMAIL_ALIAS_CONFIRM",
                "EMAIL_ALIAS_REMOVE",
                "ENABLE_TWO_FACTOR_AUTH",
                "ENTERPRISE_APP_AUTHORIZATION_UPDATE",
                "FAILED_LOGIN",
                "FILE_MARKED_MALICIOUS",
                "FILE_WATERMARKED_DOWNLOAD",
                "GROUP_ADD_ITEM",
                "GROUP_ADD_USER",
                "GROUP_CREATION",
                "GROUP_DELETION",
                "GROUP_EDITED",
                "GROUP_REMOVE_ITEM",
                "GROUP_REMOVE_USER",
                "ITEM_COPY",
                "ITEM_CREATE",
                "ITEM_DOWNLOAD",
                "ITEM_MAKE_CURRENT_VERSION",
                "ITEM_MODIFY",
                "ITEM_MOVE",
                "ITEM_OPEN",
                "ITEM_PREVIEW",
                "ITEM_RENAME",
                "ITEM_SHARED",
                "ITEM_SHARED_CREATE",
                "ITEM_SHARED_UNSHARE",
                "ITEM_SHARED_UPDATE",
                "ITEM_SYNC",
                "ITEM_TRASH",
                "ITEM_UNDELETE_VIA_TRASH",
                "ITEM_UNSYNC",
                "ITEM_UPLOAD",
                "LEGAL_HOLD_ASSIGNMENT_CREATE",
                "LEGAL_HOLD_ASSIGNMENT_DELETE",
                "LEGAL_HOLD_POLICY_CREATE",
                "LEGAL_HOLD_POLICY_DELETE",
                "LEGAL_HOLD_POLICY_UPDATE",
                "LOCK",
                "LOCK_CREATE",
                "LOCK_DESTROY",
                "LOGIN",
                "MASTER_INVITE_ACCEPT",
                "MASTER_INVITE_REJECT",
                "METADATA_INSTANCE_CREATE",
                "METADATA_INSTANCE_DELETE",
                "METADATA_INSTANCE_UPDATE",
                "METADATA_TEMPLATE_CREATE",
                "METADATA_TEMPLATE_DELETE",
                "METADATA_TEMPLATE_UPDATE",
                "MOVE",
                "NEW_USER",
                "PREVIEW",
                "REMOVE_DEVICE_ASSOCIATION",
                "REMOVE_LOGIN_ACTIVITY_DEVICE",
                "RENAME",
                "RETENTION_POLICY_ASSIGNMENT_ADD",
                "SHARE",
                "SHARE_EXPIRATION",
                "SHIELD_ALERT",
                "STORAGE_EXPIRATION",
                "TAG_ITEM_CREATE",
                "TASK_ASSIGNMENT_CREATE",
                "TASK_ASSIGNMENT_DELETE",
                "TASK_ASSIGNMENT_UPDATE",
                "TASK_CREATE",
                "TASK_UPDATE",
                "TERMS_OF_SERVICE_ACCEPT",
                "TERMS_OF_SERVICE_REJECT",
                "UNDELETE",
                "UNLOCK",
                "UNSHARE",
                "UPDATE_COLLABORATION_EXPIRATION",
                "UPDATE_SHARE_EXPIRATION",
                "UPLOAD",
                "USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE",
                "WATERMARK_LABEL_CREATE",
                "WATERMARK_LABEL_DELETE"
              ]
            },
            {
              "description": "The event type that triggered this event"
            }
          ]
        },
        "session_id": {
          "type": "string",
          "description": "The session of the user that performed the action. Not all events will\npopulate this attribute."
        },
        "source": {
          "$ref": "#/definitions/User--Mini"
        },
        "additional_details": {
          "type": "object",
          "description": "This object provides additional information about the event if available.\n\nThis can include how a user performed an event as well as additional\ninformation to correlate an event to external KeySafe logs. Not all events\nhave an `additional_details` object.  This object is only available in the\nEnterprise Events."
        }
      }
    },
    "Collection": {
      "title": "Collection",
      "description": "A collection of items, including files and folders.\n\nCurrently, the only collection available\nis the `favorites` collection.\n\nThe contents of a collection can be explored in a\nsimilar way to which the contents of a folder is\nexplored.",
      "x-box-tag": "collections",
      "x-box-reference-category": "collections",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`collection`",
              "enum": [
                "collection"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the collection.",
              "enum": [
                "Favorites"
              ]
            },
            "collection_type": {
              "type": "string",
              "description": "The type of the collection. This is used to\ndetermine the proper visual treatment for\ncollections.",
              "enum": [
                "favorites"
              ]
            }
          }
        }
      ]
    },
    "RecentItem": {
      "title": "Recent item",
      "description": "A recent item accessed by a user.",
      "x-box-tag": "recent_items",
      "x-box-reference-category": "recent_items",
      "properties": {
        "type": {
          "type": "string",
          "description": "`recent_item`"
        },
        "item": {
          "allOf": [
            {
              "$ref": "#/definitions/Item"
            },
            {
              "description": "The item that was recently accessed."
            }
          ]
        },
        "interaction_type": {
          "type": "string",
          "description": "The most recent type of access the user performed on\nthe item.",
          "enum": [
            "item_preview",
            "item_upload",
            "item_comment",
            "item_open",
            "item_modify"
          ]
        },
        "interacted_at": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the most recent interaction."
        },
        "interaction_shared_link": {
          "type": "string",
          "description": "If the item was accessed through a shared link it will appear here,\notherwise this will be null."
        }
      }
    },
    "RetentionPolicy--Mini": {
      "title": "Retention policy (Mini)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A mini representation of a retention policy, used when\nnested within another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/RetentionPolicy--Base"
        },
        {
          "properties": {
            "policy_name": {
              "type": "string",
              "description": "The name given to the retention policy"
            },
            "retention_length": {
              "type": "string",
              "format": "int32",
              "description": "The length of the retention policy. This length\nspecifies the duration in days that the retention\npolicy will be active for after being assigned to\ncontent.  If the policy has A `policy_type` of\n`indefinite`, the `retention_length` will also be\n`indefinite`."
            },
            "disposition_action": {
              "type": "string",
              "description": "The disposition action of the retention policy.\nThis action can be `permanently_delete`, which\nwill cause the content retained by the policy\nto be permanently deleted, or `remove_retention`,\nwhich will lift the retention policy from the content,\nallowing it to be deleted by users,\nonce the retention policy has expired.",
              "enum": [
                "permanently_delete",
                "remove_retention"
              ]
            }
          }
        }
      ]
    },
    "LegalHoldPolicy--Mini": {
      "title": "Legal hold policy (Mini)",
      "description": "A mini legal hold policy",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`legal_hold_policy`",
              "enum": [
                "legal_hold_policy"
              ]
            }
          }
        }
      ]
    },
    "StoragePolicy--Mini": {
      "title": "Storage policy (Mini)",
      "description": "A mini description of a Storage Policy object",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`storage_policy`",
              "enum": [
                "storage_policy"
              ]
            }
          }
        }
      ]
    },
    "File--Base": {
      "title": "File (Base)",
      "description": "The bare basic representation of a file, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
        },
        "etag": {
          "type": "string",
          "description": "The HTTP `etag` of this file. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the file if (no) changes have happened."
        },
        "type": {
          "type": "string",
          "description": "`file`",
          "enum": [
            "file"
          ]
        }
      }
    },
    "FileVersion--Base": {
      "title": "File version (Base)",
      "description": "The bare basic representation of a file version, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file version."
        },
        "type": {
          "type": "string",
          "description": "`file_version`",
          "enum": [
            "file_version"
          ]
        }
      }
    },
    "Folder--Base": {
      "title": "Folder (Base)",
      "description": "The bare basic representation of a folder, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting a folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folders/123`\nthe `folder_id` is `123`."
        },
        "etag": {
          "type": "string",
          "description": "The HTTP `etag` of this folder. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the folder if (no) changes have happened."
        },
        "type": {
          "type": "string",
          "description": "`folder`",
          "enum": [
            "folder"
          ]
        }
      }
    },
    "RetentionPolicy--Base": {
      "title": "Retention policy (Base)",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "The bare basic representation of a file version, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file version."
        },
        "type": {
          "type": "string",
          "description": "`file_version`",
          "enum": [
            "file_version"
          ]
        }
      }
    }
  }
}