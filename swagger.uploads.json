{
  "swagger": "2.0",
  "info": {
    "title": "Box Platform API",
    "description": "[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.",
    "termsOfService": "https://cloud.app.box.com/s/rmwxu64h1ipr41u49w3bbuvbsa29wku9",
    "contact": {
      "name": "Box, Inc",
      "url": "https://box.dev",
      "email": "devrel@box.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "2.0.0"
  },
  "host": "upload.box.com",
  "basePath": "/api/2.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/files/{file_id}/content": {
      "post": {
        "operationId": "post_files_id_content",
        "tags": [
          "Uploads"
        ],
        "summary": "Upload file version",
        "description": "Update a file's content. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.\n\n# Request body order\n\nThe `attributes` part of the body must come **before** the\n`file` part. Requests that do not follow this format when\nuploading the file will receive a HTTP `400` error with a\n`metadata_after_file_contents` error code.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Content-MD5",
            "required": false,
            "in": "header",
            "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the new file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "412": {
            "description": "Returns an error when the `If-Match` header does not match\nthe current `etag` value of the file. This indicates that the file\nhas changed since it was last requested.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/content": {
      "post": {
        "operationId": "post_files_content",
        "tags": [
          "Uploads"
        ],
        "summary": "Upload file",
        "description": "Uploads a small file to Box. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.\n\n# Request body order\n\nThe `attributes` part of the body must come **before** the\n`file` part. Requests that do not follow this format when\nuploading the file will receive a HTTP `400` error with a\n`metadata_after_file_contents` error code.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Content-MD5",
            "required": false,
            "in": "header",
            "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the new file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions": {
      "post": {
        "operationId": "post_files_upload_sessions",
        "summary": "Create upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Creates an upload session for a new file.",
        "responses": {
          "201": {
            "description": "Returns a new upload session.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `missing_destination`: No `folder_id` was provided\n* `invalid_folder_id`: `folder_id` is not valid\n* `invalid_file_name`: `file_name` is not valid\n* `missing_file_size`: `file_size` was not provided\n* `invalid_file_size`: `file_size` was not a valid number\n* `file_size_too_small`: `file_size` is below minimum file size for\n  uploads via this API\n* `missing_file_name`: `file_name` was not provided",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "folder_id",
                "file_size",
                "file_name"
              ],
              "properties": {
                "folder_id": {
                  "description": "The ID of the folder to upload the new file to.",
                  "type": "string"
                },
                "file_size": {
                  "description": "The total number of bytes of the file to be uploaded",
                  "type": "integer",
                  "format": "int64"
                },
                "file_name": {
                  "description": "The name of new file",
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/files/{file_id}/upload_sessions": {
      "post": {
        "operationId": "post_files_id_upload_sessions",
        "summary": "Create upload session for existing file",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Creates an upload session for an existing file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "file_size"
              ],
              "properties": {
                "file_size": {
                  "description": "The total number of bytes of the file to be uploaded",
                  "type": "integer",
                  "format": "int64"
                },
                "file_name": {
                  "description": "The optional new name of new file",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new upload session.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}": {
      "get": {
        "operationId": "get_files_upload_sessions_id",
        "summary": "Get upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Return information about an upload session.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an upload session object.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_files_upload_sessions_id",
        "summary": "Upload part of file",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Updates a chunk of an upload session for a file.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Digest",
            "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Range",
            "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Chunk has been uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/UploadedPart"
            }
          },
          "409": {
            "description": "Returns an error if the chunk conflicts with another\nchunk previously uploaded.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error if a precondition was not met.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "416": {
            "description": "Returns an error if the content range does not match a specified range\nfor the session.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_upload_sessions_id",
        "summary": "Remove upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Abort an upload session and discard all data uploaded.\n\nThis cannot be reversed.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the session was\nsuccessfully aborted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}/parts": {
      "get": {
        "operationId": "get_files_upload_sessions_id_parts",
        "summary": "List parts",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Return a list of the chunks uploaded to the upload\nsession so far.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of parts that have been uploaded.",
            "schema": {
              "$ref": "#/definitions/UploadParts"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}/commit": {
      "post": {
        "operationId": "post_files_upload_sessions_id_commit",
        "summary": "Commit upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Close an upload session and create a file from the\nuploaded chunks.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Digest",
            "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "parts"
              ],
              "properties": {
                "parts": {
                  "type": "array",
                  "description": "The list details for the uploaded parts",
                  "items": {
                    "$ref": "#/definitions/UploadPart"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "202": {
            "description": "Returns when all chunks have been uploaded but not yet processed.\n\nInspect the upload session to get more information about the\nprogress of processing the chunks, then retry committing the file\nwhen all chunks have processed.",
            "headers": {
              "Retry-After": {
                "description": "Indicates the number of seconds the client should wait before\nattempting their commit request again.",
                "type": "integer"
              }
            }
          },
          "409": {
            "description": "Returns an error if there is already a file with the same name\nin the target folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error if the `If-Match` or `If-None-Match` conditions fail.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2Security": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.box.com/api/oauth2/authorize",
      "tokenUrl": "https://api.box.com/oauth2/token",
      "scopes": {
        "root_readonly": "Read all files and folders stored in Box",
        "root_readwrite": "Read and write all files and folders stored in Box",
        "manage_app_users": "Provision and manage app users",
        "manage_managed_users": "Provision and manage managed users",
        "manage_groups": "Manage an enterprise's groups",
        "manage_webhook": "Create webhooks programmatically through the API",
        "manage_enterprise_properties": "Manage enterprise properties",
        "manage_data_retention": "Manage data retention polices",
        "manage_legal_hold": "Manage Legal Holds"
      }
    }
  },
  "security": [
    {
      "OAuth2Security": []
    }
  ],
  "definitions": {
    "Files": {
      "title": "Files",
      "type": "object",
      "x-box-tag": "files",
      "x-box-reference-category": "files",
      "description": "A list of files",
      "properties": {
        "total_count": {
          "description": "The number of files.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "description": "A list of files",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "ClientError": {
      "title": "Client error",
      "type": "object",
      "description": "A generic error",
      "properties": {
        "type": {
          "description": "`error`",
          "type": "string",
          "enum": [
            "error"
          ]
        },
        "status": {
          "description": "The HTTP status of the response.",
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "description": "A Box-specific error code",
          "type": "string",
          "enum": [
            "created",
            "accepted",
            "no_content",
            "redirect",
            "not_modified",
            "bad_request",
            "unauthorized",
            "forbidden",
            "not_found",
            "method_not_allowed",
            "conflict",
            "precondition_failed",
            "too_many_requests",
            "internal_server_error",
            "unavailable",
            "item_name_invalid"
          ]
        },
        "help_url": {
          "description": "A URL that links to more information about why this error occurred.",
          "type": "string"
        },
        "message": {
          "description": "A short message describing the error.",
          "type": "string"
        },
        "request_id": {
          "description": "A unique identifier for this response, which can be used\nwhen contacting Box support.",
          "type": "string"
        }
      }
    },
    "UploadSession": {
      "title": "Upload session",
      "type": "object",
      "description": "An upload session for chunk uploading a file.",
      "x-box-tag": "chunked_uploads",
      "x-box-reference-category": "chunked_uploads",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this session"
        },
        "type": {
          "type": "string",
          "description": "`upload_session`",
          "enum": [
            "upload_session"
          ]
        },
        "session_expires_at": {
          "description": "The date and time when this session expires.",
          "type": "string",
          "format": "date-time"
        },
        "part_size": {
          "type": "integer",
          "format": "int64",
          "description": "The  size in bytes that must be used for all parts of of the\nupload.\n\nOnly the last part is allowed to be of a smaller size."
        },
        "total_parts": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of parts expected in this upload session,\nas determined by the file size and part size."
        },
        "num_parts_processed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of parts that have been uploaded and processed\nby the server. This starts at `0`.\n\nWhen committing a file files, inspecting this property can\nprovide insight if all parts have been uploaded correctly."
        },
        "session_endpoints": {
          "allOf": [
            {
              "title": "Session endpoints",
              "description": "A list of endpoints for a chunked upload session.",
              "type": "object",
              "properties": {
                "upload_part": {
                  "type": "string",
                  "description": "The URL to upload parts to"
                },
                "commit": {
                  "type": "string",
                  "description": "The URL used to commit the file"
                },
                "abort": {
                  "type": "string",
                  "description": "The URL for used to abort the session."
                },
                "list_parts": {
                  "type": "string",
                  "description": "The URL users to list all parts."
                },
                "status": {
                  "type": "string",
                  "description": "The URL used to get the status of the upload."
                },
                "log_event": {
                  "type": "string",
                  "description": "The URL used to get the upload log from."
                }
              }
            },
            {
              "description": "A list of endpoints for this session."
            }
          ]
        }
      }
    },
    "UploadedPart": {
      "title": "Uploaded part",
      "type": "object",
      "description": "A chunk of a file uploaded as part of\nan upload session, as returned by some endpoints.",
      "x-box-tag": "chunked_uploads",
      "x-box-reference-category": "chunked_uploads",
      "properties": {
        "part": {
          "$ref": "#/definitions/UploadPart"
        }
      }
    },
    "UploadParts": {
      "title": "Upload parts",
      "type": "object",
      "description": "A list of uploaded chunks for an upload\nsession.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UploadPart"
              }
            }
          }
        }
      ]
    },
    "UploadPart": {
      "title": "Upload part",
      "type": "object",
      "description": "The representation of an upload\nsession chunk.",
      "properties": {
        "part_id": {
          "description": "The unique ID of the chunk.",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the chunk within the file\nin bytes. The lower bound of the position\nof the chunk within the file.",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "The size of the chunk in bytes.",
          "type": "integer",
          "format": "int64"
        },
        "sha1": {
          "description": "The SHA1 hash of the chunk.",
          "type": "string"
        }
      }
    },
    "File": {
      "title": "File",
      "type": "object",
      "x-box-tag": "files",
      "x-box-reference-category": "files",
      "description": "A full representation of a file, as can be returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Standard"
        },
        {},
        {
          "properties": {
            "version_number": {
              "type": "string",
              "description": "The version number of this file"
            },
            "comment_count": {
              "type": "integer",
              "description": "The number of comments on this file"
            },
            "permissions": {
              "allOf": [
                {
                  "type": "object",
                  "description": "The permissions that the authenticated user has for a file.",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The permissions that the authenticated user has for an item.",
                      "properties": {
                        "can_delete": {
                          "type": "boolean",
                          "description": "Specifies if the user can delete this item"
                        },
                        "can_download": {
                          "type": "boolean",
                          "description": "Specifies if the user can download this item"
                        },
                        "can_invite_collaborator": {
                          "type": "boolean",
                          "description": "Specifies if the user can invite collaborators to the item"
                        },
                        "can_rename": {
                          "type": "boolean",
                          "description": "Specifies if the user can rename this item"
                        },
                        "can_set_share_access": {
                          "type": "boolean",
                          "description": "Specifies if the user can manage shared links for\nthis item"
                        },
                        "can_share": {
                          "type": "boolean",
                          "description": "Specifies if the user can invite new collaborators to this item"
                        }
                      }
                    },
                    {
                      "properties": {
                        "can_annotate": {
                          "type": "boolean",
                          "description": "Specifies if the user can place annotations on this file."
                        },
                        "can_comment": {
                          "type": "boolean",
                          "description": "Specifies if the user can place comments on this file."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Specifies if the user can preview this file."
                        },
                        "can_upload": {
                          "type": "boolean",
                          "description": "Specifies if the user can upload a new version of this file."
                        },
                        "can_view_annotations_all": {
                          "type": "boolean",
                          "description": "Specifies if the user view all annotations placed on this file"
                        },
                        "can_view_annotations_self": {
                          "type": "boolean",
                          "description": "Specifies if the user view annotations placed by themselves\non this file"
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "Describes the permissions that the current user has\nfor this file."
                },
                {},
                {}
              ]
            },
            "tags": {
              "allOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100,
                  "description": "The tags for this item. These tags are shown in\nthe Box web app and mobile apps next to an item.\n\nTo add or remove a tag, retrieve the item's current tags,\nmodify them, and then update this field.\n\nThere is a limit of 100 tags per item, and 10,000\nunique tags per enterprise."
                },
                {},
                {}
              ]
            },
            "lock": {
              "allOf": [
                {
                  "title": "Lock",
                  "type": "object",
                  "description": "The lock held on a file. A lock prevents a file from being moved,\nrenamed, or otherwise changed by anyone else than the user who created the\nlock.",
                  "allOf": [
                    {
                      "title": "Reference",
                      "description": "The bare basic reference for an object",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier for this object"
                        }
                      }
                    },
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "`lock`",
                          "enum": [
                            "lock"
                          ]
                        },
                        "created_by": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/User--Mini"
                            },
                            {
                              "description": "The user who created the lock."
                            }
                          ]
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time this lock was created at."
                        },
                        "expired_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time this lock is to expire at, which might be in the past."
                        },
                        "is_download_prevented": {
                          "type": "boolean",
                          "description": "Whether or not the file can be downloaded while locked."
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "The lock held on this file. If there is no lock, this can either\nbe `null` or have a timestamp in the past."
                },
                {}
              ]
            },
            "extension": {
              "type": "string",
              "description": "Indicates the (optional) file extension for this file. By default,\nthis is set to an empty string."
            },
            "is_package": {
              "type": "boolean",
              "description": "Indicates if the file is a package. Packages are commonly used\nby Mac Applications and can include iWork files."
            },
            "expiring_embed_link": {
              "allOf": [
                {
                  "title": "Expiring embed link",
                  "type": "object",
                  "description": "An expiring Box Embed Link.",
                  "allOf": [
                    {
                      "type": "object",
                      "description": "The basics of an access token",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "format": "token",
                          "description": "The requested access token."
                        },
                        "expires_in": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The time in seconds in seconds by which this token will expire."
                        },
                        "token_type": {
                          "type": "string",
                          "enum": [
                            "bearer"
                          ],
                          "description": "The type of access token returned."
                        },
                        "restricted_to": {
                          "type": "array",
                          "description": "The permissions that this access token permits,\nproviding a list of resources (files, folders, etc)\nand the scopes permitted for each of those resources.",
                          "items": {
                            "$ref": "#/definitions/FileScope"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "url": {
                          "type": "string",
                          "format": "url",
                          "description": "The actual expiring embed URL for this file, constructed\nfrom the file ID and access tokens specified in this object."
                        }
                      }
                    }
                  ]
                },
                {
                  "description": "Requesting this field creates an expiring Box Embed URL for an\nembedded preview session in an `iframe`.\n\nThis URL will expire after 60 seconds and the session will\nexpire after 60 minutes.\n\nNot all file types are supported for these embed URLs. Box Embed\nis not optimized for mobile browsers and should not be used in web\nexperiences designed for mobile devices. Many UI elements, like\nthe **download** and **print** options might not show in mobile\nbrowsers."
                },
                {}
              ]
            },
            "watermark_info": {
              "allOf": [
                {
                  "type": "object",
                  "description": "Details about the watermark applied to this item",
                  "properties": {
                    "is_watermarked": {
                      "type": "boolean",
                      "description": "Specifies if this item has a watermark applied."
                    }
                  }
                },
                {
                  "description": "Details about the watermark applied to this folder"
                },
                {}
              ]
            },
            "allowed_invitee_roles": {
              "type": "array",
              "description": "A list of the types of roles that user can be invited at\nwhen sharing this file.",
              "items": {
                "type": "string",
                "enum": [
                  "editor",
                  "viewer",
                  "previewer",
                  "uploader",
                  "previewer uploader",
                  "viewer uploader",
                  "co-owner"
                ]
              }
            },
            "is_externally_owned": {
              "type": "boolean",
              "description": "Specifies if this folder is owned by a user outside of the\nauthenticated enterprise."
            },
            "has_collaborations": {
              "type": "boolean",
              "description": "Specifies if this folder has any other collaborators."
            },
            "metadata": {
              "type": "object",
              "description": "A list of key-value pairs of metadata objects within their\nscopes.\n\nTo access the metadata for a file, first use the\nMetadata-endpoints to determine\nthe metadata templates available to your enterprise.\n\nThen use the `GET /files/:id` endpoint with\nthe `fields` query parameter to get the metadata by ID.\n\nThe ID for a metadata template will be in the format\n`metadata.<scope>.<templatename>`, for example\n`metadata.global.properties`.",
              "additionalProperties": {
                "type": "object",
                "description": "The name of the metadata template",
                "additionalProperties": {
                  "$ref": "#/definitions/Metadata"
                }
              }
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the file will automatically be deleted"
            },
            "representations": {
              "allOf": [
                {
                  "title": "Representations",
                  "description": "A list of file representations",
                  "type": "object",
                  "properties": {
                    "entries": {
                      "type": "array",
                      "description": "A list of files",
                      "items": {
                        "type": "object",
                        "description": "A file representation",
                        "properties": {
                          "content": {
                            "type": "object",
                            "description": "An object containing the URL that can be used to actually fetch\nthe representation.",
                            "properties": {
                              "url_template": {
                                "type": "string",
                                "description": "The download URL that can be used to fetch the representation.\nMake sure to make an authenticated API call to this endpoint.\n\nThis URL is a template and will require the `{+asset_path}` to\nbe replaced by a path. In general, for unpaged representations\nit can be replaced by an empty string.\n\nFor paged representations, replace the `{+asset_path}` with the\npage to request plus the extension for the file, for example\n`1.pdf`.\n\nWhen requesting the download URL the following additional\nquery params can be passed along.\n\n* `set_content_disposition_type` - Sets the\n`Content-Disposition` header in the API response with the\nspecified disposition type of either `inline` or `attachment`.\nIf not supplied, the `Content-Disposition` header is not\nincluded in the response.\n\n* `set_content_disposition_filename` - Allows the application to\n  define the representation's file name used in the\n  `Content-Disposition` header.  If not defined, the filename\n  is derived from the source file name in Box combined with the\n  extension of the representation."
                              }
                            }
                          },
                          "info": {
                            "type": "object",
                            "description": "An object containing the URL that can be used to fetch more info\non this representation.",
                            "properties": {
                              "url": {
                                "type": "string",
                                "description": "The API URL that can be used to get more info on this file\nrepresentation. Make sure to make an authenticated API call\nto this endpoint."
                              }
                            }
                          },
                          "properties": {
                            "type": "object",
                            "description": "An object containing the size and type of this presentation.",
                            "properties": {
                              "dimensions": {
                                "type": "string",
                                "format": "<width>x<height>",
                                "description": "The width by height size of this representation in pixels."
                              },
                              "paged": {
                                "type": "boolean",
                                "description": "Indicates if the representation is build up out of multiple\npages."
                              },
                              "thumb": {
                                "type": "boolean",
                                "description": "Indicates if the representation can be used as a thumbnail of\nthe file."
                              }
                            }
                          },
                          "representation": {
                            "type": "string",
                            "description": "Indicates the file type of the returned representation."
                          },
                          "status": {
                            "type": "object",
                            "description": "An object containing the status of this representation.",
                            "properties": {
                              "state": {
                                "type": "string",
                                "enum": [
                                  "success",
                                  "viewable",
                                  "pending",
                                  "none"
                                ],
                                "description": "The status of the representation.\n\n* `success` defines the representation as ready to be viewed.\n* `viewable` defines a video to be ready for viewing.\n* `pending` defines the representation as to be generated. Retry\n  this endpoint to re-check the status.\n* `none` defines that the representation will be created when\n  requested. Request the URL defined in the `info` object to\n  trigger this generation."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "description": "A list of representations for a file that can be used to\ndisplay a placeholder of the file in your application. By default\nthis returns all representations and we recommend using the\n`X-Rep-Hints` header to further customize the desired\nrepresentations."
                },
                {}
              ]
            }
          }
        }
      ]
    },
    "File--Standard": {
      "title": "File (Standard)",
      "type": "object",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A standard representation of a file, as returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Mini"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "format": "digest",
              "description": "The SHA1 hash of the file. This can be used to compare the contents\nof a file on Box with a local file."
            },
            "description": {
              "type": "string",
              "description": "The optional description of this file",
              "maxLength": 256
            },
            "size": {
              "type": "integer",
              "description": "The file size in bytes. Be careful parsing this integer as it can\nget very large and cause an integer overflow."
            },
            "path_collection": {
              "allOf": [
                {
                  "title": "Path collection",
                  "description": "A list of parent folders for an item.",
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "description": "The number of folders in this list.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "entries": {
                      "type": "array",
                      "description": "The parent folders for this item",
                      "items": {
                        "$ref": "#/definitions/Folder--Mini"
                      }
                    }
                  }
                },
                {
                  "description": "The tree of folders that this file is contained in,\nstarting at the root."
                },
                {},
                {}
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the file was created on Box."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the folder was last updated on Box."
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this file was put in the trash."
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this file is expected to be purged\nfrom the trash."
            },
            "content_created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this file was originally\ncreated, which might be before it was uploaded to Box."
            },
            "content_modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this folder was last updated,\nwhich might be before it was uploaded to Box."
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created this file"
                },
                {}
              ]
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last modified this file"
                },
                {},
                {}
              ]
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who owns this file"
                },
                {},
                {}
              ]
            },
            "shared_link": {
              "allOf": [
                {
                  "title": "Shared link",
                  "description": "Shared links provide direct, read-only access to files or folder on Box.\n\nShared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriately authenticated Box users.",
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "url",
                      "description": "The URL that can be used to access the item on Box.\n\nThis URL will display the item in Box's preview UI where the file\ncan be downloaded if allowed.\n\nThis URL will continue to work even when a custom `vanity_url`\nhas been set for this shared link."
                    },
                    "download_url": {
                      "type": "string",
                      "format": "url",
                      "x-box-premium-feature": true,
                      "description": "A URL that can be used to download the file. This URL can be used in\na browser to download the file. This URL includes the file\nextension so that the file will be saved with the right file type.\n\nThis property will be `null` for folders."
                    },
                    "vanity_url": {
                      "type": "string",
                      "format": "url",
                      "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application."
                    },
                    "access": {
                      "type": "string",
                      "description": "The access level for this shared link.\n\n* `open` - provides access to this item to anyone with this link\n* `company` - only provides access to this item to people the same company\n* `collaborators` - only provides access to this item to people who are\n   collaborators on this item\n\nIf this field is omitted when creating the shared link, the access level\nwill be set to the default access level specified by the enterprise admin.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_access": {
                      "type": "string",
                      "description": "The effective access level for the shared link. This can be a more\nrestrictive access level than the value in the `access` field when the\nenterprise settings restrict the allowed access levels.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_permission": {
                      "type": "string",
                      "description": "The effective permissions for this shared link.",
                      "enum": [
                        "can_download",
                        "can_preview"
                      ]
                    },
                    "unshared_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when this link will be unshared. This field can only be\nset by users with paid accounts."
                    },
                    "is_password_enabled": {
                      "type": "boolean",
                      "description": "Defines if the shared link requires a password to access the item."
                    },
                    "permissions": {
                      "type": "object",
                      "description": "Defines if this link allows a user to preview and download an item.",
                      "properties": {
                        "can_download": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be downloaded. For\nshared links on folders, this also applies to any items in the folder.\n\nThis value can be set to `true` when the effective access level is\nset to `open` or `company`, not `collaborators`."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be previewed.\n\nThis value is always `true`. For shared links on folders this also\napplies to any items in the folder."
                        }
                      }
                    },
                    "download_count": {
                      "type": "integer",
                      "description": "The number of times this item has been downloaded."
                    },
                    "preview_count": {
                      "type": "integer",
                      "description": "The number of times this item has been previewed."
                    }
                  }
                },
                {
                  "description": "The shared link for this file. This will be\n`null` if no shared link has been created for this\nfile."
                },
                {},
                {}
              ]
            },
            "parent": {
              "allOf": [
                {
                  "$ref": "#/definitions/Folder--Mini"
                },
                {
                  "description": "The folder that this file is located within."
                },
                {}
              ]
            },
            "item_status": {
              "type": "string",
              "description": "Defines if this item has been deleted or not.\n\n* `active` when the item has is not in the trash\n* `trashed` when the item has been moved to the trash but not deleted\n* `deleted` when the item has been permanently deleted.",
              "enum": [
                "active",
                "trashed",
                "deleted"
              ]
            },
            "file_version": {
              "allOf": [
                {
                  "$ref": "#/definitions/FileVersion--Mini"
                },
                {
                  "description": "The information about the current version of the file."
                },
                {}
              ]
            }
          }
        }
      ]
    },
    "User--Mini": {
      "title": "User (Mini)",
      "type": "object",
      "description": "A mini representation of a user, used when\nnested within another resource.",
      "allOf": [
        {
          "title": "Reference",
          "description": "The bare basic reference for an object",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for this object"
            }
          }
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`user`",
              "enum": [
                "user"
              ]
            },
            "name": {
              "type": "string",
              "description": "The display name of this user",
              "maxLength": 50
            },
            "login": {
              "type": "string",
              "format": "email",
              "description": "The primary email address of this user"
            }
          }
        }
      ]
    },
    "FileScope": {
      "title": "File scope",
      "type": "object",
      "description": "A relation between a file and the scopes for which the file can be accessed",
      "properties": {
        "scope": {
          "type": "string",
          "description": "The file scopes for the file access",
          "enum": [
            "annotation_edit",
            "annotation_view_all",
            "annotation_view_self",
            "base_explorer",
            "base_picker",
            "base_preview",
            "base_upload",
            "item_delete",
            "item_download",
            "item_preview",
            "item_rename",
            "item_share"
          ]
        },
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/File--Mini"
            },
            {
              "description": "The file for which the file can be accessed"
            }
          ]
        }
      }
    },
    "Metadata": {
      "title": "Metadata instance",
      "type": "object",
      "description": "A piece of metadata as specified by a metadata template and\napplied to a file or folder.",
      "x-box-tag": "file_metadata",
      "x-box-reference-category": "file_metadata",
      "properties": {
        "$canEdit": {
          "type": "boolean",
          "description": "Whether the user can edit this metadata"
        },
        "$id": {
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "description": "A UUID to identify the metadata object"
        },
        "$parent": {
          "type": "string",
          "description": "An ID for the parent folder"
        },
        "$scope": {
          "type": "string",
          "description": "An ID for the scope in which this template\nhas been applied"
        },
        "$template": {
          "type": "string",
          "description": "The name of the template"
        },
        "$type": {
          "type": "string",
          "description": "A unique identifier for the \"type\" of this instance. This is an internal\nsystem property and should not be used by a client application."
        },
        "$typeVersion": {
          "type": "integer",
          "description": "The last-known version of the template of the object. This is an internal\nsystem property and should not be used by a client application."
        },
        "$version": {
          "type": "integer",
          "description": "The version of the metadata object. Starts at 0 and increases every time\na user-defined property is modified."
        }
      },
      "additionalProperties": {
        "type": "string",
        "x-box-example-key": "name"
      }
    },
    "File--Mini": {
      "title": "File (Mini)",
      "type": "object",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A mini representation of a file, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/File--Base"
        },
        {
          "properties": {
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {},
                {}
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the file"
            }
          }
        }
      ]
    },
    "Folder--Mini": {
      "title": "Folder (Mini)",
      "type": "object",
      "x-box-tag": null,
      "x-box-reference-category": null,
      "description": "A mini representation of a file version, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/Folder--Base"
        },
        {
          "properties": {
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {},
                {}
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the folder."
            }
          }
        }
      ]
    },
    "FileVersion--Mini": {
      "title": "File version (Mini)",
      "type": "object",
      "description": "A mini representation of a file version, used when\nnested within another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/FileVersion--Base"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "description": "The SHA1 hash of this version of the file."
            }
          }
        }
      ]
    },
    "File--Base": {
      "title": "File (Base)",
      "type": "object",
      "description": "The bare basic representation of a file, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
        },
        "etag": {
          "type": "string",
          "description": "The HTTP `etag` of this file. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the file if (no) changes have happened."
        },
        "type": {
          "type": "string",
          "description": "`file`",
          "enum": [
            "file"
          ]
        }
      }
    },
    "Folder--Base": {
      "title": "Folder (Base)",
      "type": "object",
      "description": "The bare basic representation of a folder, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting a folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folders/123`\nthe `folder_id` is `123`."
        },
        "etag": {
          "type": "string",
          "description": "The HTTP `etag` of this folder. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the folder if (no) changes have happened."
        },
        "type": {
          "type": "string",
          "description": "`folder`",
          "enum": [
            "folder"
          ]
        }
      }
    },
    "FileVersion--Base": {
      "title": "File version (Base)",
      "type": "object",
      "description": "The bare basic representation of a file version, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file version."
        },
        "type": {
          "type": "string",
          "description": "`file_version`",
          "enum": [
            "file_version"
          ]
        }
      }
    }
  }
}