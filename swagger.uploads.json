{
  "swagger": "2.0",
  "info": {
    "title": "Box Platform API",
    "description": "[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.",
    "termsOfService": "https://cloud.app.box.com/s/rmwxu64h1ipr41u49w3bbuvbsa29wku9",
    "contact": {
      "name": "Box, Inc",
      "url": "https://box.dev",
      "email": "devrel@box.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "2.0"
  },
  "host": "upload.box.com",
  "basePath": "/api/2.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/files/{file_id}/content": {
      "post": {
        "operationId": "post_files_id_content",
        "tags": [
          "File Uploads"
        ],
        "summary": "Upload a file version",
        "description": "Update a file's content. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The ID of the file.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Content-MD5",
            "required": false,
            "in": "header",
            "description": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the new file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          }
        }
      }
    },
    "/files/content": {
      "post": {
        "operationId": "post_files_content",
        "tags": [
          "File Uploads"
        ],
        "summary": "Upload a file",
        "description": "Uploads a small file to Box. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Content-MD5",
            "required": false,
            "in": "header",
            "description": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the new file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions": {
      "post": {
        "operationId": "post_files_upload_sessions",
        "summary": "Create upload session",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Creates an upload session for a new file.",
        "responses": {
          "201": {
            "description": "Returns a new upload session.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "folder_id",
                "file_size",
                "file_name"
              ],
              "properties": {
                "folder_id": {
                  "description": "The ID of the folder to upload the new file to.",
                  "type": "string"
                },
                "file_size": {
                  "description": "The total number of bytes of the file to be uploaded",
                  "type": "integer",
                  "format": "int64"
                },
                "file_name": {
                  "description": "The name of new file",
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/files/{file_id}/upload_sessions": {
      "post": {
        "operationId": "post_files_id_upload_sessions",
        "summary": "Create upload session for existing file",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Creates an upload session for an existing file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The ID of the file.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "file_size"
              ],
              "properties": {
                "file_size": {
                  "description": "The total number of bytes of the file to be uploaded",
                  "type": "integer",
                  "format": "int64"
                },
                "file_name": {
                  "description": "The optional new name of new file",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new upload session.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}": {
      "get": {
        "operationId": "get_files_upload_sessions_id",
        "summary": "Get upload session",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Return information about an upload session.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an upload session object.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          }
        }
      },
      "put": {
        "operationId": "put_files_upload_sessions_id",
        "summary": "Upload a part",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Updates a chunk of an upload session for a file.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Digest",
            "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Range",
            "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Chunk has been uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/UploadPart"
            }
          },
          "409": {
            "description": "Returns an error if the chunk conflicts with another\nchunk previously uploaded.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error if a precondition failed.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "416": {
            "description": "Returns an error if the content range does not match a specified range\nfor the session.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_upload_sessions_id",
        "summary": "Abort upload session",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Abort an upload session and discard all data uploaded.\n\nThis cannot be reversed.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the session was\nsuccessfully aborted."
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}/parts": {
      "get": {
        "operationId": "get_files_upload_sessions_id_parts",
        "summary": "List parts",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Return a list of the chunks uploaded to the upload\nsession so far.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of parts that have been uploaded.",
            "schema": {
              "$ref": "#/definitions/UploadParts"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}/commit": {
      "post": {
        "operationId": "post_files_upload_sessions_id_commit",
        "summary": "Commit upload session",
        "tags": [
          "Chunked Uploads"
        ],
        "description": "Close an upload session and create a file from the\nuploaded chunks.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Digest",
            "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "description": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": [
                "parts"
              ],
              "properties": {
                "parts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UploadPart--Mini"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "202": {
            "description": "Returns when all chunks have been uploaded but not yet processed.\n\nInspect the upload session to get more information about the\nprogress of processing the chunks, then retry committing the file\nwhen all chunks have processed.",
            "headers": {
              "Retry-After": {
                "description": "Indicates the number of seconds the client should wait before\nattempting their commit request again.",
                "type": "integer"
              }
            }
          },
          "409": {
            "description": "Returns an error if there is already a file with the same name\nin the target folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error if the `If-Match` or `If-None-Match` conditions fail.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2Security": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.box.com/api/oauth2/authorize",
      "tokenUrl": "https://api.box.com/oauth2/token",
      "scopes": {
        "root_readonly": "Read all files and folders stored in Box",
        "root_readwrite": "Read and write all files and folders stored in Box",
        "manage_app_users": "Provision and manage app users",
        "manage_managed_users": "Provision and manage managed users",
        "manage_groups": "Manage an enterprise's groups",
        "manage_webhook": "Create webhooks programmatically through the API",
        "manage_enterprise_properties": "Manage enterprise properties",
        "manage_data_retention": "Manage data retention polices",
        "manage_legal_hold": "Manage Legal Holds"
      }
    }
  },
  "security": [
    {
      "OAuth2Security": []
    }
  ],
  "definitions": {
    "Files": {
      "title": "Files",
      "description": "A list of files",
      "properties": {
        "total_count": {
          "description": "The number of files.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "description": "A list of files",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "ClientError": {
      "title": "Client Error",
      "description": "A generic error",
      "properties": {
        "type": {
          "description": "`error`",
          "type": "string",
          "enum": [
            "error"
          ]
        },
        "status": {
          "description": "The HTTP status of the response.",
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "description": "A Box-specific error code",
          "type": "string",
          "enum": [
            "created",
            "accepted",
            "no_content",
            "redirect",
            "not_modified",
            "bad_request",
            "unauthorized",
            "forbidden",
            "not_found",
            "method_not_allowed",
            "conflict",
            "precondition_failed",
            "too_many_requests",
            "internal_server_error",
            "unavailable"
          ]
        },
        "help_url": {
          "description": "A URL that links to more information about why this error occurred.",
          "type": "string"
        },
        "message": {
          "description": "A short message describing the error.",
          "type": "string"
        },
        "request_id": {
          "description": "A unique identifier for this response, which can be used\nwhen contacting Box support.",
          "type": "string"
        }
      }
    },
    "UploadSession": {
      "title": "Upload Session",
      "description": "An upload session for chunk uploading a file.",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`upload_session`",
              "enum": [
                "upload_session"
              ]
            },
            "session_expires_at": {
              "description": "The date and time when this session expires.",
              "type": "string",
              "format": "date-time"
            },
            "part_size": {
              "type": "integer",
              "format": "int64",
              "description": "The  size in bytes that must be used for all parts of of the\nupload.\n\nOnly the last part is allowed to be of a smaller size."
            },
            "total_parts": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of parts expected in this upload session,\nas determined by the file size and part size."
            },
            "num_parts_processed": {
              "type": "integer",
              "format": "int32",
              "description": "The number of parts that have been uploaded and processed\nby the server. This starts at `0`.\n\nWhen committing a file files, inspecting this property can\nprovide insight if all parts have been uploaded correctly."
            },
            "session_endpoints": {
              "allOf": [
                {
                  "$ref": "#/definitions/SessionEndpoints"
                },
                {
                  "description": "A list of endpoints for this session."
                }
              ]
            }
          }
        }
      ]
    },
    "UploadPart": {
      "title": "Upload Part",
      "description": "A chunk of a file uploaded as part of\nan upload session.",
      "allOf": [
        {
          "$ref": "#/definitions/UploadPart--Mini"
        },
        {
          "properties": {
            "sha1": {
              "description": "The SHA1 hash of the chunk.",
              "type": "string"
            }
          }
        }
      ]
    },
    "UploadParts": {
      "title": "Upload Parts",
      "description": "A list of uploaded chunks for an upload\nsession.",
      "allOf": [
        {
          "$ref": "#/definitions/Pagination"
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UploadPart"
              }
            }
          }
        }
      ]
    },
    "UploadPart--Mini": {
      "title": "Upload Part (Mini)",
      "description": "The basic representation of an upload\nsession chunk.",
      "properties": {
        "part_id": {
          "description": "The unique ID of the chunk.",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the chunk within the file\nin bytes. The lower bound of the position\nof the chunk within the file.",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "The size of the chunk in bytes.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "File": {
      "title": "File",
      "description": "A full representation of a file, as can be returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Standard"
        },
        {},
        {
          "properties": {
            "version_number": {
              "type": "string",
              "description": "The version number of this file"
            },
            "comment_count": {
              "type": "integer",
              "description": "The number of comments on this file"
            },
            "permissions": {
              "allOf": [
                {
                  "$ref": "#/definitions/FilePermissions"
                },
                {
                  "description": "Describes the permissions that the current user has\nfor this file."
                },
                {},
                {}
              ]
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "All tags applied to this folder."
            },
            "lock": {
              "allOf": [
                {
                  "$ref": "#/definitions/Lock"
                },
                {
                  "description": "The lock held on this file. If there is no lock, this can either\nbe `null` or have a timestamp in the past."
                },
                {}
              ]
            },
            "extension": {
              "type": "string",
              "description": "Indicates the suffix, when available, on the file. By default,\nset to an empty string. The suffix usually indicates the encoding\n(file format) of the file contents or usage."
            },
            "is_package": {
              "type": "boolean",
              "description": "Whether the file is a package. Used for Mac Packages used by iWorks."
            },
            "expiring_embed_link": {
              "type": "string",
              "description": "Requesting this field creates an expiring URL for an\nembedded preview session in an iframe.\n\nThis URL will expire after 60 seconds and the session will\nexpire after 60 minutes."
            },
            "watermark_info": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatermarkInfo"
                },
                {
                  "description": "Information about the watermarking on this file"
                },
                {}
              ]
            },
            "allowed_invitee_roles": {
              "type": "array",
              "description": "Folder [collaboration](#collaboration-object) roles allowed by the\nenterprise administrator.",
              "items": {
                "type": "string"
              },
              "enum": [
                "open",
                "company",
                "collaborators"
              ]
            },
            "is_externally_owned": {
              "type": "boolean",
              "description": "Whether this file is owned by a user outside of the enterprise."
            },
            "has_collaborations": {
              "type": "boolean",
              "description": "Whether this file has any collaborators."
            },
            "metadata": {
              "type": "object",
              "description": "A list of key-value pairs of metadata objects within their\nscopes.\n\nTo access the metadata for a file, first use the\n[Metadata](#metadata) endpoints to determine\nthe metadata templates available to your enterprise.\n\nThe use the [Retrieve File](#get-file-id) endpoint with\nthe `fields` query parameter to get the metadata by ID. The\nID for the metadata template will be in the format\n`metadata.<scope>.<templatename>`, for example\n`fields=metadata.global.properties`.",
              "enum": [
                "global",
                "enteprise_<:enterprise_id>"
              ],
              "additionalProperties": {
                "type": "object",
                "description": "The name of the metadata template",
                "additionalProperties": {
                  "$ref": "#/definitions/Metadata"
                }
              }
            }
          }
        }
      ]
    },
    "Reference": {
      "title": "Reference",
      "description": "The bare basic reference for an object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this object"
        }
      }
    },
    "SessionEndpoints": {
      "title": "Session Endpoints",
      "description": "A list of endpoints for a chunked upload session.",
      "properties": {
        "upload_part": {
          "type": "string",
          "description": "The URL to upload parts to"
        },
        "commit": {
          "type": "string",
          "description": "The URL used to commit the file"
        },
        "abort": {
          "type": "string",
          "description": "The URL for used to abort the session."
        },
        "list_parts": {
          "type": "string",
          "description": "The URL users to list all parts."
        },
        "status": {
          "type": "string",
          "description": "The URL used to get the status of the upload."
        },
        "log_event": {
          "type": "string",
          "description": "The URL used to get the upload log from."
        }
      }
    },
    "Pagination": {
      "title": "Pagination",
      "description": "The part of an API response that describes pagination",
      "properties": {
        "total_count": {
          "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.",
          "type": "integer",
          "format": "int64"
        },
        "limit": {
          "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.",
          "type": "integer",
          "format": "int64"
        },
        "order": {
          "description": "The order by which items are returned",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaginationOrder"
          }
        }
      }
    },
    "File--Standard": {
      "title": "File (Standard)",
      "description": "A standard representation of a file, as returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Mini"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "format": "digest",
              "description": "The SHA1 hash of the file."
            },
            "description": {
              "type": "string",
              "description": "The description of the file",
              "maxLength": 256
            },
            "size": {
              "type": "integer",
              "description": "The file size in bytes. Be careful parsing this integer, it can\neasily go into [exponent notation](http://en.wikipedia.org/wiki/\\\nDouble-precision_floating-point_format)."
            },
            "path_collection": {
              "type": "array",
              "description": "The path of folders to this file, starting at the root",
              "items": {
                "$ref": "#/definitions/Folder--Mini"
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was upload to Box’s servers"
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last updated on the Box servers"
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last moved to the trash"
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file will be permanently deleted"
            },
            "content_created_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was created originally"
            },
            "content_modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "When this file was last updated"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "When the file will automatically be deleted"
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created this file"
                },
                {}
              ]
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last modified this file"
                },
                {}
              ]
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who owns this file"
                },
                {}
              ]
            },
            "shared_link": {
              "allOf": [
                {
                  "$ref": "#/definitions/SharedLink"
                },
                {
                  "description": "The shared link object for this file. Will be\n`null` if no shared link has been created."
                },
                {}
              ]
            },
            "parent": {
              "allOf": [
                {
                  "$ref": "#/definitions/Folder--Mini"
                },
                {
                  "description": "The folder that contains this file."
                },
                {}
              ]
            },
            "item_status": {
              "type": "string",
              "enum": [
                "active",
                "trashed",
                "deleted"
              ],
              "description": "Whether this item is deleted or not. Values include `active`,\n`trashed` if the file has been moved to the trash, and `deleted` if\nthe file has been permanently deleted"
            }
          }
        }
      ]
    },
    "FilePermissions": {
      "title": "File Permissions",
      "description": "The permissions that the authenticated user has for a file.",
      "allOf": [
        {
          "$ref": "#/definitions/Permissions"
        },
        {
          "properties": {
            "can_annotate": {
              "type": "boolean",
              "description": "Specifies if the user can place annotations on this file."
            },
            "can_comment": {
              "type": "boolean",
              "description": "Specifies if the user can place comments on this file."
            },
            "can_preview": {
              "type": "boolean",
              "description": "Specifies if the user can preview this file."
            },
            "can_upload": {
              "type": "boolean",
              "description": "Specifies if the user can upload a new version of this file."
            },
            "can_view_annotations_all": {
              "type": "boolean",
              "description": "Specifies if the user view all annotations placed on this file"
            },
            "can_view_annotations_self": {
              "type": "boolean",
              "description": "Specifies if the user view annotations placed by themselves\non this file"
            }
          }
        }
      ]
    },
    "Lock": {
      "title": "Lock",
      "description": "The lock held on a file.",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`lock`",
              "enum": [
                "lock"
              ]
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The use who created the lock"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time this lock was created at"
            },
            "expired_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time this lock is to expire at, which might be in the past"
            },
            "is_download_prevented": {
              "type": "boolean",
              "description": "Whether or not the file can be downloaded while locked"
            }
          }
        }
      ]
    },
    "WatermarkInfo": {
      "title": "Watermark Info",
      "description": "Details about the watermark applied to this item",
      "properties": {
        "is_watermarked": {
          "type": "boolean",
          "description": "Specifies if this item has a watermark applied."
        }
      }
    },
    "Metadata": {
      "title": "Metadata",
      "description": "A piece of metadata as specified by a metadata template and\napplied to a file or folder.",
      "type": "object",
      "properties": {
        "$canEdit": {
          "type": "boolean",
          "description": "Whether the user can edit this metadata"
        },
        "$id": {
          "type": "string",
          "format": "uuid",
          "description": "36-character UUID to identify the metadata object"
        },
        "$parent": {
          "type": "string",
          "description": "An ID for the parent folder"
        },
        "$scope": {
          "type": "string",
          "description": "An ID for the scope in which this template\nhas been applied"
        },
        "$template": {
          "type": "string",
          "description": "The name of the template"
        },
        "$type": {
          "type": "string",
          "description": "A unique identifier for the \"type\" of this instance. This is an internal\nsystem property and should not be used by a client application."
        },
        "$typeVersion": {
          "type": "integer",
          "description": "The last-known version of the template of the object. This is an internal\nsystem property and should not be used by a client application."
        },
        "$version": {
          "type": "integer",
          "description": "The version of the metadata object. Starts at 0 and increases every time\na user-defined property is modified."
        }
      }
    },
    "PaginationOrder": {
      "title": "Pagination Order",
      "description": "The order in which a pagination is ordered",
      "properties": {
        "by": {
          "description": "The field to order by",
          "type": "string"
        },
        "direction": {
          "type": "string",
          "description": "The direction to order by, either ascending or descending",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "File--Mini": {
      "title": "File (Mini)",
      "description": "A mini representation of a file, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/Item"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`file`",
              "enum": [
                "file"
              ]
            },
            "sequence_id": {
              "type": "string",
              "description": "A unique ID for use with the /events endpoint"
            },
            "etag": {
              "type": "string",
              "description": "The entity tag of this file object. Used with `If-Match`\nheaders."
            },
            "name": {
              "type": "string",
              "description": "The name of the file"
            }
          }
        }
      ]
    },
    "Folder--Mini": {
      "title": "Folder (Mini)",
      "description": "A mini representation of a file version, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/Item"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`folder`",
              "enum": [
                "folder"
              ]
            },
            "sequence_id": {
              "type": "string",
              "description": "A unique identifier that can be used in combination\nwith the `/events` endpoint. May be `null` for\nsome folders such as the root folder and trash folder."
            },
            "etag": {
              "type": "string",
              "description": "The HTTP etag of this folder. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the folder if (no) changes have happened."
            },
            "name": {
              "type": "string",
              "description": "The name of the folder."
            }
          }
        }
      ]
    },
    "User--Mini": {
      "title": "User (Mini)",
      "description": "A mini representation of a user, used when\nnested within another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "description": "`user`",
              "enum": [
                "user"
              ]
            },
            "name": {
              "type": "string",
              "description": "The display name of this user",
              "maxLength": 50
            },
            "login": {
              "type": "string",
              "format": "email",
              "description": "The primary email address of this user"
            }
          }
        }
      ]
    },
    "SharedLink": {
      "title": "Shared Link",
      "description": "Shared links provide direct, read-only access to files or folder on Box.\n\nShared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriately authenticated Box users.",
      "properties": {
        "url": {
          "type": "string",
          "format": "url",
          "description": "The URL that can be used to access the item on Box.\n\nThis URL will display the item in Box's preview UI where the file\ncan be downloaded if allowed.\n\nThis URL will continue to work even when a custom `vanity_url`\nhas been set for this shared link."
        },
        "download_url": {
          "type": "string",
          "format": "url",
          "description": "A URL that can be used to download the file. This URL can be used in\na browser to download the file. This URL includes the file\nextension so that the file will be saved with the right file type.\n\nThis property will be `null` for folders."
        },
        "vanity_url": {
          "type": "string",
          "format": "url",
          "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application."
        },
        "access": {
          "type": "string",
          "description": "The access level for this shared link.\n\n* `open` - provides access to this item to anyone with this link\n* `company` - only provides access to this item to people the same company\n* `collaborators` - only provides access to this item to people who are\n   collaborators on this item\n\nIf this field is omitted when creating the shared link, the access level\nwill be set to the default access level specified by the enterprise admin.",
          "enum": [
            "open",
            "company",
            "collaborators"
          ]
        },
        "effective_access": {
          "type": "string",
          "description": "The effective access level for the shared link. This can be a more\nrestrictive access level than the value in the `access` field when the\nenterprise settings restrict the allowed access levels.",
          "enum": [
            "open",
            "company",
            "collaborators"
          ]
        },
        "effective_permission": {
          "type": "string",
          "description": "The effective permissions for this shared link.",
          "enum": [
            "can_download",
            "can_preview"
          ]
        },
        "unshared_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when this link will be disabled. This field can only be\nset by users with paid accounts."
        },
        "is_password_enabled": {
          "type": "boolean",
          "description": "Defines if the shared link requires a password to access the item."
        },
        "permissions": {
          "type": "object",
          "description": "Defines if this link allows a user to preview and download an item.",
          "properties": {
            "can_download": {
              "type": "boolean",
              "description": "Defines if the shared link allows for the item to be downloaded. For\nshared links on folders, this also applies to any items in the folder.\n\nThis value can be set to `true` when the effective access level is\nset to `open` or `company`, not `collaborators`."
            },
            "can_preview": {
              "type": "boolean",
              "description": "Defines if the shared link allows for the item to be previewed.\n\nThis value is always `true`. For shared links on folders this also\napplies to any items in the folder."
            }
          }
        },
        "download_count": {
          "type": "integer",
          "description": "The number of times this item has been downloaded."
        },
        "preview_count": {
          "type": "integer",
          "description": "The number of times this item has been previewed."
        }
      }
    },
    "Permissions": {
      "title": "Permissions",
      "description": "The permissions that the authenticated user has for an item.",
      "properties": {
        "can_delete": {
          "type": "boolean",
          "description": "Specifies if the user can delete this item"
        },
        "can_download": {
          "type": "boolean",
          "description": "Specifies if the user can download this item"
        },
        "can_invite_collaborator": {
          "type": "boolean",
          "description": "Specifies if the user can invite collaborators to the item"
        },
        "can_rename": {
          "type": "boolean",
          "description": "Specifies if the user can rename this item"
        },
        "can_set_share_access": {
          "type": "boolean",
          "description": "Specifies if the user can manage shared links for\nthis item"
        },
        "can_share": {
          "type": "boolean",
          "description": "Specifies if the user can invite new collaborators to this item"
        }
      }
    },
    "Item": {
      "title": "Item",
      "description": "A generic mini representation of a file, folder, user or enterprise",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "type": {
              "description": "The type of this item",
              "type": "string"
            },
            "sequence_id": {
              "type": "string",
              "description": "A unique ID for use with the `/events` endpoint. May be `null` for\nsome items, such as root or trash."
            },
            "etag": {
              "type": "string",
              "description": "The entity tag of this item. Used with If-Match headers.\nMay be `null` for some folders such as root or trash."
            },
            "name": {
              "type": "string",
              "description": "The name of the item."
            }
          }
        }
      ]
    }
  }
}